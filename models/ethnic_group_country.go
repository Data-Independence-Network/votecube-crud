// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EthnicGroupCountry is an object representing the database table.
type EthnicGroupCountry struct {
	EthnicGroupCountryID int64 `boil:"ethnic_group_country_id" json:"ethnic_group_country_id" toml:"ethnic_group_country_id" yaml:"ethnic_group_country_id"`
	EthnicGroupID        int64 `boil:"ethnic_group_id" json:"ethnic_group_id" toml:"ethnic_group_id" yaml:"ethnic_group_id"`
	CountryID            int64 `boil:"country_id" json:"country_id" toml:"country_id" yaml:"country_id"`

	R *ethnicGroupCountryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ethnicGroupCountryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EthnicGroupCountryColumns = struct {
	EthnicGroupCountryID string
	EthnicGroupID        string
	CountryID            string
}{
	EthnicGroupCountryID: "ethnic_group_country_id",
	EthnicGroupID:        "ethnic_group_id",
	CountryID:            "country_id",
}

// EthnicGroupCountryRels is where relationship names are stored.
var EthnicGroupCountryRels = struct {
	EthnicGroup string
	Country     string
}{
	EthnicGroup: "EthnicGroup",
	Country:     "Country",
}

// ethnicGroupCountryR is where relationships are stored.
type ethnicGroupCountryR struct {
	EthnicGroup *EthnicGroup
	Country     *Country
}

// NewStruct creates a new relationship struct
func (*ethnicGroupCountryR) NewStruct() *ethnicGroupCountryR {
	return &ethnicGroupCountryR{}
}

// ethnicGroupCountryL is where Load methods for each relationship are stored.
type ethnicGroupCountryL struct{}

var (
	ethnicGroupCountryColumns               = []string{"ethnic_group_country_id", "ethnic_group_id", "country_id"}
	ethnicGroupCountryColumnsWithoutDefault = []string{"ethnic_group_country_id", "ethnic_group_id", "country_id"}
	ethnicGroupCountryColumnsWithDefault    = []string{}
	ethnicGroupCountryPrimaryKeyColumns     = []string{"ethnic_group_country_id"}
)

type (
	// EthnicGroupCountrySlice is an alias for a slice of pointers to EthnicGroupCountry.
	// This should generally be used opposed to []EthnicGroupCountry.
	EthnicGroupCountrySlice []*EthnicGroupCountry
	// EthnicGroupCountryHook is the signature for custom EthnicGroupCountry hook methods
	EthnicGroupCountryHook func(context.Context, boil.ContextExecutor, *EthnicGroupCountry) error

	ethnicGroupCountryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ethnicGroupCountryType                 = reflect.TypeOf(&EthnicGroupCountry{})
	ethnicGroupCountryMapping              = queries.MakeStructMapping(ethnicGroupCountryType)
	ethnicGroupCountryPrimaryKeyMapping, _ = queries.BindMapping(ethnicGroupCountryType, ethnicGroupCountryMapping, ethnicGroupCountryPrimaryKeyColumns)
	ethnicGroupCountryInsertCacheMut       sync.RWMutex
	ethnicGroupCountryInsertCache          = make(map[string]insertCache)
	ethnicGroupCountryUpdateCacheMut       sync.RWMutex
	ethnicGroupCountryUpdateCache          = make(map[string]updateCache)
	ethnicGroupCountryUpsertCacheMut       sync.RWMutex
	ethnicGroupCountryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var ethnicGroupCountryBeforeInsertHooks []EthnicGroupCountryHook
var ethnicGroupCountryBeforeUpdateHooks []EthnicGroupCountryHook
var ethnicGroupCountryBeforeDeleteHooks []EthnicGroupCountryHook
var ethnicGroupCountryBeforeUpsertHooks []EthnicGroupCountryHook

var ethnicGroupCountryAfterInsertHooks []EthnicGroupCountryHook
var ethnicGroupCountryAfterSelectHooks []EthnicGroupCountryHook
var ethnicGroupCountryAfterUpdateHooks []EthnicGroupCountryHook
var ethnicGroupCountryAfterDeleteHooks []EthnicGroupCountryHook
var ethnicGroupCountryAfterUpsertHooks []EthnicGroupCountryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EthnicGroupCountry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EthnicGroupCountry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EthnicGroupCountry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EthnicGroupCountry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EthnicGroupCountry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EthnicGroupCountry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EthnicGroupCountry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EthnicGroupCountry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EthnicGroupCountry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupCountryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEthnicGroupCountryHook registers your hook function for all future operations.
func AddEthnicGroupCountryHook(hookPoint boil.HookPoint, ethnicGroupCountryHook EthnicGroupCountryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ethnicGroupCountryBeforeInsertHooks = append(ethnicGroupCountryBeforeInsertHooks, ethnicGroupCountryHook)
	case boil.BeforeUpdateHook:
		ethnicGroupCountryBeforeUpdateHooks = append(ethnicGroupCountryBeforeUpdateHooks, ethnicGroupCountryHook)
	case boil.BeforeDeleteHook:
		ethnicGroupCountryBeforeDeleteHooks = append(ethnicGroupCountryBeforeDeleteHooks, ethnicGroupCountryHook)
	case boil.BeforeUpsertHook:
		ethnicGroupCountryBeforeUpsertHooks = append(ethnicGroupCountryBeforeUpsertHooks, ethnicGroupCountryHook)
	case boil.AfterInsertHook:
		ethnicGroupCountryAfterInsertHooks = append(ethnicGroupCountryAfterInsertHooks, ethnicGroupCountryHook)
	case boil.AfterSelectHook:
		ethnicGroupCountryAfterSelectHooks = append(ethnicGroupCountryAfterSelectHooks, ethnicGroupCountryHook)
	case boil.AfterUpdateHook:
		ethnicGroupCountryAfterUpdateHooks = append(ethnicGroupCountryAfterUpdateHooks, ethnicGroupCountryHook)
	case boil.AfterDeleteHook:
		ethnicGroupCountryAfterDeleteHooks = append(ethnicGroupCountryAfterDeleteHooks, ethnicGroupCountryHook)
	case boil.AfterUpsertHook:
		ethnicGroupCountryAfterUpsertHooks = append(ethnicGroupCountryAfterUpsertHooks, ethnicGroupCountryHook)
	}
}

// OneG returns a single ethnicGroupCountry record from the query using the global executor.
func (q ethnicGroupCountryQuery) OneG(ctx context.Context) (*EthnicGroupCountry, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ethnicGroupCountry record from the query.
func (q ethnicGroupCountryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EthnicGroupCountry, error) {
	o := &EthnicGroupCountry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ethnic_group_country")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all EthnicGroupCountry records from the query using the global executor.
func (q ethnicGroupCountryQuery) AllG(ctx context.Context) (EthnicGroupCountrySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all EthnicGroupCountry records from the query.
func (q ethnicGroupCountryQuery) All(ctx context.Context, exec boil.ContextExecutor) (EthnicGroupCountrySlice, error) {
	var o []*EthnicGroupCountry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EthnicGroupCountry slice")
	}

	if len(ethnicGroupCountryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all EthnicGroupCountry records in the query, and panics on error.
func (q ethnicGroupCountryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all EthnicGroupCountry records in the query.
func (q ethnicGroupCountryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ethnic_group_country rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q ethnicGroupCountryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ethnicGroupCountryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ethnic_group_country exists")
	}

	return count > 0, nil
}

// EthnicGroup pointed to by the foreign key.
func (o *EthnicGroupCountry) EthnicGroup(mods ...qm.QueryMod) ethnicGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("ethnic_group_id=?", o.EthnicGroupID),
	}

	queryMods = append(queryMods, mods...)

	query := EthnicGroups(queryMods...)
	queries.SetFrom(query.Query, "\"ethnic_group\"")

	return query
}

// Country pointed to by the foreign key.
func (o *EthnicGroupCountry) Country(mods ...qm.QueryMod) countryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("country_id=?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	query := Countries(queryMods...)
	queries.SetFrom(query.Query, "\"country\"")

	return query
}

// LoadEthnicGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ethnicGroupCountryL) LoadEthnicGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEthnicGroupCountry interface{}, mods queries.Applicator) error {
	var slice []*EthnicGroupCountry
	var object *EthnicGroupCountry

	if singular {
		object = maybeEthnicGroupCountry.(*EthnicGroupCountry)
	} else {
		slice = *maybeEthnicGroupCountry.(*[]*EthnicGroupCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ethnicGroupCountryR{}
		}
		args = append(args, object.EthnicGroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ethnicGroupCountryR{}
			}

			for _, a := range args {
				if a == obj.EthnicGroupID {
					continue Outer
				}
			}

			args = append(args, obj.EthnicGroupID)
		}
	}

	query := NewQuery(qm.From(`ethnic_group`), qm.WhereIn(`ethnic_group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EthnicGroup")
	}

	var resultSlice []*EthnicGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EthnicGroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ethnic_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ethnic_group")
	}

	if len(ethnicGroupCountryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EthnicGroup = foreign
		if foreign.R == nil {
			foreign.R = &ethnicGroupR{}
		}
		foreign.R.EthnicGroupCountries = append(foreign.R.EthnicGroupCountries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EthnicGroupID == foreign.EthnicGroupID {
				local.R.EthnicGroup = foreign
				if foreign.R == nil {
					foreign.R = &ethnicGroupR{}
				}
				foreign.R.EthnicGroupCountries = append(foreign.R.EthnicGroupCountries, local)
				break
			}
		}
	}

	return nil
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ethnicGroupCountryL) LoadCountry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEthnicGroupCountry interface{}, mods queries.Applicator) error {
	var slice []*EthnicGroupCountry
	var object *EthnicGroupCountry

	if singular {
		object = maybeEthnicGroupCountry.(*EthnicGroupCountry)
	} else {
		slice = *maybeEthnicGroupCountry.(*[]*EthnicGroupCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ethnicGroupCountryR{}
		}
		args = append(args, object.CountryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ethnicGroupCountryR{}
			}

			for _, a := range args {
				if a == obj.CountryID {
					continue Outer
				}
			}

			args = append(args, obj.CountryID)
		}
	}

	query := NewQuery(qm.From(`country`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Country")
	}

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Country")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for country")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for country")
	}

	if len(ethnicGroupCountryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Country = foreign
		if foreign.R == nil {
			foreign.R = &countryR{}
		}
		foreign.R.EthnicGroupCountries = append(foreign.R.EthnicGroupCountries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountryID == foreign.CountryID {
				local.R.Country = foreign
				if foreign.R == nil {
					foreign.R = &countryR{}
				}
				foreign.R.EthnicGroupCountries = append(foreign.R.EthnicGroupCountries, local)
				break
			}
		}
	}

	return nil
}

// SetEthnicGroupG of the ethnicGroupCountry to the related item.
// Sets o.R.EthnicGroup to related.
// Adds o to related.R.EthnicGroupCountries.
// Uses the global database handle.
func (o *EthnicGroupCountry) SetEthnicGroupG(ctx context.Context, insert bool, related *EthnicGroup) error {
	return o.SetEthnicGroup(ctx, boil.GetContextDB(), insert, related)
}

// SetEthnicGroup of the ethnicGroupCountry to the related item.
// Sets o.R.EthnicGroup to related.
// Adds o to related.R.EthnicGroupCountries.
func (o *EthnicGroupCountry) SetEthnicGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *EthnicGroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ethnic_group_country\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ethnic_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, ethnicGroupCountryPrimaryKeyColumns),
	)
	values := []interface{}{related.EthnicGroupID, o.EthnicGroupCountryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EthnicGroupID = related.EthnicGroupID
	if o.R == nil {
		o.R = &ethnicGroupCountryR{
			EthnicGroup: related,
		}
	} else {
		o.R.EthnicGroup = related
	}

	if related.R == nil {
		related.R = &ethnicGroupR{
			EthnicGroupCountries: EthnicGroupCountrySlice{o},
		}
	} else {
		related.R.EthnicGroupCountries = append(related.R.EthnicGroupCountries, o)
	}

	return nil
}

// SetCountryG of the ethnicGroupCountry to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.EthnicGroupCountries.
// Uses the global database handle.
func (o *EthnicGroupCountry) SetCountryG(ctx context.Context, insert bool, related *Country) error {
	return o.SetCountry(ctx, boil.GetContextDB(), insert, related)
}

// SetCountry of the ethnicGroupCountry to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.EthnicGroupCountries.
func (o *EthnicGroupCountry) SetCountry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Country) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ethnic_group_country\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"country_id"}),
		strmangle.WhereClause("\"", "\"", 2, ethnicGroupCountryPrimaryKeyColumns),
	)
	values := []interface{}{related.CountryID, o.EthnicGroupCountryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountryID = related.CountryID
	if o.R == nil {
		o.R = &ethnicGroupCountryR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &countryR{
			EthnicGroupCountries: EthnicGroupCountrySlice{o},
		}
	} else {
		related.R.EthnicGroupCountries = append(related.R.EthnicGroupCountries, o)
	}

	return nil
}

// EthnicGroupCountries retrieves all the records using an executor.
func EthnicGroupCountries(mods ...qm.QueryMod) ethnicGroupCountryQuery {
	mods = append(mods, qm.From("\"ethnic_group_country\""))
	return ethnicGroupCountryQuery{NewQuery(mods...)}
}

// FindEthnicGroupCountryG retrieves a single record by ID.
func FindEthnicGroupCountryG(ctx context.Context, ethnicGroupCountryID int64, selectCols ...string) (*EthnicGroupCountry, error) {
	return FindEthnicGroupCountry(ctx, boil.GetContextDB(), ethnicGroupCountryID, selectCols...)
}

// FindEthnicGroupCountry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEthnicGroupCountry(ctx context.Context, exec boil.ContextExecutor, ethnicGroupCountryID int64, selectCols ...string) (*EthnicGroupCountry, error) {
	ethnicGroupCountryObj := &EthnicGroupCountry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ethnic_group_country\" where \"ethnic_group_country_id\"=$1", sel,
	)

	q := queries.Raw(query, ethnicGroupCountryID)

	err := q.Bind(ctx, exec, ethnicGroupCountryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ethnic_group_country")
	}

	return ethnicGroupCountryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EthnicGroupCountry) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EthnicGroupCountry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ethnic_group_country provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ethnicGroupCountryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ethnicGroupCountryInsertCacheMut.RLock()
	cache, cached := ethnicGroupCountryInsertCache[key]
	ethnicGroupCountryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ethnicGroupCountryColumns,
			ethnicGroupCountryColumnsWithDefault,
			ethnicGroupCountryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ethnicGroupCountryType, ethnicGroupCountryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ethnicGroupCountryType, ethnicGroupCountryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ethnic_group_country\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ethnic_group_country\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ethnic_group_country")
	}

	if !cached {
		ethnicGroupCountryInsertCacheMut.Lock()
		ethnicGroupCountryInsertCache[key] = cache
		ethnicGroupCountryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single EthnicGroupCountry record using the global executor.
// See Update for more documentation.
func (o *EthnicGroupCountry) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the EthnicGroupCountry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EthnicGroupCountry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ethnicGroupCountryUpdateCacheMut.RLock()
	cache, cached := ethnicGroupCountryUpdateCache[key]
	ethnicGroupCountryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ethnicGroupCountryColumns,
			ethnicGroupCountryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ethnic_group_country, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ethnic_group_country\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ethnicGroupCountryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ethnicGroupCountryType, ethnicGroupCountryMapping, append(wl, ethnicGroupCountryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ethnic_group_country row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ethnic_group_country")
	}

	if !cached {
		ethnicGroupCountryUpdateCacheMut.Lock()
		ethnicGroupCountryUpdateCache[key] = cache
		ethnicGroupCountryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ethnicGroupCountryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ethnic_group_country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ethnic_group_country")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EthnicGroupCountrySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EthnicGroupCountrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicGroupCountryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ethnic_group_country\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ethnicGroupCountryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ethnicGroupCountry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ethnicGroupCountry")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EthnicGroupCountry) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EthnicGroupCountry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ethnic_group_country provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ethnicGroupCountryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ethnicGroupCountryUpsertCacheMut.RLock()
	cache, cached := ethnicGroupCountryUpsertCache[key]
	ethnicGroupCountryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ethnicGroupCountryColumns,
			ethnicGroupCountryColumnsWithDefault,
			ethnicGroupCountryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ethnicGroupCountryColumns,
			ethnicGroupCountryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ethnic_group_country, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ethnicGroupCountryPrimaryKeyColumns))
			copy(conflict, ethnicGroupCountryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"ethnic_group_country\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ethnicGroupCountryType, ethnicGroupCountryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ethnicGroupCountryType, ethnicGroupCountryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ethnic_group_country")
	}

	if !cached {
		ethnicGroupCountryUpsertCacheMut.Lock()
		ethnicGroupCountryUpsertCache[key] = cache
		ethnicGroupCountryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single EthnicGroupCountry record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EthnicGroupCountry) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single EthnicGroupCountry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EthnicGroupCountry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EthnicGroupCountry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ethnicGroupCountryPrimaryKeyMapping)
	sql := "DELETE FROM \"ethnic_group_country\" WHERE \"ethnic_group_country_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ethnic_group_country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ethnic_group_country")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ethnicGroupCountryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ethnicGroupCountryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ethnic_group_country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ethnic_group_country")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EthnicGroupCountrySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EthnicGroupCountrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EthnicGroupCountry slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(ethnicGroupCountryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicGroupCountryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ethnic_group_country\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ethnicGroupCountryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ethnicGroupCountry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ethnic_group_country")
	}

	if len(ethnicGroupCountryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EthnicGroupCountry) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no EthnicGroupCountry provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EthnicGroupCountry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEthnicGroupCountry(ctx, exec, o.EthnicGroupCountryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EthnicGroupCountrySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EthnicGroupCountrySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EthnicGroupCountrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EthnicGroupCountrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicGroupCountryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ethnic_group_country\".* FROM \"ethnic_group_country\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ethnicGroupCountryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EthnicGroupCountrySlice")
	}

	*o = slice

	return nil
}

// EthnicGroupCountryExistsG checks if the EthnicGroupCountry row exists.
func EthnicGroupCountryExistsG(ctx context.Context, ethnicGroupCountryID int64) (bool, error) {
	return EthnicGroupCountryExists(ctx, boil.GetContextDB(), ethnicGroupCountryID)
}

// EthnicGroupCountryExists checks if the EthnicGroupCountry row exists.
func EthnicGroupCountryExists(ctx context.Context, exec boil.ContextExecutor, ethnicGroupCountryID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ethnic_group_country\" where \"ethnic_group_country_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ethnicGroupCountryID)
	}

	row := exec.QueryRowContext(ctx, sql, ethnicGroupCountryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ethnic_group_country exists")
	}

	return exists, nil
}
