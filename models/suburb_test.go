// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSuburbs(t *testing.T) {
	t.Parallel()

	query := Suburbs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSuburbsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuburbsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Suburbs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuburbsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SuburbSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuburbsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SuburbExists(ctx, tx, o.SuburbID)
	if err != nil {
		t.Errorf("Unable to check if Suburb exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SuburbExists to return true, but got false.")
	}
}

func testSuburbsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	suburbFound, err := FindSuburb(ctx, tx, o.SuburbID)
	if err != nil {
		t.Error(err)
	}

	if suburbFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSuburbsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Suburbs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSuburbsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Suburbs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSuburbsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	suburbOne := &Suburb{}
	suburbTwo := &Suburb{}
	if err = randomize.Struct(seed, suburbOne, suburbDBTypes, false, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}
	if err = randomize.Struct(seed, suburbTwo, suburbDBTypes, false, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = suburbOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = suburbTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Suburbs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSuburbsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	suburbOne := &Suburb{}
	suburbTwo := &Suburb{}
	if err = randomize.Struct(seed, suburbOne, suburbDBTypes, false, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}
	if err = randomize.Struct(seed, suburbTwo, suburbDBTypes, false, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = suburbOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = suburbTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func suburbBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func suburbAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Suburb) error {
	*o = Suburb{}
	return nil
}

func testSuburbsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Suburb{}
	o := &Suburb{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, suburbDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Suburb object: %s", err)
	}

	AddSuburbHook(boil.BeforeInsertHook, suburbBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	suburbBeforeInsertHooks = []SuburbHook{}

	AddSuburbHook(boil.AfterInsertHook, suburbAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	suburbAfterInsertHooks = []SuburbHook{}

	AddSuburbHook(boil.AfterSelectHook, suburbAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	suburbAfterSelectHooks = []SuburbHook{}

	AddSuburbHook(boil.BeforeUpdateHook, suburbBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	suburbBeforeUpdateHooks = []SuburbHook{}

	AddSuburbHook(boil.AfterUpdateHook, suburbAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	suburbAfterUpdateHooks = []SuburbHook{}

	AddSuburbHook(boil.BeforeDeleteHook, suburbBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	suburbBeforeDeleteHooks = []SuburbHook{}

	AddSuburbHook(boil.AfterDeleteHook, suburbAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	suburbAfterDeleteHooks = []SuburbHook{}

	AddSuburbHook(boil.BeforeUpsertHook, suburbBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	suburbBeforeUpsertHooks = []SuburbHook{}

	AddSuburbHook(boil.AfterUpsertHook, suburbAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	suburbAfterUpsertHooks = []SuburbHook{}
}

func testSuburbsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuburbsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(suburbColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuburbToManyStreets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Suburb
	var b, c Street

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SuburbID = a.SuburbID
	c.SuburbID = a.SuburbID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	street, err := a.Streets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range street {
		if v.SuburbID == b.SuburbID {
			bFound = true
		}
		if v.SuburbID == c.SuburbID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SuburbSlice{&a}
	if err = a.L.LoadStreets(ctx, tx, false, (*[]*Suburb)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Streets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Streets = nil
	if err = a.L.LoadStreets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Streets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", street)
	}
}

func testSuburbToManyAddOpStreets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Suburb
	var b, c, d, e Street

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, suburbDBTypes, false, strmangle.SetComplement(suburbPrimaryKeyColumns, suburbColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Street{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, streetDBTypes, false, strmangle.SetComplement(streetPrimaryKeyColumns, streetColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Street{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStreets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.SuburbID != first.SuburbID {
			t.Error("foreign key was wrong value", a.SuburbID, first.SuburbID)
		}
		if a.SuburbID != second.SuburbID {
			t.Error("foreign key was wrong value", a.SuburbID, second.SuburbID)
		}

		if first.R.Suburb != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Suburb != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Streets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Streets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Streets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSuburbToOneTownUsingTown(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Suburb
	var foreign Town

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, suburbDBTypes, false, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, townDBTypes, false, townColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Town struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TownID = foreign.TownID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Town().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TownID != foreign.TownID {
		t.Errorf("want: %v, got %v", foreign.TownID, check.TownID)
	}

	slice := SuburbSlice{&local}
	if err = local.L.LoadTown(ctx, tx, false, (*[]*Suburb)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Town == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Town = nil
	if err = local.L.LoadTown(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Town == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSuburbToOneSetOpTownUsingTown(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Suburb
	var b, c Town

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, suburbDBTypes, false, strmangle.SetComplement(suburbPrimaryKeyColumns, suburbColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, townDBTypes, false, strmangle.SetComplement(townPrimaryKeyColumns, townColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, townDBTypes, false, strmangle.SetComplement(townPrimaryKeyColumns, townColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Town{&b, &c} {
		err = a.SetTown(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Town != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Suburbs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TownID != x.TownID {
			t.Error("foreign key was wrong value", a.TownID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TownID))
		reflect.Indirect(reflect.ValueOf(&a.TownID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TownID != x.TownID {
			t.Error("foreign key was wrong value", a.TownID, x.TownID)
		}
	}
}

func testSuburbsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSuburbsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SuburbSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSuburbsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Suburbs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	suburbDBTypes = map[string]string{`Latitude`: `decimal`, `Longitude`: `decimal`, `SuburbCode`: `varchar`, `SuburbID`: `int8`, `SuburbName`: `varchar`, `TownID`: `int8`}
	_             = bytes.MinRead
)

func testSuburbsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(suburbPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(suburbColumns) == len(suburbPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSuburbsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(suburbColumns) == len(suburbPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Suburb{}
	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, suburbDBTypes, true, suburbPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(suburbColumns, suburbPrimaryKeyColumns) {
		fields = suburbColumns
	} else {
		fields = strmangle.SetComplement(
			suburbColumns,
			suburbPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SuburbSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSuburbsUpsert(t *testing.T) {
	t.Parallel()

	if len(suburbColumns) == len(suburbPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Suburb{}
	if err = randomize.Struct(seed, &o, suburbDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Suburb: %s", err)
	}

	count, err := Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, suburbDBTypes, false, suburbPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Suburb: %s", err)
	}

	count, err = Suburbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
