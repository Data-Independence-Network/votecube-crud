// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MessagesLink is an object representing the database table.
type MessagesLink struct {
	MessageLinkID int64 `boil:"message_link_id" json:"message_link_id" toml:"message_link_id" yaml:"message_link_id"`
	MessageID     int64 `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	LinkID        int64 `boil:"link_id" json:"link_id" toml:"link_id" yaml:"link_id"`

	R *messagesLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L messagesLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MessagesLinkColumns = struct {
	MessageLinkID string
	MessageID     string
	LinkID        string
}{
	MessageLinkID: "message_link_id",
	MessageID:     "message_id",
	LinkID:        "link_id",
}

// MessagesLinkRels is where relationship names are stored.
var MessagesLinkRels = struct {
	Message string
	Link    string
}{
	Message: "Message",
	Link:    "Link",
}

// messagesLinkR is where relationships are stored.
type messagesLinkR struct {
	Message *Message
	Link    *Link
}

// NewStruct creates a new relationship struct
func (*messagesLinkR) NewStruct() *messagesLinkR {
	return &messagesLinkR{}
}

// messagesLinkL is where Load methods for each relationship are stored.
type messagesLinkL struct{}

var (
	messagesLinkColumns               = []string{"message_link_id", "message_id", "link_id"}
	messagesLinkColumnsWithoutDefault = []string{"message_link_id", "message_id", "link_id"}
	messagesLinkColumnsWithDefault    = []string{}
	messagesLinkPrimaryKeyColumns     = []string{"message_link_id"}
)

type (
	// MessagesLinkSlice is an alias for a slice of pointers to MessagesLink.
	// This should generally be used opposed to []MessagesLink.
	MessagesLinkSlice []*MessagesLink
	// MessagesLinkHook is the signature for custom MessagesLink hook methods
	MessagesLinkHook func(context.Context, boil.ContextExecutor, *MessagesLink) error

	messagesLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	messagesLinkType                 = reflect.TypeOf(&MessagesLink{})
	messagesLinkMapping              = queries.MakeStructMapping(messagesLinkType)
	messagesLinkPrimaryKeyMapping, _ = queries.BindMapping(messagesLinkType, messagesLinkMapping, messagesLinkPrimaryKeyColumns)
	messagesLinkInsertCacheMut       sync.RWMutex
	messagesLinkInsertCache          = make(map[string]insertCache)
	messagesLinkUpdateCacheMut       sync.RWMutex
	messagesLinkUpdateCache          = make(map[string]updateCache)
	messagesLinkUpsertCacheMut       sync.RWMutex
	messagesLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var messagesLinkBeforeInsertHooks []MessagesLinkHook
var messagesLinkBeforeUpdateHooks []MessagesLinkHook
var messagesLinkBeforeDeleteHooks []MessagesLinkHook
var messagesLinkBeforeUpsertHooks []MessagesLinkHook

var messagesLinkAfterInsertHooks []MessagesLinkHook
var messagesLinkAfterSelectHooks []MessagesLinkHook
var messagesLinkAfterUpdateHooks []MessagesLinkHook
var messagesLinkAfterDeleteHooks []MessagesLinkHook
var messagesLinkAfterUpsertHooks []MessagesLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MessagesLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MessagesLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MessagesLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MessagesLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MessagesLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MessagesLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MessagesLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MessagesLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MessagesLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range messagesLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMessagesLinkHook registers your hook function for all future operations.
func AddMessagesLinkHook(hookPoint boil.HookPoint, messagesLinkHook MessagesLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		messagesLinkBeforeInsertHooks = append(messagesLinkBeforeInsertHooks, messagesLinkHook)
	case boil.BeforeUpdateHook:
		messagesLinkBeforeUpdateHooks = append(messagesLinkBeforeUpdateHooks, messagesLinkHook)
	case boil.BeforeDeleteHook:
		messagesLinkBeforeDeleteHooks = append(messagesLinkBeforeDeleteHooks, messagesLinkHook)
	case boil.BeforeUpsertHook:
		messagesLinkBeforeUpsertHooks = append(messagesLinkBeforeUpsertHooks, messagesLinkHook)
	case boil.AfterInsertHook:
		messagesLinkAfterInsertHooks = append(messagesLinkAfterInsertHooks, messagesLinkHook)
	case boil.AfterSelectHook:
		messagesLinkAfterSelectHooks = append(messagesLinkAfterSelectHooks, messagesLinkHook)
	case boil.AfterUpdateHook:
		messagesLinkAfterUpdateHooks = append(messagesLinkAfterUpdateHooks, messagesLinkHook)
	case boil.AfterDeleteHook:
		messagesLinkAfterDeleteHooks = append(messagesLinkAfterDeleteHooks, messagesLinkHook)
	case boil.AfterUpsertHook:
		messagesLinkAfterUpsertHooks = append(messagesLinkAfterUpsertHooks, messagesLinkHook)
	}
}

// OneG returns a single messagesLink record from the query using the global executor.
func (q messagesLinkQuery) OneG(ctx context.Context) (*MessagesLink, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single messagesLink record from the query.
func (q messagesLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MessagesLink, error) {
	o := &MessagesLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for messages_links")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MessagesLink records from the query using the global executor.
func (q messagesLinkQuery) AllG(ctx context.Context) (MessagesLinkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MessagesLink records from the query.
func (q messagesLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (MessagesLinkSlice, error) {
	var o []*MessagesLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MessagesLink slice")
	}

	if len(messagesLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MessagesLink records in the query, and panics on error.
func (q messagesLinkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MessagesLink records in the query.
func (q messagesLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count messages_links rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q messagesLinkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q messagesLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if messages_links exists")
	}

	return count > 0, nil
}

// Message pointed to by the foreign key.
func (o *MessagesLink) Message(mods ...qm.QueryMod) messageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("message_id=?", o.MessageID),
	}

	queryMods = append(queryMods, mods...)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "\"messages\"")

	return query
}

// Link pointed to by the foreign key.
func (o *MessagesLink) Link(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("link_id=?", o.LinkID),
	}

	queryMods = append(queryMods, mods...)

	query := Links(queryMods...)
	queries.SetFrom(query.Query, "\"links\"")

	return query
}

// LoadMessage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messagesLinkL) LoadMessage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMessagesLink interface{}, mods queries.Applicator) error {
	var slice []*MessagesLink
	var object *MessagesLink

	if singular {
		object = maybeMessagesLink.(*MessagesLink)
	} else {
		slice = *maybeMessagesLink.(*[]*MessagesLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messagesLinkR{}
		}
		args = append(args, object.MessageID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messagesLinkR{}
			}

			for _, a := range args {
				if a == obj.MessageID {
					continue Outer
				}
			}

			args = append(args, obj.MessageID)
		}
	}

	query := NewQuery(qm.From(`messages`), qm.WhereIn(`message_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messagesLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Message = foreign
		if foreign.R == nil {
			foreign.R = &messageR{}
		}
		foreign.R.MessagesLinks = append(foreign.R.MessagesLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MessageID == foreign.MessageID {
				local.R.Message = foreign
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.MessagesLinks = append(foreign.R.MessagesLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messagesLinkL) LoadLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMessagesLink interface{}, mods queries.Applicator) error {
	var slice []*MessagesLink
	var object *MessagesLink

	if singular {
		object = maybeMessagesLink.(*MessagesLink)
	} else {
		slice = *maybeMessagesLink.(*[]*MessagesLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messagesLinkR{}
		}
		args = append(args, object.LinkID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messagesLinkR{}
			}

			for _, a := range args {
				if a == obj.LinkID {
					continue Outer
				}
			}

			args = append(args, obj.LinkID)
		}
	}

	query := NewQuery(qm.From(`links`), qm.WhereIn(`link_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(messagesLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Link = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.MessagesLinks = append(foreign.R.MessagesLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinkID == foreign.LinkID {
				local.R.Link = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.MessagesLinks = append(foreign.R.MessagesLinks, local)
				break
			}
		}
	}

	return nil
}

// SetMessageG of the messagesLink to the related item.
// Sets o.R.Message to related.
// Adds o to related.R.MessagesLinks.
// Uses the global database handle.
func (o *MessagesLink) SetMessageG(ctx context.Context, insert bool, related *Message) error {
	return o.SetMessage(ctx, boil.GetContextDB(), insert, related)
}

// SetMessage of the messagesLink to the related item.
// Sets o.R.Message to related.
// Adds o to related.R.MessagesLinks.
func (o *MessagesLink) SetMessage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Message) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"messages_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"message_id"}),
		strmangle.WhereClause("\"", "\"", 2, messagesLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.MessageID, o.MessageLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MessageID = related.MessageID
	if o.R == nil {
		o.R = &messagesLinkR{
			Message: related,
		}
	} else {
		o.R.Message = related
	}

	if related.R == nil {
		related.R = &messageR{
			MessagesLinks: MessagesLinkSlice{o},
		}
	} else {
		related.R.MessagesLinks = append(related.R.MessagesLinks, o)
	}

	return nil
}

// SetLinkG of the messagesLink to the related item.
// Sets o.R.Link to related.
// Adds o to related.R.MessagesLinks.
// Uses the global database handle.
func (o *MessagesLink) SetLinkG(ctx context.Context, insert bool, related *Link) error {
	return o.SetLink(ctx, boil.GetContextDB(), insert, related)
}

// SetLink of the messagesLink to the related item.
// Sets o.R.Link to related.
// Adds o to related.R.MessagesLinks.
func (o *MessagesLink) SetLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"messages_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"link_id"}),
		strmangle.WhereClause("\"", "\"", 2, messagesLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.LinkID, o.MessageLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinkID = related.LinkID
	if o.R == nil {
		o.R = &messagesLinkR{
			Link: related,
		}
	} else {
		o.R.Link = related
	}

	if related.R == nil {
		related.R = &linkR{
			MessagesLinks: MessagesLinkSlice{o},
		}
	} else {
		related.R.MessagesLinks = append(related.R.MessagesLinks, o)
	}

	return nil
}

// MessagesLinks retrieves all the records using an executor.
func MessagesLinks(mods ...qm.QueryMod) messagesLinkQuery {
	mods = append(mods, qm.From("\"messages_links\""))
	return messagesLinkQuery{NewQuery(mods...)}
}

// FindMessagesLinkG retrieves a single record by ID.
func FindMessagesLinkG(ctx context.Context, messageLinkID int64, selectCols ...string) (*MessagesLink, error) {
	return FindMessagesLink(ctx, boil.GetContextDB(), messageLinkID, selectCols...)
}

// FindMessagesLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMessagesLink(ctx context.Context, exec boil.ContextExecutor, messageLinkID int64, selectCols ...string) (*MessagesLink, error) {
	messagesLinkObj := &MessagesLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"messages_links\" where \"message_link_id\"=$1", sel,
	)

	q := queries.Raw(query, messageLinkID)

	err := q.Bind(ctx, exec, messagesLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from messages_links")
	}

	return messagesLinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MessagesLink) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MessagesLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no messages_links provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messagesLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	messagesLinkInsertCacheMut.RLock()
	cache, cached := messagesLinkInsertCache[key]
	messagesLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			messagesLinkColumns,
			messagesLinkColumnsWithDefault,
			messagesLinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(messagesLinkType, messagesLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(messagesLinkType, messagesLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"messages_links\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"messages_links\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into messages_links")
	}

	if !cached {
		messagesLinkInsertCacheMut.Lock()
		messagesLinkInsertCache[key] = cache
		messagesLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MessagesLink record using the global executor.
// See Update for more documentation.
func (o *MessagesLink) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MessagesLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MessagesLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	messagesLinkUpdateCacheMut.RLock()
	cache, cached := messagesLinkUpdateCache[key]
	messagesLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			messagesLinkColumns,
			messagesLinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update messages_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"messages_links\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, messagesLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(messagesLinkType, messagesLinkMapping, append(wl, messagesLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update messages_links row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for messages_links")
	}

	if !cached {
		messagesLinkUpdateCacheMut.Lock()
		messagesLinkUpdateCache[key] = cache
		messagesLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q messagesLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for messages_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for messages_links")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MessagesLinkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MessagesLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messagesLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"messages_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, messagesLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in messagesLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all messagesLink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MessagesLink) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MessagesLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no messages_links provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messagesLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	messagesLinkUpsertCacheMut.RLock()
	cache, cached := messagesLinkUpsertCache[key]
	messagesLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			messagesLinkColumns,
			messagesLinkColumnsWithDefault,
			messagesLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			messagesLinkColumns,
			messagesLinkPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert messages_links, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(messagesLinkPrimaryKeyColumns))
			copy(conflict, messagesLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"messages_links\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(messagesLinkType, messagesLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(messagesLinkType, messagesLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert messages_links")
	}

	if !cached {
		messagesLinkUpsertCacheMut.Lock()
		messagesLinkUpsertCache[key] = cache
		messagesLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MessagesLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MessagesLink) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MessagesLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MessagesLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MessagesLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), messagesLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"messages_links\" WHERE \"message_link_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from messages_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for messages_links")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q messagesLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no messagesLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from messages_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for messages_links")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MessagesLinkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MessagesLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MessagesLink slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(messagesLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messagesLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"messages_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messagesLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from messagesLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for messages_links")
	}

	if len(messagesLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MessagesLink) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MessagesLink provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MessagesLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMessagesLink(ctx, exec, o.MessageLinkID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessagesLinkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MessagesLinkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessagesLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MessagesLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messagesLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"messages_links\".* FROM \"messages_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messagesLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MessagesLinkSlice")
	}

	*o = slice

	return nil
}

// MessagesLinkExistsG checks if the MessagesLink row exists.
func MessagesLinkExistsG(ctx context.Context, messageLinkID int64) (bool, error) {
	return MessagesLinkExists(ctx, boil.GetContextDB(), messageLinkID)
}

// MessagesLinkExists checks if the MessagesLink row exists.
func MessagesLinkExists(ctx context.Context, exec boil.ContextExecutor, messageLinkID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"messages_links\" where \"message_link_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, messageLinkID)
	}

	row := exec.QueryRowContext(ctx, sql, messageLinkID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if messages_links exists")
	}

	return exists, nil
}
