// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserPersonalInfo is an object representing the database table.
type UserPersonalInfo struct {
	UserPersonalInfoID    int64     `boil:"user_personal_info_id" json:"user_personal_info_id" toml:"user_personal_info_id" yaml:"user_personal_info_id"`
	UserAccountID         int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	EmailAddressID        int64     `boil:"email_address_id" json:"email_address_id" toml:"email_address_id" yaml:"email_address_id"`
	PasswordHashkey       string    `boil:"password_hashkey" json:"password_hashkey" toml:"password_hashkey" yaml:"password_hashkey"`
	PasswordSalt          string    `boil:"password_salt" json:"password_salt" toml:"password_salt" yaml:"password_salt"`
	PasswordHashAlgorithm string    `boil:"password_hash_algorithm" json:"password_hash_algorithm" toml:"password_hash_algorithm" yaml:"password_hash_algorithm"`
	PersonTypeID          int64     `boil:"person_type_id" json:"person_type_id" toml:"person_type_id" yaml:"person_type_id"`
	Phone                 string    `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	AddressID             int64     `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userPersonalInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPersonalInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPersonalInfoColumns = struct {
	UserPersonalInfoID    string
	UserAccountID         string
	EmailAddressID        string
	PasswordHashkey       string
	PasswordSalt          string
	PasswordHashAlgorithm string
	PersonTypeID          string
	Phone                 string
	AddressID             string
	UpdatedAt             string
}{
	UserPersonalInfoID:    "user_personal_info_id",
	UserAccountID:         "user_account_id",
	EmailAddressID:        "email_address_id",
	PasswordHashkey:       "password_hashkey",
	PasswordSalt:          "password_salt",
	PasswordHashAlgorithm: "password_hash_algorithm",
	PersonTypeID:          "person_type_id",
	Phone:                 "phone",
	AddressID:             "address_id",
	UpdatedAt:             "updated_at",
}

// UserPersonalInfoRels is where relationship names are stored.
var UserPersonalInfoRels = struct {
	UserAccount                         string
	Address                             string
	PersonType                          string
	UserPersonalInfoHonors              string
	UserPersonalInfoTitles              string
	UserPersonalInfoTitleAfterLastNames string
}{
	UserAccount:                         "UserAccount",
	Address:                             "Address",
	PersonType:                          "PersonType",
	UserPersonalInfoHonors:              "UserPersonalInfoHonors",
	UserPersonalInfoTitles:              "UserPersonalInfoTitles",
	UserPersonalInfoTitleAfterLastNames: "UserPersonalInfoTitleAfterLastNames",
}

// userPersonalInfoR is where relationships are stored.
type userPersonalInfoR struct {
	UserAccount                         *UserAccount
	Address                             *Address
	PersonType                          *PersonType
	UserPersonalInfoHonors              UserPersonalInfoHonorSlice
	UserPersonalInfoTitles              UserPersonalInfoTitleSlice
	UserPersonalInfoTitleAfterLastNames UserPersonalInfoTitleAfterLastNameSlice
}

// NewStruct creates a new relationship struct
func (*userPersonalInfoR) NewStruct() *userPersonalInfoR {
	return &userPersonalInfoR{}
}

// userPersonalInfoL is where Load methods for each relationship are stored.
type userPersonalInfoL struct{}

var (
	userPersonalInfoColumns               = []string{"user_personal_info_id", "user_account_id", "email_address_id", "password_hashkey", "password_salt", "password_hash_algorithm", "person_type_id", "phone", "address_id", "updated_at"}
	userPersonalInfoColumnsWithoutDefault = []string{"user_personal_info_id", "user_account_id", "email_address_id", "password_hashkey", "password_salt", "password_hash_algorithm", "person_type_id", "phone", "address_id", "updated_at"}
	userPersonalInfoColumnsWithDefault    = []string{}
	userPersonalInfoPrimaryKeyColumns     = []string{"user_personal_info_id"}
)

type (
	// UserPersonalInfoSlice is an alias for a slice of pointers to UserPersonalInfo.
	// This should generally be used opposed to []UserPersonalInfo.
	UserPersonalInfoSlice []*UserPersonalInfo
	// UserPersonalInfoHook is the signature for custom UserPersonalInfo hook methods
	UserPersonalInfoHook func(context.Context, boil.ContextExecutor, *UserPersonalInfo) error

	userPersonalInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPersonalInfoType                 = reflect.TypeOf(&UserPersonalInfo{})
	userPersonalInfoMapping              = queries.MakeStructMapping(userPersonalInfoType)
	userPersonalInfoPrimaryKeyMapping, _ = queries.BindMapping(userPersonalInfoType, userPersonalInfoMapping, userPersonalInfoPrimaryKeyColumns)
	userPersonalInfoInsertCacheMut       sync.RWMutex
	userPersonalInfoInsertCache          = make(map[string]insertCache)
	userPersonalInfoUpdateCacheMut       sync.RWMutex
	userPersonalInfoUpdateCache          = make(map[string]updateCache)
	userPersonalInfoUpsertCacheMut       sync.RWMutex
	userPersonalInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userPersonalInfoBeforeInsertHooks []UserPersonalInfoHook
var userPersonalInfoBeforeUpdateHooks []UserPersonalInfoHook
var userPersonalInfoBeforeDeleteHooks []UserPersonalInfoHook
var userPersonalInfoBeforeUpsertHooks []UserPersonalInfoHook

var userPersonalInfoAfterInsertHooks []UserPersonalInfoHook
var userPersonalInfoAfterSelectHooks []UserPersonalInfoHook
var userPersonalInfoAfterUpdateHooks []UserPersonalInfoHook
var userPersonalInfoAfterDeleteHooks []UserPersonalInfoHook
var userPersonalInfoAfterUpsertHooks []UserPersonalInfoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPersonalInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPersonalInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPersonalInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPersonalInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPersonalInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPersonalInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPersonalInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPersonalInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPersonalInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPersonalInfoHook registers your hook function for all future operations.
func AddUserPersonalInfoHook(hookPoint boil.HookPoint, userPersonalInfoHook UserPersonalInfoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userPersonalInfoBeforeInsertHooks = append(userPersonalInfoBeforeInsertHooks, userPersonalInfoHook)
	case boil.BeforeUpdateHook:
		userPersonalInfoBeforeUpdateHooks = append(userPersonalInfoBeforeUpdateHooks, userPersonalInfoHook)
	case boil.BeforeDeleteHook:
		userPersonalInfoBeforeDeleteHooks = append(userPersonalInfoBeforeDeleteHooks, userPersonalInfoHook)
	case boil.BeforeUpsertHook:
		userPersonalInfoBeforeUpsertHooks = append(userPersonalInfoBeforeUpsertHooks, userPersonalInfoHook)
	case boil.AfterInsertHook:
		userPersonalInfoAfterInsertHooks = append(userPersonalInfoAfterInsertHooks, userPersonalInfoHook)
	case boil.AfterSelectHook:
		userPersonalInfoAfterSelectHooks = append(userPersonalInfoAfterSelectHooks, userPersonalInfoHook)
	case boil.AfterUpdateHook:
		userPersonalInfoAfterUpdateHooks = append(userPersonalInfoAfterUpdateHooks, userPersonalInfoHook)
	case boil.AfterDeleteHook:
		userPersonalInfoAfterDeleteHooks = append(userPersonalInfoAfterDeleteHooks, userPersonalInfoHook)
	case boil.AfterUpsertHook:
		userPersonalInfoAfterUpsertHooks = append(userPersonalInfoAfterUpsertHooks, userPersonalInfoHook)
	}
}

// OneG returns a single userPersonalInfo record from the query using the global executor.
func (q userPersonalInfoQuery) OneG(ctx context.Context) (*UserPersonalInfo, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userPersonalInfo record from the query.
func (q userPersonalInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPersonalInfo, error) {
	o := &UserPersonalInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_personal_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserPersonalInfo records from the query using the global executor.
func (q userPersonalInfoQuery) AllG(ctx context.Context) (UserPersonalInfoSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserPersonalInfo records from the query.
func (q userPersonalInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPersonalInfoSlice, error) {
	var o []*UserPersonalInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserPersonalInfo slice")
	}

	if len(userPersonalInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserPersonalInfo records in the query, and panics on error.
func (q userPersonalInfoQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserPersonalInfo records in the query.
func (q userPersonalInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_personal_info rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userPersonalInfoQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userPersonalInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_personal_info exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *UserPersonalInfo) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Address pointed to by the foreign key.
func (o *UserPersonalInfo) Address(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("address_id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(queryMods...)
	queries.SetFrom(query.Query, "\"address\"")

	return query
}

// PersonType pointed to by the foreign key.
func (o *UserPersonalInfo) PersonType(mods ...qm.QueryMod) personTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("person_type_id=?", o.PersonTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := PersonTypes(queryMods...)
	queries.SetFrom(query.Query, "\"person_type\"")

	return query
}

// UserPersonalInfoHonors retrieves all the user_personal_info_honor's UserPersonalInfoHonors with an executor.
func (o *UserPersonalInfo) UserPersonalInfoHonors(mods ...qm.QueryMod) userPersonalInfoHonorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_personal_info_honors\".\"user_personal_info_id\"=?", o.UserPersonalInfoID),
	)

	query := UserPersonalInfoHonors(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info_honors\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_personal_info_honors\".*"})
	}

	return query
}

// UserPersonalInfoTitles retrieves all the user_personal_info_title's UserPersonalInfoTitles with an executor.
func (o *UserPersonalInfo) UserPersonalInfoTitles(mods ...qm.QueryMod) userPersonalInfoTitleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_personal_info_title\".\"user_personal_info_id\"=?", o.UserPersonalInfoID),
	)

	query := UserPersonalInfoTitles(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info_title\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_personal_info_title\".*"})
	}

	return query
}

// UserPersonalInfoTitleAfterLastNames retrieves all the user_personal_info_title_after_last_name's UserPersonalInfoTitleAfterLastNames with an executor.
func (o *UserPersonalInfo) UserPersonalInfoTitleAfterLastNames(mods ...qm.QueryMod) userPersonalInfoTitleAfterLastNameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_personal_info_title_after_last_name\".\"user_personal_info_id\"=?", o.UserPersonalInfoID),
	)

	query := UserPersonalInfoTitleAfterLastNames(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info_title_after_last_name\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_personal_info_title_after_last_name\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfo interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfo
	var object *UserPersonalInfo

	if singular {
		object = maybeUserPersonalInfo.(*UserPersonalInfo)
	} else {
		slice = *maybeUserPersonalInfo.(*[]*UserPersonalInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(userPersonalInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.UserPersonalInfos = append(foreign.R.UserPersonalInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.UserPersonalInfos = append(foreign.R.UserPersonalInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoL) LoadAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfo interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfo
	var object *UserPersonalInfo

	if singular {
		object = maybeUserPersonalInfo.(*UserPersonalInfo)
	} else {
		slice = *maybeUserPersonalInfo.(*[]*UserPersonalInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	query := NewQuery(qm.From(`address`), qm.WhereIn(`address_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for address")
	}

	if len(userPersonalInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Address = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.UserPersonalInfos = append(foreign.R.UserPersonalInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.AddressID {
				local.R.Address = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.UserPersonalInfos = append(foreign.R.UserPersonalInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadPersonType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoL) LoadPersonType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfo interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfo
	var object *UserPersonalInfo

	if singular {
		object = maybeUserPersonalInfo.(*UserPersonalInfo)
	} else {
		slice = *maybeUserPersonalInfo.(*[]*UserPersonalInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoR{}
		}
		args = append(args, object.PersonTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoR{}
			}

			for _, a := range args {
				if a == obj.PersonTypeID {
					continue Outer
				}
			}

			args = append(args, obj.PersonTypeID)
		}
	}

	query := NewQuery(qm.From(`person_type`), qm.WhereIn(`person_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PersonType")
	}

	var resultSlice []*PersonType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PersonType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person_type")
	}

	if len(userPersonalInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PersonType = foreign
		if foreign.R == nil {
			foreign.R = &personTypeR{}
		}
		foreign.R.UserPersonalInfos = append(foreign.R.UserPersonalInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonTypeID == foreign.PersonTypeID {
				local.R.PersonType = foreign
				if foreign.R == nil {
					foreign.R = &personTypeR{}
				}
				foreign.R.UserPersonalInfos = append(foreign.R.UserPersonalInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadUserPersonalInfoHonors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userPersonalInfoL) LoadUserPersonalInfoHonors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfo interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfo
	var object *UserPersonalInfo

	if singular {
		object = maybeUserPersonalInfo.(*UserPersonalInfo)
	} else {
		slice = *maybeUserPersonalInfo.(*[]*UserPersonalInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoR{}
		}
		args = append(args, object.UserPersonalInfoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoR{}
			}

			for _, a := range args {
				if a == obj.UserPersonalInfoID {
					continue Outer
				}
			}

			args = append(args, obj.UserPersonalInfoID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info_honors`), qm.WhereIn(`user_personal_info_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_personal_info_honors")
	}

	var resultSlice []*UserPersonalInfoHonor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_personal_info_honors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_personal_info_honors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info_honors")
	}

	if len(userPersonalInfoHonorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserPersonalInfoHonors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPersonalInfoHonorR{}
			}
			foreign.R.UserPersonalInfo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserPersonalInfoID == foreign.UserPersonalInfoID {
				local.R.UserPersonalInfoHonors = append(local.R.UserPersonalInfoHonors, foreign)
				if foreign.R == nil {
					foreign.R = &userPersonalInfoHonorR{}
				}
				foreign.R.UserPersonalInfo = local
				break
			}
		}
	}

	return nil
}

// LoadUserPersonalInfoTitles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userPersonalInfoL) LoadUserPersonalInfoTitles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfo interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfo
	var object *UserPersonalInfo

	if singular {
		object = maybeUserPersonalInfo.(*UserPersonalInfo)
	} else {
		slice = *maybeUserPersonalInfo.(*[]*UserPersonalInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoR{}
		}
		args = append(args, object.UserPersonalInfoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoR{}
			}

			for _, a := range args {
				if a == obj.UserPersonalInfoID {
					continue Outer
				}
			}

			args = append(args, obj.UserPersonalInfoID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info_title`), qm.WhereIn(`user_personal_info_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_personal_info_title")
	}

	var resultSlice []*UserPersonalInfoTitle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_personal_info_title")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_personal_info_title")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info_title")
	}

	if len(userPersonalInfoTitleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserPersonalInfoTitles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPersonalInfoTitleR{}
			}
			foreign.R.UserPersonalInfo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserPersonalInfoID == foreign.UserPersonalInfoID {
				local.R.UserPersonalInfoTitles = append(local.R.UserPersonalInfoTitles, foreign)
				if foreign.R == nil {
					foreign.R = &userPersonalInfoTitleR{}
				}
				foreign.R.UserPersonalInfo = local
				break
			}
		}
	}

	return nil
}

// LoadUserPersonalInfoTitleAfterLastNames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userPersonalInfoL) LoadUserPersonalInfoTitleAfterLastNames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfo interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfo
	var object *UserPersonalInfo

	if singular {
		object = maybeUserPersonalInfo.(*UserPersonalInfo)
	} else {
		slice = *maybeUserPersonalInfo.(*[]*UserPersonalInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoR{}
		}
		args = append(args, object.UserPersonalInfoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoR{}
			}

			for _, a := range args {
				if a == obj.UserPersonalInfoID {
					continue Outer
				}
			}

			args = append(args, obj.UserPersonalInfoID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info_title_after_last_name`), qm.WhereIn(`user_personal_info_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_personal_info_title_after_last_name")
	}

	var resultSlice []*UserPersonalInfoTitleAfterLastName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_personal_info_title_after_last_name")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_personal_info_title_after_last_name")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info_title_after_last_name")
	}

	if len(userPersonalInfoTitleAfterLastNameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserPersonalInfoTitleAfterLastNames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPersonalInfoTitleAfterLastNameR{}
			}
			foreign.R.UserPersonalInfo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserPersonalInfoID == foreign.UserPersonalInfoID {
				local.R.UserPersonalInfoTitleAfterLastNames = append(local.R.UserPersonalInfoTitleAfterLastNames, foreign)
				if foreign.R == nil {
					foreign.R = &userPersonalInfoTitleAfterLastNameR{}
				}
				foreign.R.UserPersonalInfo = local
				break
			}
		}
	}

	return nil
}

// SetUserAccountG of the userPersonalInfo to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.UserPersonalInfos.
// Uses the global database handle.
func (o *UserPersonalInfo) SetUserAccountG(ctx context.Context, insert bool, related *UserAccount) error {
	return o.SetUserAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetUserAccount of the userPersonalInfo to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.UserPersonalInfos.
func (o *UserPersonalInfo) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.UserPersonalInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &userPersonalInfoR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			UserPersonalInfos: UserPersonalInfoSlice{o},
		}
	} else {
		related.R.UserPersonalInfos = append(related.R.UserPersonalInfos, o)
	}

	return nil
}

// SetAddressG of the userPersonalInfo to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.UserPersonalInfos.
// Uses the global database handle.
func (o *UserPersonalInfo) SetAddressG(ctx context.Context, insert bool, related *Address) error {
	return o.SetAddress(ctx, boil.GetContextDB(), insert, related)
}

// SetAddress of the userPersonalInfo to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.UserPersonalInfos.
func (o *UserPersonalInfo) SetAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"address_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.UserPersonalInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.AddressID
	if o.R == nil {
		o.R = &userPersonalInfoR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			UserPersonalInfos: UserPersonalInfoSlice{o},
		}
	} else {
		related.R.UserPersonalInfos = append(related.R.UserPersonalInfos, o)
	}

	return nil
}

// SetPersonTypeG of the userPersonalInfo to the related item.
// Sets o.R.PersonType to related.
// Adds o to related.R.UserPersonalInfos.
// Uses the global database handle.
func (o *UserPersonalInfo) SetPersonTypeG(ctx context.Context, insert bool, related *PersonType) error {
	return o.SetPersonType(ctx, boil.GetContextDB(), insert, related)
}

// SetPersonType of the userPersonalInfo to the related item.
// Sets o.R.PersonType to related.
// Adds o to related.R.UserPersonalInfos.
func (o *UserPersonalInfo) SetPersonType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PersonType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.PersonTypeID, o.UserPersonalInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonTypeID = related.PersonTypeID
	if o.R == nil {
		o.R = &userPersonalInfoR{
			PersonType: related,
		}
	} else {
		o.R.PersonType = related
	}

	if related.R == nil {
		related.R = &personTypeR{
			UserPersonalInfos: UserPersonalInfoSlice{o},
		}
	} else {
		related.R.UserPersonalInfos = append(related.R.UserPersonalInfos, o)
	}

	return nil
}

// AddUserPersonalInfoHonorsG adds the given related objects to the existing relationships
// of the user_personal_info, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoHonors.
// Sets related.R.UserPersonalInfo appropriately.
// Uses the global database handle.
func (o *UserPersonalInfo) AddUserPersonalInfoHonorsG(ctx context.Context, insert bool, related ...*UserPersonalInfoHonor) error {
	return o.AddUserPersonalInfoHonors(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserPersonalInfoHonors adds the given related objects to the existing relationships
// of the user_personal_info, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoHonors.
// Sets related.R.UserPersonalInfo appropriately.
func (o *UserPersonalInfo) AddUserPersonalInfoHonors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserPersonalInfoHonor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserPersonalInfoID = o.UserPersonalInfoID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_personal_info_honors\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_personal_info_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPersonalInfoHonorPrimaryKeyColumns),
			)
			values := []interface{}{o.UserPersonalInfoID, rel.UserPersonalInfoHonorID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserPersonalInfoID = o.UserPersonalInfoID
		}
	}

	if o.R == nil {
		o.R = &userPersonalInfoR{
			UserPersonalInfoHonors: related,
		}
	} else {
		o.R.UserPersonalInfoHonors = append(o.R.UserPersonalInfoHonors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPersonalInfoHonorR{
				UserPersonalInfo: o,
			}
		} else {
			rel.R.UserPersonalInfo = o
		}
	}
	return nil
}

// AddUserPersonalInfoTitlesG adds the given related objects to the existing relationships
// of the user_personal_info, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoTitles.
// Sets related.R.UserPersonalInfo appropriately.
// Uses the global database handle.
func (o *UserPersonalInfo) AddUserPersonalInfoTitlesG(ctx context.Context, insert bool, related ...*UserPersonalInfoTitle) error {
	return o.AddUserPersonalInfoTitles(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserPersonalInfoTitles adds the given related objects to the existing relationships
// of the user_personal_info, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoTitles.
// Sets related.R.UserPersonalInfo appropriately.
func (o *UserPersonalInfo) AddUserPersonalInfoTitles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserPersonalInfoTitle) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserPersonalInfoID = o.UserPersonalInfoID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_personal_info_title\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_personal_info_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitlePrimaryKeyColumns),
			)
			values := []interface{}{o.UserPersonalInfoID, rel.UserPersonalInfoTitleID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserPersonalInfoID = o.UserPersonalInfoID
		}
	}

	if o.R == nil {
		o.R = &userPersonalInfoR{
			UserPersonalInfoTitles: related,
		}
	} else {
		o.R.UserPersonalInfoTitles = append(o.R.UserPersonalInfoTitles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPersonalInfoTitleR{
				UserPersonalInfo: o,
			}
		} else {
			rel.R.UserPersonalInfo = o
		}
	}
	return nil
}

// AddUserPersonalInfoTitleAfterLastNamesG adds the given related objects to the existing relationships
// of the user_personal_info, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoTitleAfterLastNames.
// Sets related.R.UserPersonalInfo appropriately.
// Uses the global database handle.
func (o *UserPersonalInfo) AddUserPersonalInfoTitleAfterLastNamesG(ctx context.Context, insert bool, related ...*UserPersonalInfoTitleAfterLastName) error {
	return o.AddUserPersonalInfoTitleAfterLastNames(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserPersonalInfoTitleAfterLastNames adds the given related objects to the existing relationships
// of the user_personal_info, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoTitleAfterLastNames.
// Sets related.R.UserPersonalInfo appropriately.
func (o *UserPersonalInfo) AddUserPersonalInfoTitleAfterLastNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserPersonalInfoTitleAfterLastName) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserPersonalInfoID = o.UserPersonalInfoID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_personal_info_title_after_last_name\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_personal_info_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns),
			)
			values := []interface{}{o.UserPersonalInfoID, rel.UserPersonalInfoTitleAfterLastNameID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserPersonalInfoID = o.UserPersonalInfoID
		}
	}

	if o.R == nil {
		o.R = &userPersonalInfoR{
			UserPersonalInfoTitleAfterLastNames: related,
		}
	} else {
		o.R.UserPersonalInfoTitleAfterLastNames = append(o.R.UserPersonalInfoTitleAfterLastNames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPersonalInfoTitleAfterLastNameR{
				UserPersonalInfo: o,
			}
		} else {
			rel.R.UserPersonalInfo = o
		}
	}
	return nil
}

// UserPersonalInfos retrieves all the records using an executor.
func UserPersonalInfos(mods ...qm.QueryMod) userPersonalInfoQuery {
	mods = append(mods, qm.From("\"user_personal_info\""))
	return userPersonalInfoQuery{NewQuery(mods...)}
}

// FindUserPersonalInfoG retrieves a single record by ID.
func FindUserPersonalInfoG(ctx context.Context, userPersonalInfoID int64, selectCols ...string) (*UserPersonalInfo, error) {
	return FindUserPersonalInfo(ctx, boil.GetContextDB(), userPersonalInfoID, selectCols...)
}

// FindUserPersonalInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPersonalInfo(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoID int64, selectCols ...string) (*UserPersonalInfo, error) {
	userPersonalInfoObj := &UserPersonalInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_personal_info\" where \"user_personal_info_id\"=$1", sel,
	)

	q := queries.Raw(query, userPersonalInfoID)

	err := q.Bind(ctx, exec, userPersonalInfoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_personal_info")
	}

	return userPersonalInfoObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserPersonalInfo) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPersonalInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPersonalInfoInsertCacheMut.RLock()
	cache, cached := userPersonalInfoInsertCache[key]
	userPersonalInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPersonalInfoColumns,
			userPersonalInfoColumnsWithDefault,
			userPersonalInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoType, userPersonalInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPersonalInfoType, userPersonalInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_personal_info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_personal_info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_personal_info")
	}

	if !cached {
		userPersonalInfoInsertCacheMut.Lock()
		userPersonalInfoInsertCache[key] = cache
		userPersonalInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserPersonalInfo record using the global executor.
// See Update for more documentation.
func (o *UserPersonalInfo) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserPersonalInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPersonalInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPersonalInfoUpdateCacheMut.RLock()
	cache, cached := userPersonalInfoUpdateCache[key]
	userPersonalInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPersonalInfoColumns,
			userPersonalInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_personal_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_personal_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPersonalInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPersonalInfoType, userPersonalInfoMapping, append(wl, userPersonalInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_personal_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_personal_info")
	}

	if !cached {
		userPersonalInfoUpdateCacheMut.Lock()
		userPersonalInfoUpdateCache[key] = cache
		userPersonalInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPersonalInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_personal_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_personal_info")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserPersonalInfoSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPersonalInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_personal_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPersonalInfoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userPersonalInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userPersonalInfo")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserPersonalInfo) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPersonalInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPersonalInfoUpsertCacheMut.RLock()
	cache, cached := userPersonalInfoUpsertCache[key]
	userPersonalInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userPersonalInfoColumns,
			userPersonalInfoColumnsWithDefault,
			userPersonalInfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userPersonalInfoColumns,
			userPersonalInfoPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_personal_info, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPersonalInfoPrimaryKeyColumns))
			copy(conflict, userPersonalInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"user_personal_info\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoType, userPersonalInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPersonalInfoType, userPersonalInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_personal_info")
	}

	if !cached {
		userPersonalInfoUpsertCacheMut.Lock()
		userPersonalInfoUpsertCache[key] = cache
		userPersonalInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserPersonalInfo record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserPersonalInfo) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UserPersonalInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPersonalInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPersonalInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"user_personal_info\" WHERE \"user_personal_info_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_personal_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_personal_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPersonalInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userPersonalInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_personal_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserPersonalInfoSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPersonalInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfo slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userPersonalInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_personal_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userPersonalInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info")
	}

	if len(userPersonalInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserPersonalInfo) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserPersonalInfo provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPersonalInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPersonalInfo(ctx, exec, o.UserPersonalInfoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPersonalInfoSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserPersonalInfoSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPersonalInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPersonalInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_personal_info\".* FROM \"user_personal_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserPersonalInfoSlice")
	}

	*o = slice

	return nil
}

// UserPersonalInfoExistsG checks if the UserPersonalInfo row exists.
func UserPersonalInfoExistsG(ctx context.Context, userPersonalInfoID int64) (bool, error) {
	return UserPersonalInfoExists(ctx, boil.GetContextDB(), userPersonalInfoID)
}

// UserPersonalInfoExists checks if the UserPersonalInfo row exists.
func UserPersonalInfoExists(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_personal_info\" where \"user_personal_info_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userPersonalInfoID)
	}

	row := exec.QueryRowContext(ctx, sql, userPersonalInfoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_personal_info exists")
	}

	return exists, nil
}
