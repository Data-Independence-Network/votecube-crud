// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DimensionDirection is an object representing the database table.
type DimensionDirection struct {
	DimensionDirectionID int64     `boil:"dimension_direction_id" json:"dimension_direction_id" toml:"dimension_direction_id" yaml:"dimension_direction_id"`
	DimensionID          int64     `boil:"dimension_id" json:"dimension_id" toml:"dimension_id" yaml:"dimension_id"`
	DirectionID          int64     `boil:"direction_id" json:"direction_id" toml:"direction_id" yaml:"direction_id"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *dimensionDirectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dimensionDirectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DimensionDirectionColumns = struct {
	DimensionDirectionID string
	DimensionID          string
	DirectionID          string
	CreatedAt            string
}{
	DimensionDirectionID: "dimension_direction_id",
	DimensionID:          "dimension_id",
	DirectionID:          "direction_id",
	CreatedAt:            "created_at",
}

// DimensionDirectionRels is where relationship names are stored.
var DimensionDirectionRels = struct {
	Direction                 string
	Dimension                 string
	PollsDimensionsDirections string
}{
	Direction:                 "Direction",
	Dimension:                 "Dimension",
	PollsDimensionsDirections: "PollsDimensionsDirections",
}

// dimensionDirectionR is where relationships are stored.
type dimensionDirectionR struct {
	Direction                 *Direction
	Dimension                 *Dimension
	PollsDimensionsDirections PollsDimensionsDirectionSlice
}

// NewStruct creates a new relationship struct
func (*dimensionDirectionR) NewStruct() *dimensionDirectionR {
	return &dimensionDirectionR{}
}

// dimensionDirectionL is where Load methods for each relationship are stored.
type dimensionDirectionL struct{}

var (
	dimensionDirectionColumns               = []string{"dimension_direction_id", "dimension_id", "direction_id", "created_at"}
	dimensionDirectionColumnsWithoutDefault = []string{"dimension_direction_id", "dimension_id", "direction_id", "created_at"}
	dimensionDirectionColumnsWithDefault    = []string{}
	dimensionDirectionPrimaryKeyColumns     = []string{"dimension_direction_id"}
)

type (
	// DimensionDirectionSlice is an alias for a slice of pointers to DimensionDirection.
	// This should generally be used opposed to []DimensionDirection.
	DimensionDirectionSlice []*DimensionDirection
	// DimensionDirectionHook is the signature for custom DimensionDirection hook methods
	DimensionDirectionHook func(context.Context, boil.ContextExecutor, *DimensionDirection) error

	dimensionDirectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dimensionDirectionType                 = reflect.TypeOf(&DimensionDirection{})
	dimensionDirectionMapping              = queries.MakeStructMapping(dimensionDirectionType)
	dimensionDirectionPrimaryKeyMapping, _ = queries.BindMapping(dimensionDirectionType, dimensionDirectionMapping, dimensionDirectionPrimaryKeyColumns)
	dimensionDirectionInsertCacheMut       sync.RWMutex
	dimensionDirectionInsertCache          = make(map[string]insertCache)
	dimensionDirectionUpdateCacheMut       sync.RWMutex
	dimensionDirectionUpdateCache          = make(map[string]updateCache)
	dimensionDirectionUpsertCacheMut       sync.RWMutex
	dimensionDirectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var dimensionDirectionBeforeInsertHooks []DimensionDirectionHook
var dimensionDirectionBeforeUpdateHooks []DimensionDirectionHook
var dimensionDirectionBeforeDeleteHooks []DimensionDirectionHook
var dimensionDirectionBeforeUpsertHooks []DimensionDirectionHook

var dimensionDirectionAfterInsertHooks []DimensionDirectionHook
var dimensionDirectionAfterSelectHooks []DimensionDirectionHook
var dimensionDirectionAfterUpdateHooks []DimensionDirectionHook
var dimensionDirectionAfterDeleteHooks []DimensionDirectionHook
var dimensionDirectionAfterUpsertHooks []DimensionDirectionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DimensionDirection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DimensionDirection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DimensionDirection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DimensionDirection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DimensionDirection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DimensionDirection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DimensionDirection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DimensionDirection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DimensionDirection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionDirectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDimensionDirectionHook registers your hook function for all future operations.
func AddDimensionDirectionHook(hookPoint boil.HookPoint, dimensionDirectionHook DimensionDirectionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dimensionDirectionBeforeInsertHooks = append(dimensionDirectionBeforeInsertHooks, dimensionDirectionHook)
	case boil.BeforeUpdateHook:
		dimensionDirectionBeforeUpdateHooks = append(dimensionDirectionBeforeUpdateHooks, dimensionDirectionHook)
	case boil.BeforeDeleteHook:
		dimensionDirectionBeforeDeleteHooks = append(dimensionDirectionBeforeDeleteHooks, dimensionDirectionHook)
	case boil.BeforeUpsertHook:
		dimensionDirectionBeforeUpsertHooks = append(dimensionDirectionBeforeUpsertHooks, dimensionDirectionHook)
	case boil.AfterInsertHook:
		dimensionDirectionAfterInsertHooks = append(dimensionDirectionAfterInsertHooks, dimensionDirectionHook)
	case boil.AfterSelectHook:
		dimensionDirectionAfterSelectHooks = append(dimensionDirectionAfterSelectHooks, dimensionDirectionHook)
	case boil.AfterUpdateHook:
		dimensionDirectionAfterUpdateHooks = append(dimensionDirectionAfterUpdateHooks, dimensionDirectionHook)
	case boil.AfterDeleteHook:
		dimensionDirectionAfterDeleteHooks = append(dimensionDirectionAfterDeleteHooks, dimensionDirectionHook)
	case boil.AfterUpsertHook:
		dimensionDirectionAfterUpsertHooks = append(dimensionDirectionAfterUpsertHooks, dimensionDirectionHook)
	}
}

// OneG returns a single dimensionDirection record from the query using the global executor.
func (q dimensionDirectionQuery) OneG(ctx context.Context) (*DimensionDirection, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single dimensionDirection record from the query.
func (q dimensionDirectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DimensionDirection, error) {
	o := &DimensionDirection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dimension_directions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DimensionDirection records from the query using the global executor.
func (q dimensionDirectionQuery) AllG(ctx context.Context) (DimensionDirectionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DimensionDirection records from the query.
func (q dimensionDirectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DimensionDirectionSlice, error) {
	var o []*DimensionDirection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DimensionDirection slice")
	}

	if len(dimensionDirectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DimensionDirection records in the query, and panics on error.
func (q dimensionDirectionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DimensionDirection records in the query.
func (q dimensionDirectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dimension_directions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q dimensionDirectionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q dimensionDirectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dimension_directions exists")
	}

	return count > 0, nil
}

// Direction pointed to by the foreign key.
func (o *DimensionDirection) Direction(mods ...qm.QueryMod) directionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("direction_id=?", o.DirectionID),
	}

	queryMods = append(queryMods, mods...)

	query := Directions(queryMods...)
	queries.SetFrom(query.Query, "\"directions\"")

	return query
}

// Dimension pointed to by the foreign key.
func (o *DimensionDirection) Dimension(mods ...qm.QueryMod) dimensionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("dimension_id=?", o.DimensionID),
	}

	queryMods = append(queryMods, mods...)

	query := Dimensions(queryMods...)
	queries.SetFrom(query.Query, "\"dimensions\"")

	return query
}

// PollsDimensionsDirections retrieves all the polls_dimensions_direction's PollsDimensionsDirections with an executor.
func (o *DimensionDirection) PollsDimensionsDirections(mods ...qm.QueryMod) pollsDimensionsDirectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_dimensions_directions\".\"dimension_direction_id\"=?", o.DimensionDirectionID),
	)

	query := PollsDimensionsDirections(queryMods...)
	queries.SetFrom(query.Query, "\"polls_dimensions_directions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_dimensions_directions\".*"})
	}

	return query
}

// LoadDirection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionDirectionL) LoadDirection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimensionDirection interface{}, mods queries.Applicator) error {
	var slice []*DimensionDirection
	var object *DimensionDirection

	if singular {
		object = maybeDimensionDirection.(*DimensionDirection)
	} else {
		slice = *maybeDimensionDirection.(*[]*DimensionDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionDirectionR{}
		}
		args = append(args, object.DirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionDirectionR{}
			}

			for _, a := range args {
				if a == obj.DirectionID {
					continue Outer
				}
			}

			args = append(args, obj.DirectionID)
		}
	}

	query := NewQuery(qm.From(`directions`), qm.WhereIn(`direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Direction")
	}

	var resultSlice []*Direction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Direction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for directions")
	}

	if len(dimensionDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Direction = foreign
		if foreign.R == nil {
			foreign.R = &directionR{}
		}
		foreign.R.DimensionDirections = append(foreign.R.DimensionDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DirectionID == foreign.DirectionID {
				local.R.Direction = foreign
				if foreign.R == nil {
					foreign.R = &directionR{}
				}
				foreign.R.DimensionDirections = append(foreign.R.DimensionDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadDimension allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionDirectionL) LoadDimension(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimensionDirection interface{}, mods queries.Applicator) error {
	var slice []*DimensionDirection
	var object *DimensionDirection

	if singular {
		object = maybeDimensionDirection.(*DimensionDirection)
	} else {
		slice = *maybeDimensionDirection.(*[]*DimensionDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionDirectionR{}
		}
		args = append(args, object.DimensionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionDirectionR{}
			}

			for _, a := range args {
				if a == obj.DimensionID {
					continue Outer
				}
			}

			args = append(args, obj.DimensionID)
		}
	}

	query := NewQuery(qm.From(`dimensions`), qm.WhereIn(`dimension_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dimension")
	}

	var resultSlice []*Dimension
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dimension")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dimensions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimensions")
	}

	if len(dimensionDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dimension = foreign
		if foreign.R == nil {
			foreign.R = &dimensionR{}
		}
		foreign.R.DimensionDirections = append(foreign.R.DimensionDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DimensionID == foreign.DimensionID {
				local.R.Dimension = foreign
				if foreign.R == nil {
					foreign.R = &dimensionR{}
				}
				foreign.R.DimensionDirections = append(foreign.R.DimensionDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadPollsDimensionsDirections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dimensionDirectionL) LoadPollsDimensionsDirections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimensionDirection interface{}, mods queries.Applicator) error {
	var slice []*DimensionDirection
	var object *DimensionDirection

	if singular {
		object = maybeDimensionDirection.(*DimensionDirection)
	} else {
		slice = *maybeDimensionDirection.(*[]*DimensionDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionDirectionR{}
		}
		args = append(args, object.DimensionDirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionDirectionR{}
			}

			for _, a := range args {
				if a == obj.DimensionDirectionID {
					continue Outer
				}
			}

			args = append(args, obj.DimensionDirectionID)
		}
	}

	query := NewQuery(qm.From(`polls_dimensions_directions`), qm.WhereIn(`dimension_direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_dimensions_directions")
	}

	var resultSlice []*PollsDimensionsDirection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_dimensions_directions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_dimensions_directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_dimensions_directions")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsDimensionsDirections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsDimensionsDirectionR{}
			}
			foreign.R.DimensionDirection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DimensionDirectionID == foreign.DimensionDirectionID {
				local.R.PollsDimensionsDirections = append(local.R.PollsDimensionsDirections, foreign)
				if foreign.R == nil {
					foreign.R = &pollsDimensionsDirectionR{}
				}
				foreign.R.DimensionDirection = local
				break
			}
		}
	}

	return nil
}

// SetDirectionG of the dimensionDirection to the related item.
// Sets o.R.Direction to related.
// Adds o to related.R.DimensionDirections.
// Uses the global database handle.
func (o *DimensionDirection) SetDirectionG(ctx context.Context, insert bool, related *Direction) error {
	return o.SetDirection(ctx, boil.GetContextDB(), insert, related)
}

// SetDirection of the dimensionDirection to the related item.
// Sets o.R.Direction to related.
// Adds o to related.R.DimensionDirections.
func (o *DimensionDirection) SetDirection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Direction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimension_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"direction_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.DirectionID, o.DimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DirectionID = related.DirectionID
	if o.R == nil {
		o.R = &dimensionDirectionR{
			Direction: related,
		}
	} else {
		o.R.Direction = related
	}

	if related.R == nil {
		related.R = &directionR{
			DimensionDirections: DimensionDirectionSlice{o},
		}
	} else {
		related.R.DimensionDirections = append(related.R.DimensionDirections, o)
	}

	return nil
}

// SetDimensionG of the dimensionDirection to the related item.
// Sets o.R.Dimension to related.
// Adds o to related.R.DimensionDirections.
// Uses the global database handle.
func (o *DimensionDirection) SetDimensionG(ctx context.Context, insert bool, related *Dimension) error {
	return o.SetDimension(ctx, boil.GetContextDB(), insert, related)
}

// SetDimension of the dimensionDirection to the related item.
// Sets o.R.Dimension to related.
// Adds o to related.R.DimensionDirections.
func (o *DimensionDirection) SetDimension(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dimension) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimension_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dimension_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.DimensionID, o.DimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DimensionID = related.DimensionID
	if o.R == nil {
		o.R = &dimensionDirectionR{
			Dimension: related,
		}
	} else {
		o.R.Dimension = related
	}

	if related.R == nil {
		related.R = &dimensionR{
			DimensionDirections: DimensionDirectionSlice{o},
		}
	} else {
		related.R.DimensionDirections = append(related.R.DimensionDirections, o)
	}

	return nil
}

// AddPollsDimensionsDirectionsG adds the given related objects to the existing relationships
// of the dimension_direction, optionally inserting them as new records.
// Appends related to o.R.PollsDimensionsDirections.
// Sets related.R.DimensionDirection appropriately.
// Uses the global database handle.
func (o *DimensionDirection) AddPollsDimensionsDirectionsG(ctx context.Context, insert bool, related ...*PollsDimensionsDirection) error {
	return o.AddPollsDimensionsDirections(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsDimensionsDirections adds the given related objects to the existing relationships
// of the dimension_direction, optionally inserting them as new records.
// Appends related to o.R.PollsDimensionsDirections.
// Sets related.R.DimensionDirection appropriately.
func (o *DimensionDirection) AddPollsDimensionsDirections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsDimensionsDirection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DimensionDirectionID = o.DimensionDirectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dimension_direction_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
			)
			values := []interface{}{o.DimensionDirectionID, rel.PollDimensionDirectionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DimensionDirectionID = o.DimensionDirectionID
		}
	}

	if o.R == nil {
		o.R = &dimensionDirectionR{
			PollsDimensionsDirections: related,
		}
	} else {
		o.R.PollsDimensionsDirections = append(o.R.PollsDimensionsDirections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsDimensionsDirectionR{
				DimensionDirection: o,
			}
		} else {
			rel.R.DimensionDirection = o
		}
	}
	return nil
}

// DimensionDirections retrieves all the records using an executor.
func DimensionDirections(mods ...qm.QueryMod) dimensionDirectionQuery {
	mods = append(mods, qm.From("\"dimension_directions\""))
	return dimensionDirectionQuery{NewQuery(mods...)}
}

// FindDimensionDirectionG retrieves a single record by ID.
func FindDimensionDirectionG(ctx context.Context, dimensionDirectionID int64, selectCols ...string) (*DimensionDirection, error) {
	return FindDimensionDirection(ctx, boil.GetContextDB(), dimensionDirectionID, selectCols...)
}

// FindDimensionDirection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDimensionDirection(ctx context.Context, exec boil.ContextExecutor, dimensionDirectionID int64, selectCols ...string) (*DimensionDirection, error) {
	dimensionDirectionObj := &DimensionDirection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dimension_directions\" where \"dimension_direction_id\"=$1", sel,
	)

	q := queries.Raw(query, dimensionDirectionID)

	err := q.Bind(ctx, exec, dimensionDirectionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dimension_directions")
	}

	return dimensionDirectionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DimensionDirection) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DimensionDirection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dimension_directions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dimensionDirectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dimensionDirectionInsertCacheMut.RLock()
	cache, cached := dimensionDirectionInsertCache[key]
	dimensionDirectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dimensionDirectionColumns,
			dimensionDirectionColumnsWithDefault,
			dimensionDirectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dimensionDirectionType, dimensionDirectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dimensionDirectionType, dimensionDirectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dimension_directions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dimension_directions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dimension_directions")
	}

	if !cached {
		dimensionDirectionInsertCacheMut.Lock()
		dimensionDirectionInsertCache[key] = cache
		dimensionDirectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DimensionDirection record using the global executor.
// See Update for more documentation.
func (o *DimensionDirection) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DimensionDirection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DimensionDirection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dimensionDirectionUpdateCacheMut.RLock()
	cache, cached := dimensionDirectionUpdateCache[key]
	dimensionDirectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dimensionDirectionColumns,
			dimensionDirectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dimension_directions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dimension_directions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dimensionDirectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dimensionDirectionType, dimensionDirectionMapping, append(wl, dimensionDirectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dimension_directions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dimension_directions")
	}

	if !cached {
		dimensionDirectionUpdateCacheMut.Lock()
		dimensionDirectionUpdateCache[key] = cache
		dimensionDirectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dimensionDirectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dimension_directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dimension_directions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DimensionDirectionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DimensionDirectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionDirectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dimension_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dimensionDirectionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dimensionDirection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dimensionDirection")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DimensionDirection) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DimensionDirection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dimension_directions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dimensionDirectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dimensionDirectionUpsertCacheMut.RLock()
	cache, cached := dimensionDirectionUpsertCache[key]
	dimensionDirectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dimensionDirectionColumns,
			dimensionDirectionColumnsWithDefault,
			dimensionDirectionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dimensionDirectionColumns,
			dimensionDirectionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert dimension_directions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dimensionDirectionPrimaryKeyColumns))
			copy(conflict, dimensionDirectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"dimension_directions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dimensionDirectionType, dimensionDirectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dimensionDirectionType, dimensionDirectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dimension_directions")
	}

	if !cached {
		dimensionDirectionUpsertCacheMut.Lock()
		dimensionDirectionUpsertCache[key] = cache
		dimensionDirectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DimensionDirection record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DimensionDirection) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DimensionDirection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DimensionDirection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DimensionDirection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dimensionDirectionPrimaryKeyMapping)
	sql := "DELETE FROM \"dimension_directions\" WHERE \"dimension_direction_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dimension_directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dimension_directions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dimensionDirectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dimensionDirectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dimension_directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dimension_directions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DimensionDirectionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DimensionDirectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DimensionDirection slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dimensionDirectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionDirectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dimension_directions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dimensionDirectionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dimensionDirection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dimension_directions")
	}

	if len(dimensionDirectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DimensionDirection) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no DimensionDirection provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DimensionDirection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDimensionDirection(ctx, exec, o.DimensionDirectionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DimensionDirectionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DimensionDirectionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DimensionDirectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DimensionDirectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionDirectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dimension_directions\".* FROM \"dimension_directions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dimensionDirectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DimensionDirectionSlice")
	}

	*o = slice

	return nil
}

// DimensionDirectionExistsG checks if the DimensionDirection row exists.
func DimensionDirectionExistsG(ctx context.Context, dimensionDirectionID int64) (bool, error) {
	return DimensionDirectionExists(ctx, boil.GetContextDB(), dimensionDirectionID)
}

// DimensionDirectionExists checks if the DimensionDirection row exists.
func DimensionDirectionExists(ctx context.Context, exec boil.ContextExecutor, dimensionDirectionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dimension_directions\" where \"dimension_direction_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, dimensionDirectionID)
	}

	row := exec.QueryRowContext(ctx, sql, dimensionDirectionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dimension_directions exists")
	}

	return exists, nil
}
