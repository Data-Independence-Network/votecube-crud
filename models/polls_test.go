// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPolls(t *testing.T) {
	t.Parallel()

	query := Polls()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Polls().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollExists(ctx, tx, o.PollID)
	if err != nil {
		t.Errorf("Unable to check if Poll exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollExists to return true, but got false.")
	}
}

func testPollsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollFound, err := FindPoll(ctx, tx, o.PollID)
	if err != nil {
		t.Error(err)
	}

	if pollFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Polls().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Polls().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollOne := &Poll{}
	pollTwo := &Poll{}
	if err = randomize.Struct(seed, pollOne, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}
	if err = randomize.Struct(seed, pollTwo, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Polls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollOne := &Poll{}
	pollTwo := &Poll{}
	if err = randomize.Struct(seed, pollOne, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}
	if err = randomize.Struct(seed, pollTwo, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func pollAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Poll) error {
	*o = Poll{}
	return nil
}

func testPollsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Poll{}
	o := &Poll{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Poll object: %s", err)
	}

	AddPollHook(boil.BeforeInsertHook, pollBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollBeforeInsertHooks = []PollHook{}

	AddPollHook(boil.AfterInsertHook, pollAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollAfterInsertHooks = []PollHook{}

	AddPollHook(boil.AfterSelectHook, pollAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollAfterSelectHooks = []PollHook{}

	AddPollHook(boil.BeforeUpdateHook, pollBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollBeforeUpdateHooks = []PollHook{}

	AddPollHook(boil.AfterUpdateHook, pollAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollAfterUpdateHooks = []PollHook{}

	AddPollHook(boil.BeforeDeleteHook, pollBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollBeforeDeleteHooks = []PollHook{}

	AddPollHook(boil.AfterDeleteHook, pollAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollAfterDeleteHooks = []PollHook{}

	AddPollHook(boil.BeforeUpsertHook, pollBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollBeforeUpsertHooks = []PollHook{}

	AddPollHook(boil.AfterUpsertHook, pollAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollAfterUpsertHooks = []PollHook{}
}

func testPollsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollOneToOnePollUsingParentPollPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Poll
	var local Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.ParentPollID = local.PollID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentPollPoll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ParentPollID != foreign.ParentPollID {
		t.Errorf("want: %v, got %v", foreign.ParentPollID, check.ParentPollID)
	}

	slice := PollSlice{&local}
	if err = local.L.LoadParentPollPoll(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentPollPoll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentPollPoll = nil
	if err = local.L.LoadParentPollPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentPollPoll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollOneToOneSetOpPollUsingParentPollPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetParentPollPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentPollPoll != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.ParentPoll != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.ParentPollID))
		reflect.Indirect(reflect.ValueOf(&x.ParentPollID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID, x.ParentPollID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testPollToManyPollsContinents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsContinent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsContinentDBTypes, false, pollsContinentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsContinentDBTypes, false, pollsContinentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsContinent, err := a.PollsContinents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsContinent {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsContinents(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsContinents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsContinents = nil
	if err = a.L.LoadPollsContinents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsContinents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsContinent)
	}
}

func testPollToManyPollsCountries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsCountry, err := a.PollsCountries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsCountry {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsCountries(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsCountries = nil
	if err = a.L.LoadPollsCountries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsCountry)
	}
}

func testPollToManyPollsCounties(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsCounty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsCounty, err := a.PollsCounties().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsCounty {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsCounties(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCounties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsCounties = nil
	if err = a.L.LoadPollsCounties(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCounties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsCounty)
	}
}

func testPollToManyPollsFactorsPositions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsFactorsPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.ParentPollID
	c.PollID = a.ParentPollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsFactorsPosition, err := a.PollsFactorsPositions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsFactorsPosition {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsFactorsPositions(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsFactorsPositions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsFactorsPositions = nil
	if err = a.L.LoadPollsFactorsPositions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsFactorsPositions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsFactorsPosition)
	}
}

func testPollToManyPollsLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsLabel, err := a.PollsLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsLabel {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsLabels(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsLabels = nil
	if err = a.L.LoadPollsLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsLabel)
	}
}

func testPollToManyPollsLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsLinkDBTypes, false, pollsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsLinkDBTypes, false, pollsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsLink, err := a.PollsLinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsLink {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsLinks(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsLinks = nil
	if err = a.L.LoadPollsLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsLink)
	}
}

func testPollToManyPollsMessages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsMessage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsMessage, err := a.PollsMessages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsMessage {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsMessages(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsMessages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsMessages = nil
	if err = a.L.LoadPollsMessages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsMessages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsMessage)
	}
}

func testPollToManyPollsPollsGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsPollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsPollsGroupDBTypes, false, pollsPollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsPollsGroupDBTypes, false, pollsPollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsPollsGroup, err := a.PollsPollsGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsPollsGroup {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsPollsGroups(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsPollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsPollsGroups = nil
	if err = a.L.LoadPollsPollsGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsPollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsPollsGroup)
	}
}

func testPollToManyPollsStates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsStateDBTypes, false, pollsStateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsStateDBTypes, false, pollsStateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsState, err := a.PollsStates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsState {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsStates(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsStates = nil
	if err = a.L.LoadPollsStates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsState)
	}
}

func testPollToManyPollsTowns(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c PollsTown

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.PollID
	c.PollID = a.PollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsTown, err := a.PollsTowns().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsTown {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadPollsTowns(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsTowns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsTowns = nil
	if err = a.L.LoadPollsTowns(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsTowns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsTown)
	}
}

func testPollToManyVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollID = a.ParentPollID
	c.PollID = a.ParentPollID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.Votes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.PollID == b.PollID {
			bFound = true
		}
		if v.PollID == c.PollID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollSlice{&a}
	if err = a.L.LoadVotes(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Votes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Votes = nil
	if err = a.L.LoadVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Votes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollToManyAddOpPollsContinents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsContinent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsContinent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsContinentDBTypes, false, strmangle.SetComplement(pollsContinentPrimaryKeyColumns, pollsContinentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsContinent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsContinents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsContinents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsContinents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsContinents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsCountries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsCountry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsCountryDBTypes, false, strmangle.SetComplement(pollsCountryPrimaryKeyColumns, pollsCountryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsCountry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsCountries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsCountries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsCountries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsCountries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsCounties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsCounty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsCounty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsCountyDBTypes, false, strmangle.SetComplement(pollsCountyPrimaryKeyColumns, pollsCountyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsCounty{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsCounties(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsCounties[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsCounties[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsCounties().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsFactorsPositions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsFactorsPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsFactorsPosition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsFactorsPosition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsFactorsPositions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ParentPollID != first.PollID {
			t.Error("foreign key was wrong value", a.ParentPollID, first.PollID)
		}
		if a.ParentPollID != second.PollID {
			t.Error("foreign key was wrong value", a.ParentPollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsFactorsPositions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsFactorsPositions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsFactorsPositions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsLabelDBTypes, false, strmangle.SetComplement(pollsLabelPrimaryKeyColumns, pollsLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsLinkDBTypes, false, strmangle.SetComplement(pollsLinkPrimaryKeyColumns, pollsLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsLinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsMessages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsMessage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsMessage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsMessageDBTypes, false, strmangle.SetComplement(pollsMessagePrimaryKeyColumns, pollsMessageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsMessage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsMessages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsMessages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsMessages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsMessages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsPollsGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsPollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsPollsGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsPollsGroupDBTypes, false, strmangle.SetComplement(pollsPollsGroupPrimaryKeyColumns, pollsPollsGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsPollsGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsPollsGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsPollsGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsPollsGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsPollsGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsState{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsStateDBTypes, false, strmangle.SetComplement(pollsStatePrimaryKeyColumns, pollsStateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsState{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsStates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsStates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsStates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsStates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpPollsTowns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e PollsTown

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsTown{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsTownDBTypes, false, strmangle.SetComplement(pollsTownPrimaryKeyColumns, pollsTownColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsTown{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsTowns(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollID != first.PollID {
			t.Error("foreign key was wrong value", a.PollID, first.PollID)
		}
		if a.PollID != second.PollID {
			t.Error("foreign key was wrong value", a.PollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsTowns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsTowns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsTowns().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToManyAddOpVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ParentPollID != first.PollID {
			t.Error("foreign key was wrong value", a.ParentPollID, first.PollID)
		}
		if a.ParentPollID != second.PollID {
			t.Error("foreign key was wrong value", a.ParentPollID, second.PollID)
		}

		if first.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Poll != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Votes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Votes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Votes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Poll
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := PollSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollToOnePollUsingParentPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Poll
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ParentPollID = foreign.PollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentPoll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollID != foreign.PollID {
		t.Errorf("want: %v, got %v", foreign.PollID, check.PollID)
	}

	slice := PollSlice{&local}
	if err = local.L.LoadParentPoll(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentPoll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentPoll = nil
	if err = local.L.LoadParentPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentPoll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollToOneThemeUsingTheme(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Poll
	var foreign Theme

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, themeDBTypes, false, themeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Theme struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ThemeID = foreign.ThemeID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Theme().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ThemeID != foreign.ThemeID {
		t.Errorf("want: %v, got %v", foreign.ThemeID, check.ThemeID)
	}

	slice := PollSlice{&local}
	if err = local.L.LoadTheme(ctx, tx, false, (*[]*Poll)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Theme == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Theme = nil
	if err = local.L.LoadTheme(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Theme == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Polls[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testPollToOneSetOpPollUsingParentPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetParentPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentPoll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentPollPoll != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ParentPollID != x.PollID {
			t.Error("foreign key was wrong value", a.ParentPollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentPollID))
		reflect.Indirect(reflect.ValueOf(&a.ParentPollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ParentPollID != x.PollID {
			t.Error("foreign key was wrong value", a.ParentPollID, x.PollID)
		}
	}
}
func testPollToOneSetOpThemeUsingTheme(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Poll
	var b, c Theme

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, themeDBTypes, false, strmangle.SetComplement(themePrimaryKeyColumns, themeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, themeDBTypes, false, strmangle.SetComplement(themePrimaryKeyColumns, themeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Theme{&b, &c} {
		err = a.SetTheme(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Theme != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Polls[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ThemeID != x.ThemeID {
			t.Error("foreign key was wrong value", a.ThemeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ThemeID))
		reflect.Indirect(reflect.ValueOf(&a.ThemeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ThemeID != x.ThemeID {
			t.Error("foreign key was wrong value", a.ThemeID, x.ThemeID)
		}
	}
}

func testPollsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Polls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `EndDate`: `date`, `ParentPollID`: `int8`, `PollDescription`: `varchar`, `PollID`: `int8`, `PollTitle`: `varchar`, `StartDate`: `date`, `ThemeID`: `int8`, `UserAccountID`: `int8`}
	_           = bytes.MinRead
)

func testPollsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollColumns) == len(pollPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollDBTypes, true, pollPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollColumns) == len(pollPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Poll{}
	if err = randomize.Struct(seed, o, pollDBTypes, true, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollDBTypes, true, pollPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollColumns, pollPrimaryKeyColumns) {
		fields = pollColumns
	} else {
		fields = strmangle.SetComplement(
			pollColumns,
			pollPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsUpsert(t *testing.T) {
	t.Parallel()

	if len(pollColumns) == len(pollPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Poll{}
	if err = randomize.Struct(seed, &o, pollDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Poll: %s", err)
	}

	count, err := Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollDBTypes, false, pollPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Poll: %s", err)
	}

	count, err = Polls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
