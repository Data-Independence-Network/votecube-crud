// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Town is an object representing the database table.
type Town struct {
	TownID   int64  `boil:"town_id" json:"town_id" toml:"town_id" yaml:"town_id"`
	CountyID int64  `boil:"county_id" json:"county_id" toml:"county_id" yaml:"county_id"`
	TownCode string `boil:"town_code" json:"town_code" toml:"town_code" yaml:"town_code"`
	TownName string `boil:"town_name" json:"town_name" toml:"town_name" yaml:"town_name"`

	R *townR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L townL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TownColumns = struct {
	TownID   string
	CountyID string
	TownCode string
	TownName string
}{
	TownID:   "town_id",
	CountyID: "county_id",
	TownCode: "town_code",
	TownName: "town_name",
}

// TownRels is where relationship names are stored.
var TownRels = struct {
	County     string
	PollsTowns string
	Suburbs    string
}{
	County:     "County",
	PollsTowns: "PollsTowns",
	Suburbs:    "Suburbs",
}

// townR is where relationships are stored.
type townR struct {
	County     *County
	PollsTowns PollsTownSlice
	Suburbs    SuburbSlice
}

// NewStruct creates a new relationship struct
func (*townR) NewStruct() *townR {
	return &townR{}
}

// townL is where Load methods for each relationship are stored.
type townL struct{}

var (
	townColumns               = []string{"town_id", "county_id", "town_code", "town_name"}
	townColumnsWithoutDefault = []string{"town_id", "county_id", "town_code", "town_name"}
	townColumnsWithDefault    = []string{}
	townPrimaryKeyColumns     = []string{"town_id"}
)

type (
	// TownSlice is an alias for a slice of pointers to Town.
	// This should generally be used opposed to []Town.
	TownSlice []*Town
	// TownHook is the signature for custom Town hook methods
	TownHook func(context.Context, boil.ContextExecutor, *Town) error

	townQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	townType                 = reflect.TypeOf(&Town{})
	townMapping              = queries.MakeStructMapping(townType)
	townPrimaryKeyMapping, _ = queries.BindMapping(townType, townMapping, townPrimaryKeyColumns)
	townInsertCacheMut       sync.RWMutex
	townInsertCache          = make(map[string]insertCache)
	townUpdateCacheMut       sync.RWMutex
	townUpdateCache          = make(map[string]updateCache)
	townUpsertCacheMut       sync.RWMutex
	townUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var townBeforeInsertHooks []TownHook
var townBeforeUpdateHooks []TownHook
var townBeforeDeleteHooks []TownHook
var townBeforeUpsertHooks []TownHook

var townAfterInsertHooks []TownHook
var townAfterSelectHooks []TownHook
var townAfterUpdateHooks []TownHook
var townAfterDeleteHooks []TownHook
var townAfterUpsertHooks []TownHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Town) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Town) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Town) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Town) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Town) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Town) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Town) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Town) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Town) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range townAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTownHook registers your hook function for all future operations.
func AddTownHook(hookPoint boil.HookPoint, townHook TownHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		townBeforeInsertHooks = append(townBeforeInsertHooks, townHook)
	case boil.BeforeUpdateHook:
		townBeforeUpdateHooks = append(townBeforeUpdateHooks, townHook)
	case boil.BeforeDeleteHook:
		townBeforeDeleteHooks = append(townBeforeDeleteHooks, townHook)
	case boil.BeforeUpsertHook:
		townBeforeUpsertHooks = append(townBeforeUpsertHooks, townHook)
	case boil.AfterInsertHook:
		townAfterInsertHooks = append(townAfterInsertHooks, townHook)
	case boil.AfterSelectHook:
		townAfterSelectHooks = append(townAfterSelectHooks, townHook)
	case boil.AfterUpdateHook:
		townAfterUpdateHooks = append(townAfterUpdateHooks, townHook)
	case boil.AfterDeleteHook:
		townAfterDeleteHooks = append(townAfterDeleteHooks, townHook)
	case boil.AfterUpsertHook:
		townAfterUpsertHooks = append(townAfterUpsertHooks, townHook)
	}
}

// One returns a single town record from the query.
func (q townQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Town, error) {
	o := &Town{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for town")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Town records from the query.
func (q townQuery) All(ctx context.Context, exec boil.ContextExecutor) (TownSlice, error) {
	var o []*Town

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Town slice")
	}

	if len(townAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Town records in the query.
func (q townQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count town rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q townQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if town exists")
	}

	return count > 0, nil
}

// County pointed to by the foreign key.
func (o *Town) County(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("county_id=?", o.CountyID),
	}

	queryMods = append(queryMods, mods...)

	query := Counties(queryMods...)
	queries.SetFrom(query.Query, "\"county\"")

	return query
}

// PollsTowns retrieves all the polls_town's PollsTowns with an executor.
func (o *Town) PollsTowns(mods ...qm.QueryMod) pollsTownQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_town\".\"town_id\"=?", o.TownID),
	)

	query := PollsTowns(queryMods...)
	queries.SetFrom(query.Query, "\"polls_town\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_town\".*"})
	}

	return query
}

// Suburbs retrieves all the suburb's Suburbs with an executor.
func (o *Town) Suburbs(mods ...qm.QueryMod) suburbQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"suburb\".\"town_id\"=?", o.TownID),
	)

	query := Suburbs(queryMods...)
	queries.SetFrom(query.Query, "\"suburb\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"suburb\".*"})
	}

	return query
}

// LoadCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (townL) LoadCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTown interface{}, mods queries.Applicator) error {
	var slice []*Town
	var object *Town

	if singular {
		object = maybeTown.(*Town)
	} else {
		slice = *maybeTown.(*[]*Town)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &townR{}
		}
		args = append(args, object.CountyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &townR{}
			}

			for _, a := range args {
				if a == obj.CountyID {
					continue Outer
				}
			}

			args = append(args, obj.CountyID)
		}
	}

	query := NewQuery(qm.From(`county`), qm.WhereIn(`county_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(townAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.County = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.Towns = append(foreign.R.Towns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountyID == foreign.CountyID {
				local.R.County = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.Towns = append(foreign.R.Towns, local)
				break
			}
		}
	}

	return nil
}

// LoadPollsTowns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (townL) LoadPollsTowns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTown interface{}, mods queries.Applicator) error {
	var slice []*Town
	var object *Town

	if singular {
		object = maybeTown.(*Town)
	} else {
		slice = *maybeTown.(*[]*Town)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &townR{}
		}
		args = append(args, object.TownID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &townR{}
			}

			for _, a := range args {
				if a == obj.TownID {
					continue Outer
				}
			}

			args = append(args, obj.TownID)
		}
	}

	query := NewQuery(qm.From(`polls_town`), qm.WhereIn(`town_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_town")
	}

	var resultSlice []*PollsTown
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_town")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_town")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_town")
	}

	if len(pollsTownAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsTowns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsTownR{}
			}
			foreign.R.Town = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TownID == foreign.TownID {
				local.R.PollsTowns = append(local.R.PollsTowns, foreign)
				if foreign.R == nil {
					foreign.R = &pollsTownR{}
				}
				foreign.R.Town = local
				break
			}
		}
	}

	return nil
}

// LoadSuburbs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (townL) LoadSuburbs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTown interface{}, mods queries.Applicator) error {
	var slice []*Town
	var object *Town

	if singular {
		object = maybeTown.(*Town)
	} else {
		slice = *maybeTown.(*[]*Town)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &townR{}
		}
		args = append(args, object.TownID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &townR{}
			}

			for _, a := range args {
				if a == obj.TownID {
					continue Outer
				}
			}

			args = append(args, obj.TownID)
		}
	}

	query := NewQuery(qm.From(`suburb`), qm.WhereIn(`town_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load suburb")
	}

	var resultSlice []*Suburb
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice suburb")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on suburb")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for suburb")
	}

	if len(suburbAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Suburbs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &suburbR{}
			}
			foreign.R.Town = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TownID == foreign.TownID {
				local.R.Suburbs = append(local.R.Suburbs, foreign)
				if foreign.R == nil {
					foreign.R = &suburbR{}
				}
				foreign.R.Town = local
				break
			}
		}
	}

	return nil
}

// SetCounty of the town to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Towns.
func (o *Town) SetCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"town\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
		strmangle.WhereClause("\"", "\"", 2, townPrimaryKeyColumns),
	)
	values := []interface{}{related.CountyID, o.TownID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountyID = related.CountyID
	if o.R == nil {
		o.R = &townR{
			County: related,
		}
	} else {
		o.R.County = related
	}

	if related.R == nil {
		related.R = &countyR{
			Towns: TownSlice{o},
		}
	} else {
		related.R.Towns = append(related.R.Towns, o)
	}

	return nil
}

// AddPollsTowns adds the given related objects to the existing relationships
// of the town, optionally inserting them as new records.
// Appends related to o.R.PollsTowns.
// Sets related.R.Town appropriately.
func (o *Town) AddPollsTowns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsTown) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TownID = o.TownID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_town\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"town_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsTownPrimaryKeyColumns),
			)
			values := []interface{}{o.TownID, rel.PollTownID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TownID = o.TownID
		}
	}

	if o.R == nil {
		o.R = &townR{
			PollsTowns: related,
		}
	} else {
		o.R.PollsTowns = append(o.R.PollsTowns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsTownR{
				Town: o,
			}
		} else {
			rel.R.Town = o
		}
	}
	return nil
}

// AddSuburbs adds the given related objects to the existing relationships
// of the town, optionally inserting them as new records.
// Appends related to o.R.Suburbs.
// Sets related.R.Town appropriately.
func (o *Town) AddSuburbs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Suburb) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TownID = o.TownID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"suburb\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"town_id"}),
				strmangle.WhereClause("\"", "\"", 2, suburbPrimaryKeyColumns),
			)
			values := []interface{}{o.TownID, rel.SuburbID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TownID = o.TownID
		}
	}

	if o.R == nil {
		o.R = &townR{
			Suburbs: related,
		}
	} else {
		o.R.Suburbs = append(o.R.Suburbs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &suburbR{
				Town: o,
			}
		} else {
			rel.R.Town = o
		}
	}
	return nil
}

// Towns retrieves all the records using an executor.
func Towns(mods ...qm.QueryMod) townQuery {
	mods = append(mods, qm.From("\"town\""))
	return townQuery{NewQuery(mods...)}
}

// FindTown retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTown(ctx context.Context, exec boil.ContextExecutor, townID int64, selectCols ...string) (*Town, error) {
	townObj := &Town{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"town\" where \"town_id\"=$1", sel,
	)

	q := queries.Raw(query, townID)

	err := q.Bind(ctx, exec, townObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from town")
	}

	return townObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Town) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no town provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(townColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	townInsertCacheMut.RLock()
	cache, cached := townInsertCache[key]
	townInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			townColumns,
			townColumnsWithDefault,
			townColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(townType, townMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(townType, townMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"town\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"town\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into town")
	}

	if !cached {
		townInsertCacheMut.Lock()
		townInsertCache[key] = cache
		townInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Town.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Town) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	townUpdateCacheMut.RLock()
	cache, cached := townUpdateCache[key]
	townUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			townColumns,
			townPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update town, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"town\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, townPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(townType, townMapping, append(wl, townPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update town row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for town")
	}

	if !cached {
		townUpdateCacheMut.Lock()
		townUpdateCache[key] = cache
		townUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q townQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for town")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for town")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TownSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), townPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"town\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, townPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in town slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all town")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Town) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no town provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(townColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	townUpsertCacheMut.RLock()
	cache, cached := townUpsertCache[key]
	townUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			townColumns,
			townColumnsWithDefault,
			townColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			townColumns,
			townPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert town, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(townPrimaryKeyColumns))
			copy(conflict, townPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"town\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(townType, townMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(townType, townMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert town")
	}

	if !cached {
		townUpsertCacheMut.Lock()
		townUpsertCache[key] = cache
		townUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Town record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Town) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Town provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), townPrimaryKeyMapping)
	sql := "DELETE FROM \"town\" WHERE \"town_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from town")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for town")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q townQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no townQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from town")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for town")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TownSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Town slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(townBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), townPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"town\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, townPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from town slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for town")
	}

	if len(townAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Town) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTown(ctx, exec, o.TownID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TownSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TownSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), townPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"town\".* FROM \"town\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, townPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TownSlice")
	}

	*o = slice

	return nil
}

// TownExists checks if the Town row exists.
func TownExists(ctx context.Context, exec boil.ContextExecutor, townID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"town\" where \"town_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, townID)
	}

	row := exec.QueryRowContext(ctx, sql, townID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if town exists")
	}

	return exists, nil
}
