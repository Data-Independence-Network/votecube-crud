// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsLabels(t *testing.T) {
	t.Parallel()

	query := PollsLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsLabelExists(ctx, tx, o.PollLabelID)
	if err != nil {
		t.Errorf("Unable to check if PollsLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsLabelExists to return true, but got false.")
	}
}

func testPollsLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsLabelFound, err := FindPollsLabel(ctx, tx, o.PollLabelID)
	if err != nil {
		t.Error(err)
	}

	if pollsLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsLabelOne := &PollsLabel{}
	pollsLabelTwo := &PollsLabel{}
	if err = randomize.Struct(seed, pollsLabelOne, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsLabelTwo, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsLabelOne := &PollsLabel{}
	pollsLabelTwo := &PollsLabel{}
	if err = randomize.Struct(seed, pollsLabelOne, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsLabelTwo, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func pollsLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsLabel) error {
	*o = PollsLabel{}
	return nil
}

func testPollsLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsLabel{}
	o := &PollsLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsLabel object: %s", err)
	}

	AddPollsLabelHook(boil.BeforeInsertHook, pollsLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsLabelBeforeInsertHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.AfterInsertHook, pollsLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsLabelAfterInsertHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.AfterSelectHook, pollsLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsLabelAfterSelectHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.BeforeUpdateHook, pollsLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsLabelBeforeUpdateHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.AfterUpdateHook, pollsLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsLabelAfterUpdateHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.BeforeDeleteHook, pollsLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsLabelBeforeDeleteHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.AfterDeleteHook, pollsLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsLabelAfterDeleteHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.BeforeUpsertHook, pollsLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsLabelBeforeUpsertHooks = []PollsLabelHook{}

	AddPollsLabelHook(boil.AfterUpsertHook, pollsLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsLabelAfterUpsertHooks = []PollsLabelHook{}
}

func testPollsLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsLabelToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsLabel
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := PollsLabelSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*PollsLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsLabelToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsLabel
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.PollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollID != foreign.PollID {
		t.Errorf("want: %v, got %v", foreign.PollID, check.PollID)
	}

	slice := PollsLabelSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsLabelToOneLabelUsingLabel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsLabel
	var foreign Label

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Label struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LabelID = foreign.LabelID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Label().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.LabelID != foreign.LabelID {
		t.Errorf("want: %v, got %v", foreign.LabelID, check.LabelID)
	}

	slice := PollsLabelSlice{&local}
	if err = local.L.LoadLabel(ctx, tx, false, (*[]*PollsLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Label = nil
	if err = local.L.LoadLabel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsLabelToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsLabel
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsLabelDBTypes, false, strmangle.SetComplement(pollsLabelPrimaryKeyColumns, pollsLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testPollsLabelToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsLabel
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsLabelDBTypes, false, strmangle.SetComplement(pollsLabelPrimaryKeyColumns, pollsLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID, x.PollID)
		}
	}
}
func testPollsLabelToOneSetOpLabelUsingLabel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsLabel
	var b, c Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsLabelDBTypes, false, strmangle.SetComplement(pollsLabelPrimaryKeyColumns, pollsLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Label{&b, &c} {
		err = a.SetLabel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Label != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LabelID != x.LabelID {
			t.Error("foreign key was wrong value", a.LabelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LabelID))
		reflect.Indirect(reflect.ValueOf(&a.LabelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LabelID != x.LabelID {
			t.Error("foreign key was wrong value", a.LabelID, x.LabelID)
		}
	}
}

func testPollsLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsLabelDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `LabelID`: `int8`, `PollID`: `int8`, `PollLabelID`: `int8`, `UserAccountID`: `int8`}
	_                 = bytes.MinRead
)

func testPollsLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsLabelColumns) == len(pollsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsLabelColumns) == len(pollsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsLabel{}
	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsLabelDBTypes, true, pollsLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsLabelColumns, pollsLabelPrimaryKeyColumns) {
		fields = pollsLabelColumns
	} else {
		fields = strmangle.SetComplement(
			pollsLabelColumns,
			pollsLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsLabelColumns) == len(pollsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsLabel{}
	if err = randomize.Struct(seed, &o, pollsLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsLabel: %s", err)
	}

	count, err := PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsLabelDBTypes, false, pollsLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsLabel: %s", err)
	}

	count, err = PollsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
