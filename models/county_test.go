// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCounties(t *testing.T) {
	t.Parallel()

	query := Counties()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCountiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCountiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Counties().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCountiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CountySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCountiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CountyExists(ctx, tx, o.CountyID)
	if err != nil {
		t.Errorf("Unable to check if County exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CountyExists to return true, but got false.")
	}
}

func testCountiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	countyFound, err := FindCounty(ctx, tx, o.CountyID)
	if err != nil {
		t.Error(err)
	}

	if countyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCountiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Counties().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCountiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Counties().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCountiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	countyOne := &County{}
	countyTwo := &County{}
	if err = randomize.Struct(seed, countyOne, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}
	if err = randomize.Struct(seed, countyTwo, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = countyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = countyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Counties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCountiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	countyOne := &County{}
	countyTwo := &County{}
	if err = randomize.Struct(seed, countyOne, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}
	if err = randomize.Struct(seed, countyTwo, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = countyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = countyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func countyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func countyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *County) error {
	*o = County{}
	return nil
}

func testCountiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &County{}
	o := &County{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, countyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize County object: %s", err)
	}

	AddCountyHook(boil.BeforeInsertHook, countyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	countyBeforeInsertHooks = []CountyHook{}

	AddCountyHook(boil.AfterInsertHook, countyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	countyAfterInsertHooks = []CountyHook{}

	AddCountyHook(boil.AfterSelectHook, countyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	countyAfterSelectHooks = []CountyHook{}

	AddCountyHook(boil.BeforeUpdateHook, countyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	countyBeforeUpdateHooks = []CountyHook{}

	AddCountyHook(boil.AfterUpdateHook, countyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	countyAfterUpdateHooks = []CountyHook{}

	AddCountyHook(boil.BeforeDeleteHook, countyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	countyBeforeDeleteHooks = []CountyHook{}

	AddCountyHook(boil.AfterDeleteHook, countyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	countyAfterDeleteHooks = []CountyHook{}

	AddCountyHook(boil.BeforeUpsertHook, countyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	countyBeforeUpsertHooks = []CountyHook{}

	AddCountyHook(boil.AfterUpsertHook, countyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	countyAfterUpsertHooks = []CountyHook{}
}

func testCountiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCountiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(countyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCountyToManyPollsCounties(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a County
	var b, c PollsCounty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CountyID = a.CountyID
	c.CountyID = a.CountyID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsCounty, err := a.PollsCounties().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsCounty {
		if v.CountyID == b.CountyID {
			bFound = true
		}
		if v.CountyID == c.CountyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CountySlice{&a}
	if err = a.L.LoadPollsCounties(ctx, tx, false, (*[]*County)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCounties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsCounties = nil
	if err = a.L.LoadPollsCounties(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCounties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsCounty)
	}
}

func testCountyToManyTowns(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a County
	var b, c Town

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, townDBTypes, false, townColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, townDBTypes, false, townColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CountyID = a.CountyID
	c.CountyID = a.CountyID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	town, err := a.Towns().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range town {
		if v.CountyID == b.CountyID {
			bFound = true
		}
		if v.CountyID == c.CountyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CountySlice{&a}
	if err = a.L.LoadTowns(ctx, tx, false, (*[]*County)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Towns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Towns = nil
	if err = a.L.LoadTowns(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Towns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", town)
	}
}

func testCountyToManyAddOpPollsCounties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a County
	var b, c, d, e PollsCounty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countyDBTypes, false, strmangle.SetComplement(countyPrimaryKeyColumns, countyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsCounty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsCountyDBTypes, false, strmangle.SetComplement(pollsCountyPrimaryKeyColumns, pollsCountyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsCounty{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsCounties(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CountyID != first.CountyID {
			t.Error("foreign key was wrong value", a.CountyID, first.CountyID)
		}
		if a.CountyID != second.CountyID {
			t.Error("foreign key was wrong value", a.CountyID, second.CountyID)
		}

		if first.R.County != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.County != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsCounties[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsCounties[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsCounties().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCountyToManyAddOpTowns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a County
	var b, c, d, e Town

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countyDBTypes, false, strmangle.SetComplement(countyPrimaryKeyColumns, countyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Town{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, townDBTypes, false, strmangle.SetComplement(townPrimaryKeyColumns, townColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Town{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTowns(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CountyID != first.CountyID {
			t.Error("foreign key was wrong value", a.CountyID, first.CountyID)
		}
		if a.CountyID != second.CountyID {
			t.Error("foreign key was wrong value", a.CountyID, second.CountyID)
		}

		if first.R.County != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.County != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Towns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Towns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Towns().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCountyToOneStateUsingState(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local County
	var foreign State

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StateID = foreign.StateID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.State().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.StateID != foreign.StateID {
		t.Errorf("want: %v, got %v", foreign.StateID, check.StateID)
	}

	slice := CountySlice{&local}
	if err = local.L.LoadState(ctx, tx, false, (*[]*County)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.State == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.State = nil
	if err = local.L.LoadState(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.State == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCountyToOneSetOpStateUsingState(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a County
	var b, c State

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countyDBTypes, false, strmangle.SetComplement(countyPrimaryKeyColumns, countyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*State{&b, &c} {
		err = a.SetState(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.State != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Counties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StateID != x.StateID {
			t.Error("foreign key was wrong value", a.StateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StateID))
		reflect.Indirect(reflect.ValueOf(&a.StateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StateID != x.StateID {
			t.Error("foreign key was wrong value", a.StateID, x.StateID)
		}
	}
}

func testCountiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCountiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CountySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCountiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Counties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	countyDBTypes = map[string]string{`CountyCode`: `varchar`, `CountyID`: `int8`, `CountyName`: `varchar`, `StateID`: `int8`}
	_             = bytes.MinRead
)

func testCountiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(countyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(countyColumns) == len(countyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, countyDBTypes, true, countyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCountiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(countyColumns) == len(countyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &County{}
	if err = randomize.Struct(seed, o, countyDBTypes, true, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, countyDBTypes, true, countyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(countyColumns, countyPrimaryKeyColumns) {
		fields = countyColumns
	} else {
		fields = strmangle.SetComplement(
			countyColumns,
			countyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CountySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCountiesUpsert(t *testing.T) {
	t.Parallel()

	if len(countyColumns) == len(countyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := County{}
	if err = randomize.Struct(seed, &o, countyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert County: %s", err)
	}

	count, err := Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, countyDBTypes, false, countyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert County: %s", err)
	}

	count, err = Counties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
