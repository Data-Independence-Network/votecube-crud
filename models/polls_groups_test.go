// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsGroups(t *testing.T) {
	t.Parallel()

	query := PollsGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsGroupExists(ctx, tx, o.PollGroupID)
	if err != nil {
		t.Errorf("Unable to check if PollsGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsGroupExists to return true, but got false.")
	}
}

func testPollsGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsGroupFound, err := FindPollsGroup(ctx, tx, o.PollGroupID)
	if err != nil {
		t.Error(err)
	}

	if pollsGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsGroupOne := &PollsGroup{}
	pollsGroupTwo := &PollsGroup{}
	if err = randomize.Struct(seed, pollsGroupOne, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsGroupTwo, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsGroupOne := &PollsGroup{}
	pollsGroupTwo := &PollsGroup{}
	if err = randomize.Struct(seed, pollsGroupOne, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsGroupTwo, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func pollsGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroup) error {
	*o = PollsGroup{}
	return nil
}

func testPollsGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsGroup{}
	o := &PollsGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsGroup object: %s", err)
	}

	AddPollsGroupHook(boil.BeforeInsertHook, pollsGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupBeforeInsertHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.AfterInsertHook, pollsGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupAfterInsertHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.AfterSelectHook, pollsGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsGroupAfterSelectHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.BeforeUpdateHook, pollsGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsGroupBeforeUpdateHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.AfterUpdateHook, pollsGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsGroupAfterUpdateHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.BeforeDeleteHook, pollsGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsGroupBeforeDeleteHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.AfterDeleteHook, pollsGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsGroupAfterDeleteHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.BeforeUpsertHook, pollsGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupBeforeUpsertHooks = []PollsGroupHook{}

	AddPollsGroupHook(boil.AfterUpsertHook, pollsGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupAfterUpsertHooks = []PollsGroupHook{}
}

func testPollsGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsGroupToManyPollGroupPollsPollsGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsGroup
	var b, c PollsPollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsPollsGroupDBTypes, false, pollsPollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsPollsGroupDBTypes, false, pollsPollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PollGroupID = a.PollGroupID
	c.PollGroupID = a.PollGroupID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsPollsGroup, err := a.PollGroupPollsPollsGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsPollsGroup {
		if v.PollGroupID == b.PollGroupID {
			bFound = true
		}
		if v.PollGroupID == c.PollGroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsGroupSlice{&a}
	if err = a.L.LoadPollGroupPollsPollsGroups(ctx, tx, false, (*[]*PollsGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollGroupPollsPollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollGroupPollsPollsGroups = nil
	if err = a.L.LoadPollGroupPollsPollsGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollGroupPollsPollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsPollsGroup)
	}
}

func testPollsGroupToManyAddOpPollGroupPollsPollsGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsGroup
	var b, c, d, e PollsPollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsGroupDBTypes, false, strmangle.SetComplement(pollsGroupPrimaryKeyColumns, pollsGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsPollsGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsPollsGroupDBTypes, false, strmangle.SetComplement(pollsPollsGroupPrimaryKeyColumns, pollsPollsGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsPollsGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollGroupPollsPollsGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollGroupID != first.PollGroupID {
			t.Error("foreign key was wrong value", a.PollGroupID, first.PollGroupID)
		}
		if a.PollGroupID != second.PollGroupID {
			t.Error("foreign key was wrong value", a.PollGroupID, second.PollGroupID)
		}

		if first.R.PollGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PollGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollGroupPollsPollsGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollGroupPollsPollsGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollGroupPollsPollsGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsGroupToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsGroup
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := PollsGroupSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*PollsGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsGroupToOneThemeUsingTheme(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsGroup
	var foreign Theme

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, themeDBTypes, false, themeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Theme struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ThemeID = foreign.ThemeID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Theme().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ThemeID != foreign.ThemeID {
		t.Errorf("want: %v, got %v", foreign.ThemeID, check.ThemeID)
	}

	slice := PollsGroupSlice{&local}
	if err = local.L.LoadTheme(ctx, tx, false, (*[]*PollsGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Theme == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Theme = nil
	if err = local.L.LoadTheme(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Theme == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsGroupToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsGroup
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsGroupDBTypes, false, strmangle.SetComplement(pollsGroupPrimaryKeyColumns, pollsGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsGroups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testPollsGroupToOneSetOpThemeUsingTheme(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsGroup
	var b, c Theme

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsGroupDBTypes, false, strmangle.SetComplement(pollsGroupPrimaryKeyColumns, pollsGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, themeDBTypes, false, strmangle.SetComplement(themePrimaryKeyColumns, themeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, themeDBTypes, false, strmangle.SetComplement(themePrimaryKeyColumns, themeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Theme{&b, &c} {
		err = a.SetTheme(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Theme != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsGroups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ThemeID != x.ThemeID {
			t.Error("foreign key was wrong value", a.ThemeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ThemeID))
		reflect.Indirect(reflect.ValueOf(&a.ThemeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ThemeID != x.ThemeID {
			t.Error("foreign key was wrong value", a.ThemeID, x.ThemeID)
		}
	}
}

func testPollsGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsGroupDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `PollGroupDescription`: `varchar`, `PollGroupID`: `int8`, `PollGroupName`: `varchar`, `ThemeID`: `int8`, `UserAccountID`: `int8`}
	_                 = bytes.MinRead
)

func testPollsGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsGroupColumns) == len(pollsGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsGroupColumns) == len(pollsGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroup{}
	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsGroupDBTypes, true, pollsGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsGroupColumns, pollsGroupPrimaryKeyColumns) {
		fields = pollsGroupColumns
	} else {
		fields = strmangle.SetComplement(
			pollsGroupColumns,
			pollsGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsGroupColumns) == len(pollsGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsGroup{}
	if err = randomize.Struct(seed, &o, pollsGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsGroup: %s", err)
	}

	count, err := PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsGroupDBTypes, false, pollsGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsGroup: %s", err)
	}

	count, err = PollsGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
