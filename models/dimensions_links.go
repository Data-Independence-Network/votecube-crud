// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DimensionsLink is an object representing the database table.
type DimensionsLink struct {
	DimensionsLinkID int64     `boil:"dimensions_link_id" json:"dimensions_link_id" toml:"dimensions_link_id" yaml:"dimensions_link_id"`
	DimensionsID     int64     `boil:"dimensions_id" json:"dimensions_id" toml:"dimensions_id" yaml:"dimensions_id"`
	LinksID          int64     `boil:"links_id" json:"links_id" toml:"links_id" yaml:"links_id"`
	UserAccountID    int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *dimensionsLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dimensionsLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DimensionsLinkColumns = struct {
	DimensionsLinkID string
	DimensionsID     string
	LinksID          string
	UserAccountID    string
	CreatedAt        string
}{
	DimensionsLinkID: "dimensions_link_id",
	DimensionsID:     "dimensions_id",
	LinksID:          "links_id",
	UserAccountID:    "user_account_id",
	CreatedAt:        "created_at",
}

// DimensionsLinkRels is where relationship names are stored.
var DimensionsLinkRels = struct {
	UserAccount string
	Link        string
	Dimension   string
}{
	UserAccount: "UserAccount",
	Link:        "Link",
	Dimension:   "Dimension",
}

// dimensionsLinkR is where relationships are stored.
type dimensionsLinkR struct {
	UserAccount *UserAccount
	Link        *Link
	Dimension   *Dimension
}

// NewStruct creates a new relationship struct
func (*dimensionsLinkR) NewStruct() *dimensionsLinkR {
	return &dimensionsLinkR{}
}

// dimensionsLinkL is where Load methods for each relationship are stored.
type dimensionsLinkL struct{}

var (
	dimensionsLinkColumns               = []string{"dimensions_link_id", "dimensions_id", "links_id", "user_account_id", "created_at"}
	dimensionsLinkColumnsWithoutDefault = []string{"dimensions_link_id", "dimensions_id", "links_id", "user_account_id", "created_at"}
	dimensionsLinkColumnsWithDefault    = []string{}
	dimensionsLinkPrimaryKeyColumns     = []string{"dimensions_link_id"}
)

type (
	// DimensionsLinkSlice is an alias for a slice of pointers to DimensionsLink.
	// This should generally be used opposed to []DimensionsLink.
	DimensionsLinkSlice []*DimensionsLink
	// DimensionsLinkHook is the signature for custom DimensionsLink hook methods
	DimensionsLinkHook func(context.Context, boil.ContextExecutor, *DimensionsLink) error

	dimensionsLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dimensionsLinkType                 = reflect.TypeOf(&DimensionsLink{})
	dimensionsLinkMapping              = queries.MakeStructMapping(dimensionsLinkType)
	dimensionsLinkPrimaryKeyMapping, _ = queries.BindMapping(dimensionsLinkType, dimensionsLinkMapping, dimensionsLinkPrimaryKeyColumns)
	dimensionsLinkInsertCacheMut       sync.RWMutex
	dimensionsLinkInsertCache          = make(map[string]insertCache)
	dimensionsLinkUpdateCacheMut       sync.RWMutex
	dimensionsLinkUpdateCache          = make(map[string]updateCache)
	dimensionsLinkUpsertCacheMut       sync.RWMutex
	dimensionsLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var dimensionsLinkBeforeInsertHooks []DimensionsLinkHook
var dimensionsLinkBeforeUpdateHooks []DimensionsLinkHook
var dimensionsLinkBeforeDeleteHooks []DimensionsLinkHook
var dimensionsLinkBeforeUpsertHooks []DimensionsLinkHook

var dimensionsLinkAfterInsertHooks []DimensionsLinkHook
var dimensionsLinkAfterSelectHooks []DimensionsLinkHook
var dimensionsLinkAfterUpdateHooks []DimensionsLinkHook
var dimensionsLinkAfterDeleteHooks []DimensionsLinkHook
var dimensionsLinkAfterUpsertHooks []DimensionsLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DimensionsLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DimensionsLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DimensionsLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DimensionsLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DimensionsLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DimensionsLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DimensionsLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DimensionsLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DimensionsLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionsLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDimensionsLinkHook registers your hook function for all future operations.
func AddDimensionsLinkHook(hookPoint boil.HookPoint, dimensionsLinkHook DimensionsLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dimensionsLinkBeforeInsertHooks = append(dimensionsLinkBeforeInsertHooks, dimensionsLinkHook)
	case boil.BeforeUpdateHook:
		dimensionsLinkBeforeUpdateHooks = append(dimensionsLinkBeforeUpdateHooks, dimensionsLinkHook)
	case boil.BeforeDeleteHook:
		dimensionsLinkBeforeDeleteHooks = append(dimensionsLinkBeforeDeleteHooks, dimensionsLinkHook)
	case boil.BeforeUpsertHook:
		dimensionsLinkBeforeUpsertHooks = append(dimensionsLinkBeforeUpsertHooks, dimensionsLinkHook)
	case boil.AfterInsertHook:
		dimensionsLinkAfterInsertHooks = append(dimensionsLinkAfterInsertHooks, dimensionsLinkHook)
	case boil.AfterSelectHook:
		dimensionsLinkAfterSelectHooks = append(dimensionsLinkAfterSelectHooks, dimensionsLinkHook)
	case boil.AfterUpdateHook:
		dimensionsLinkAfterUpdateHooks = append(dimensionsLinkAfterUpdateHooks, dimensionsLinkHook)
	case boil.AfterDeleteHook:
		dimensionsLinkAfterDeleteHooks = append(dimensionsLinkAfterDeleteHooks, dimensionsLinkHook)
	case boil.AfterUpsertHook:
		dimensionsLinkAfterUpsertHooks = append(dimensionsLinkAfterUpsertHooks, dimensionsLinkHook)
	}
}

// One returns a single dimensionsLink record from the query.
func (q dimensionsLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DimensionsLink, error) {
	o := &DimensionsLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dimensions_links")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DimensionsLink records from the query.
func (q dimensionsLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (DimensionsLinkSlice, error) {
	var o []*DimensionsLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DimensionsLink slice")
	}

	if len(dimensionsLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DimensionsLink records in the query.
func (q dimensionsLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dimensions_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dimensionsLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dimensions_links exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *DimensionsLink) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Link pointed to by the foreign key.
func (o *DimensionsLink) Link(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("link_id=?", o.LinksID),
	}

	queryMods = append(queryMods, mods...)

	query := Links(queryMods...)
	queries.SetFrom(query.Query, "\"links\"")

	return query
}

// Dimension pointed to by the foreign key.
func (o *DimensionsLink) Dimension(mods ...qm.QueryMod) dimensionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("dimension_id=?", o.DimensionsID),
	}

	queryMods = append(queryMods, mods...)

	query := Dimensions(queryMods...)
	queries.SetFrom(query.Query, "\"dimensions\"")

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionsLinkL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimensionsLink interface{}, mods queries.Applicator) error {
	var slice []*DimensionsLink
	var object *DimensionsLink

	if singular {
		object = maybeDimensionsLink.(*DimensionsLink)
	} else {
		slice = *maybeDimensionsLink.(*[]*DimensionsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionsLinkR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionsLinkR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(dimensionsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.DimensionsLinks = append(foreign.R.DimensionsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.DimensionsLinks = append(foreign.R.DimensionsLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionsLinkL) LoadLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimensionsLink interface{}, mods queries.Applicator) error {
	var slice []*DimensionsLink
	var object *DimensionsLink

	if singular {
		object = maybeDimensionsLink.(*DimensionsLink)
	} else {
		slice = *maybeDimensionsLink.(*[]*DimensionsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionsLinkR{}
		}
		args = append(args, object.LinksID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionsLinkR{}
			}

			for _, a := range args {
				if a == obj.LinksID {
					continue Outer
				}
			}

			args = append(args, obj.LinksID)
		}
	}

	query := NewQuery(qm.From(`links`), qm.WhereIn(`link_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(dimensionsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Link = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.DimensionsLinks = append(foreign.R.DimensionsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinksID == foreign.LinkID {
				local.R.Link = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.DimensionsLinks = append(foreign.R.DimensionsLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadDimension allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionsLinkL) LoadDimension(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimensionsLink interface{}, mods queries.Applicator) error {
	var slice []*DimensionsLink
	var object *DimensionsLink

	if singular {
		object = maybeDimensionsLink.(*DimensionsLink)
	} else {
		slice = *maybeDimensionsLink.(*[]*DimensionsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionsLinkR{}
		}
		args = append(args, object.DimensionsID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionsLinkR{}
			}

			for _, a := range args {
				if a == obj.DimensionsID {
					continue Outer
				}
			}

			args = append(args, obj.DimensionsID)
		}
	}

	query := NewQuery(qm.From(`dimensions`), qm.WhereIn(`dimension_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dimension")
	}

	var resultSlice []*Dimension
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dimension")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dimensions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimensions")
	}

	if len(dimensionsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dimension = foreign
		if foreign.R == nil {
			foreign.R = &dimensionR{}
		}
		foreign.R.DimensionsLinks = append(foreign.R.DimensionsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DimensionsID == foreign.DimensionID {
				local.R.Dimension = foreign
				if foreign.R == nil {
					foreign.R = &dimensionR{}
				}
				foreign.R.DimensionsLinks = append(foreign.R.DimensionsLinks, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the dimensionsLink to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.DimensionsLinks.
func (o *DimensionsLink) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimensions_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.DimensionsLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &dimensionsLinkR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			DimensionsLinks: DimensionsLinkSlice{o},
		}
	} else {
		related.R.DimensionsLinks = append(related.R.DimensionsLinks, o)
	}

	return nil
}

// SetLink of the dimensionsLink to the related item.
// Sets o.R.Link to related.
// Adds o to related.R.DimensionsLinks.
func (o *DimensionsLink) SetLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimensions_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"links_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.LinkID, o.DimensionsLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinksID = related.LinkID
	if o.R == nil {
		o.R = &dimensionsLinkR{
			Link: related,
		}
	} else {
		o.R.Link = related
	}

	if related.R == nil {
		related.R = &linkR{
			DimensionsLinks: DimensionsLinkSlice{o},
		}
	} else {
		related.R.DimensionsLinks = append(related.R.DimensionsLinks, o)
	}

	return nil
}

// SetDimension of the dimensionsLink to the related item.
// Sets o.R.Dimension to related.
// Adds o to related.R.DimensionsLinks.
func (o *DimensionsLink) SetDimension(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dimension) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimensions_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dimensions_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.DimensionID, o.DimensionsLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DimensionsID = related.DimensionID
	if o.R == nil {
		o.R = &dimensionsLinkR{
			Dimension: related,
		}
	} else {
		o.R.Dimension = related
	}

	if related.R == nil {
		related.R = &dimensionR{
			DimensionsLinks: DimensionsLinkSlice{o},
		}
	} else {
		related.R.DimensionsLinks = append(related.R.DimensionsLinks, o)
	}

	return nil
}

// DimensionsLinks retrieves all the records using an executor.
func DimensionsLinks(mods ...qm.QueryMod) dimensionsLinkQuery {
	mods = append(mods, qm.From("\"dimensions_links\""))
	return dimensionsLinkQuery{NewQuery(mods...)}
}

// FindDimensionsLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDimensionsLink(ctx context.Context, exec boil.ContextExecutor, dimensionsLinkID int64, selectCols ...string) (*DimensionsLink, error) {
	dimensionsLinkObj := &DimensionsLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dimensions_links\" where \"dimensions_link_id\"=$1", sel,
	)

	q := queries.Raw(query, dimensionsLinkID)

	err := q.Bind(ctx, exec, dimensionsLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dimensions_links")
	}

	return dimensionsLinkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DimensionsLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dimensions_links provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dimensionsLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dimensionsLinkInsertCacheMut.RLock()
	cache, cached := dimensionsLinkInsertCache[key]
	dimensionsLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dimensionsLinkColumns,
			dimensionsLinkColumnsWithDefault,
			dimensionsLinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dimensionsLinkType, dimensionsLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dimensionsLinkType, dimensionsLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dimensions_links\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dimensions_links\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dimensions_links")
	}

	if !cached {
		dimensionsLinkInsertCacheMut.Lock()
		dimensionsLinkInsertCache[key] = cache
		dimensionsLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DimensionsLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DimensionsLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dimensionsLinkUpdateCacheMut.RLock()
	cache, cached := dimensionsLinkUpdateCache[key]
	dimensionsLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dimensionsLinkColumns,
			dimensionsLinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dimensions_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dimensions_links\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dimensionsLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dimensionsLinkType, dimensionsLinkMapping, append(wl, dimensionsLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dimensions_links row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dimensions_links")
	}

	if !cached {
		dimensionsLinkUpdateCacheMut.Lock()
		dimensionsLinkUpdateCache[key] = cache
		dimensionsLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dimensionsLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dimensions_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dimensions_links")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DimensionsLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dimensions_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dimensionsLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dimensionsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dimensionsLink")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DimensionsLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dimensions_links provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dimensionsLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dimensionsLinkUpsertCacheMut.RLock()
	cache, cached := dimensionsLinkUpsertCache[key]
	dimensionsLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dimensionsLinkColumns,
			dimensionsLinkColumnsWithDefault,
			dimensionsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dimensionsLinkColumns,
			dimensionsLinkPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert dimensions_links, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dimensionsLinkPrimaryKeyColumns))
			copy(conflict, dimensionsLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"dimensions_links\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dimensionsLinkType, dimensionsLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dimensionsLinkType, dimensionsLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dimensions_links")
	}

	if !cached {
		dimensionsLinkUpsertCacheMut.Lock()
		dimensionsLinkUpsertCache[key] = cache
		dimensionsLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DimensionsLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DimensionsLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DimensionsLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dimensionsLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"dimensions_links\" WHERE \"dimensions_link_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dimensions_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dimensions_links")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dimensionsLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dimensionsLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dimensions_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dimensions_links")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DimensionsLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DimensionsLink slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dimensionsLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dimensions_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dimensionsLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dimensionsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dimensions_links")
	}

	if len(dimensionsLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DimensionsLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDimensionsLink(ctx, exec, o.DimensionsLinkID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DimensionsLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DimensionsLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dimensions_links\".* FROM \"dimensions_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dimensionsLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DimensionsLinkSlice")
	}

	*o = slice

	return nil
}

// DimensionsLinkExists checks if the DimensionsLink row exists.
func DimensionsLinkExists(ctx context.Context, exec boil.ContextExecutor, dimensionsLinkID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dimensions_links\" where \"dimensions_link_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, dimensionsLinkID)
	}

	row := exec.QueryRowContext(ctx, sql, dimensionsLinkID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dimensions_links exists")
	}

	return exists, nil
}
