// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Theme is an object representing the database table.
type Theme struct {
	ThemeID     int64     `boil:"theme_id" json:"theme_id" toml:"theme_id" yaml:"theme_id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *themeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L themeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ThemeColumns = struct {
	ThemeID     string
	Name        string
	Description string
	CreatedAt   string
}{
	ThemeID:     "theme_id",
	Name:        "name",
	Description: "description",
	CreatedAt:   "created_at",
}

// ThemeRels is where relationship names are stored.
var ThemeRels = struct {
	Polls       string
	PollsGroups string
}{
	Polls:       "Polls",
	PollsGroups: "PollsGroups",
}

// themeR is where relationships are stored.
type themeR struct {
	Polls       PollSlice
	PollsGroups PollsGroupSlice
}

// NewStruct creates a new relationship struct
func (*themeR) NewStruct() *themeR {
	return &themeR{}
}

// themeL is where Load methods for each relationship are stored.
type themeL struct{}

var (
	themeColumns               = []string{"theme_id", "name", "description", "created_at"}
	themeColumnsWithoutDefault = []string{"theme_id", "name", "description", "created_at"}
	themeColumnsWithDefault    = []string{}
	themePrimaryKeyColumns     = []string{"theme_id"}
)

type (
	// ThemeSlice is an alias for a slice of pointers to Theme.
	// This should generally be used opposed to []Theme.
	ThemeSlice []*Theme
	// ThemeHook is the signature for custom Theme hook methods
	ThemeHook func(context.Context, boil.ContextExecutor, *Theme) error

	themeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	themeType                 = reflect.TypeOf(&Theme{})
	themeMapping              = queries.MakeStructMapping(themeType)
	themePrimaryKeyMapping, _ = queries.BindMapping(themeType, themeMapping, themePrimaryKeyColumns)
	themeInsertCacheMut       sync.RWMutex
	themeInsertCache          = make(map[string]insertCache)
	themeUpdateCacheMut       sync.RWMutex
	themeUpdateCache          = make(map[string]updateCache)
	themeUpsertCacheMut       sync.RWMutex
	themeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var themeBeforeInsertHooks []ThemeHook
var themeBeforeUpdateHooks []ThemeHook
var themeBeforeDeleteHooks []ThemeHook
var themeBeforeUpsertHooks []ThemeHook

var themeAfterInsertHooks []ThemeHook
var themeAfterSelectHooks []ThemeHook
var themeAfterUpdateHooks []ThemeHook
var themeAfterDeleteHooks []ThemeHook
var themeAfterUpsertHooks []ThemeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Theme) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Theme) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Theme) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Theme) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Theme) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Theme) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Theme) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Theme) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Theme) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range themeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddThemeHook registers your hook function for all future operations.
func AddThemeHook(hookPoint boil.HookPoint, themeHook ThemeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		themeBeforeInsertHooks = append(themeBeforeInsertHooks, themeHook)
	case boil.BeforeUpdateHook:
		themeBeforeUpdateHooks = append(themeBeforeUpdateHooks, themeHook)
	case boil.BeforeDeleteHook:
		themeBeforeDeleteHooks = append(themeBeforeDeleteHooks, themeHook)
	case boil.BeforeUpsertHook:
		themeBeforeUpsertHooks = append(themeBeforeUpsertHooks, themeHook)
	case boil.AfterInsertHook:
		themeAfterInsertHooks = append(themeAfterInsertHooks, themeHook)
	case boil.AfterSelectHook:
		themeAfterSelectHooks = append(themeAfterSelectHooks, themeHook)
	case boil.AfterUpdateHook:
		themeAfterUpdateHooks = append(themeAfterUpdateHooks, themeHook)
	case boil.AfterDeleteHook:
		themeAfterDeleteHooks = append(themeAfterDeleteHooks, themeHook)
	case boil.AfterUpsertHook:
		themeAfterUpsertHooks = append(themeAfterUpsertHooks, themeHook)
	}
}

// OneG returns a single theme record from the query using the global executor.
func (q themeQuery) OneG(ctx context.Context) (*Theme, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single theme record from the query.
func (q themeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Theme, error) {
	o := &Theme{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for themes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Theme records from the query using the global executor.
func (q themeQuery) AllG(ctx context.Context) (ThemeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Theme records from the query.
func (q themeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ThemeSlice, error) {
	var o []*Theme

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Theme slice")
	}

	if len(themeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Theme records in the query, and panics on error.
func (q themeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Theme records in the query.
func (q themeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count themes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q themeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q themeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if themes exists")
	}

	return count > 0, nil
}

// Polls retrieves all the poll's Polls with an executor.
func (o *Theme) Polls(mods ...qm.QueryMod) pollQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls\".\"theme_id\"=?", o.ThemeID),
	)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls\".*"})
	}

	return query
}

// PollsGroups retrieves all the polls_group's PollsGroups with an executor.
func (o *Theme) PollsGroups(mods ...qm.QueryMod) pollsGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_groups\".\"theme_id\"=?", o.ThemeID),
	)

	query := PollsGroups(queryMods...)
	queries.SetFrom(query.Query, "\"polls_groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_groups\".*"})
	}

	return query
}

// LoadPolls allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (themeL) LoadPolls(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTheme interface{}, mods queries.Applicator) error {
	var slice []*Theme
	var object *Theme

	if singular {
		object = maybeTheme.(*Theme)
	} else {
		slice = *maybeTheme.(*[]*Theme)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &themeR{}
		}
		args = append(args, object.ThemeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &themeR{}
			}

			for _, a := range args {
				if a == obj.ThemeID {
					continue Outer
				}
			}

			args = append(args, obj.ThemeID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`theme_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Polls = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollR{}
			}
			foreign.R.Theme = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ThemeID == foreign.ThemeID {
				local.R.Polls = append(local.R.Polls, foreign)
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.Theme = local
				break
			}
		}
	}

	return nil
}

// LoadPollsGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (themeL) LoadPollsGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTheme interface{}, mods queries.Applicator) error {
	var slice []*Theme
	var object *Theme

	if singular {
		object = maybeTheme.(*Theme)
	} else {
		slice = *maybeTheme.(*[]*Theme)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &themeR{}
		}
		args = append(args, object.ThemeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &themeR{}
			}

			for _, a := range args {
				if a == obj.ThemeID {
					continue Outer
				}
			}

			args = append(args, obj.ThemeID)
		}
	}

	query := NewQuery(qm.From(`polls_groups`), qm.WhereIn(`theme_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_groups")
	}

	var resultSlice []*PollsGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_groups")
	}

	if len(pollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsGroupR{}
			}
			foreign.R.Theme = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ThemeID == foreign.ThemeID {
				local.R.PollsGroups = append(local.R.PollsGroups, foreign)
				if foreign.R == nil {
					foreign.R = &pollsGroupR{}
				}
				foreign.R.Theme = local
				break
			}
		}
	}

	return nil
}

// AddPollsG adds the given related objects to the existing relationships
// of the theme, optionally inserting them as new records.
// Appends related to o.R.Polls.
// Sets related.R.Theme appropriately.
// Uses the global database handle.
func (o *Theme) AddPollsG(ctx context.Context, insert bool, related ...*Poll) error {
	return o.AddPolls(ctx, boil.GetContextDB(), insert, related...)
}

// AddPolls adds the given related objects to the existing relationships
// of the theme, optionally inserting them as new records.
// Appends related to o.R.Polls.
// Sets related.R.Theme appropriately.
func (o *Theme) AddPolls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Poll) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ThemeID = o.ThemeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"theme_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollPrimaryKeyColumns),
			)
			values := []interface{}{o.ThemeID, rel.PollID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ThemeID = o.ThemeID
		}
	}

	if o.R == nil {
		o.R = &themeR{
			Polls: related,
		}
	} else {
		o.R.Polls = append(o.R.Polls, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollR{
				Theme: o,
			}
		} else {
			rel.R.Theme = o
		}
	}
	return nil
}

// AddPollsGroupsG adds the given related objects to the existing relationships
// of the theme, optionally inserting them as new records.
// Appends related to o.R.PollsGroups.
// Sets related.R.Theme appropriately.
// Uses the global database handle.
func (o *Theme) AddPollsGroupsG(ctx context.Context, insert bool, related ...*PollsGroup) error {
	return o.AddPollsGroups(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsGroups adds the given related objects to the existing relationships
// of the theme, optionally inserting them as new records.
// Appends related to o.R.PollsGroups.
// Sets related.R.Theme appropriately.
func (o *Theme) AddPollsGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ThemeID = o.ThemeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"theme_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ThemeID, rel.PollGroupID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ThemeID = o.ThemeID
		}
	}

	if o.R == nil {
		o.R = &themeR{
			PollsGroups: related,
		}
	} else {
		o.R.PollsGroups = append(o.R.PollsGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsGroupR{
				Theme: o,
			}
		} else {
			rel.R.Theme = o
		}
	}
	return nil
}

// Themes retrieves all the records using an executor.
func Themes(mods ...qm.QueryMod) themeQuery {
	mods = append(mods, qm.From("\"themes\""))
	return themeQuery{NewQuery(mods...)}
}

// FindThemeG retrieves a single record by ID.
func FindThemeG(ctx context.Context, themeID int64, selectCols ...string) (*Theme, error) {
	return FindTheme(ctx, boil.GetContextDB(), themeID, selectCols...)
}

// FindTheme retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTheme(ctx context.Context, exec boil.ContextExecutor, themeID int64, selectCols ...string) (*Theme, error) {
	themeObj := &Theme{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"themes\" where \"theme_id\"=$1", sel,
	)

	q := queries.Raw(query, themeID)

	err := q.Bind(ctx, exec, themeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from themes")
	}

	return themeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Theme) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Theme) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no themes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(themeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	themeInsertCacheMut.RLock()
	cache, cached := themeInsertCache[key]
	themeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			themeColumns,
			themeColumnsWithDefault,
			themeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(themeType, themeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(themeType, themeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"themes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"themes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into themes")
	}

	if !cached {
		themeInsertCacheMut.Lock()
		themeInsertCache[key] = cache
		themeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Theme record using the global executor.
// See Update for more documentation.
func (o *Theme) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Theme.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Theme) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	themeUpdateCacheMut.RLock()
	cache, cached := themeUpdateCache[key]
	themeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			themeColumns,
			themePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update themes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"themes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, themePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(themeType, themeMapping, append(wl, themePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update themes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for themes")
	}

	if !cached {
		themeUpdateCacheMut.Lock()
		themeUpdateCache[key] = cache
		themeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q themeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for themes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for themes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ThemeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ThemeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), themePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"themes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, themePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in theme slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all theme")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Theme) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Theme) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no themes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(themeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	themeUpsertCacheMut.RLock()
	cache, cached := themeUpsertCache[key]
	themeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			themeColumns,
			themeColumnsWithDefault,
			themeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			themeColumns,
			themePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert themes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(themePrimaryKeyColumns))
			copy(conflict, themePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"themes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(themeType, themeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(themeType, themeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert themes")
	}

	if !cached {
		themeUpsertCacheMut.Lock()
		themeUpsertCache[key] = cache
		themeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Theme record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Theme) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Theme record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Theme) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Theme provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), themePrimaryKeyMapping)
	sql := "DELETE FROM \"themes\" WHERE \"theme_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from themes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for themes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q themeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no themeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from themes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for themes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ThemeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ThemeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Theme slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(themeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), themePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"themes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, themePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from theme slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for themes")
	}

	if len(themeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Theme) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Theme provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Theme) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTheme(ctx, exec, o.ThemeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThemeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ThemeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThemeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ThemeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), themePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"themes\".* FROM \"themes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, themePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ThemeSlice")
	}

	*o = slice

	return nil
}

// ThemeExistsG checks if the Theme row exists.
func ThemeExistsG(ctx context.Context, themeID int64) (bool, error) {
	return ThemeExists(ctx, boil.GetContextDB(), themeID)
}

// ThemeExists checks if the Theme row exists.
func ThemeExists(ctx context.Context, exec boil.ContextExecutor, themeID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"themes\" where \"theme_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, themeID)
	}

	row := exec.QueryRowContext(ctx, sql, themeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if themes exists")
	}

	return exists, nil
}
