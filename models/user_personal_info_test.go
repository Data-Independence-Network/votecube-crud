// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserPersonalInfos(t *testing.T) {
	t.Parallel()

	query := UserPersonalInfos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserPersonalInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPersonalInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserPersonalInfos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPersonalInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPersonalInfoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPersonalInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserPersonalInfoExists(ctx, tx, o.UserPersonalInfoID)
	if err != nil {
		t.Errorf("Unable to check if UserPersonalInfo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserPersonalInfoExists to return true, but got false.")
	}
}

func testUserPersonalInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userPersonalInfoFound, err := FindUserPersonalInfo(ctx, tx, o.UserPersonalInfoID)
	if err != nil {
		t.Error(err)
	}

	if userPersonalInfoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserPersonalInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserPersonalInfos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserPersonalInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserPersonalInfos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserPersonalInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userPersonalInfoOne := &UserPersonalInfo{}
	userPersonalInfoTwo := &UserPersonalInfo{}
	if err = randomize.Struct(seed, userPersonalInfoOne, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, userPersonalInfoTwo, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPersonalInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPersonalInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPersonalInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserPersonalInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userPersonalInfoOne := &UserPersonalInfo{}
	userPersonalInfoTwo := &UserPersonalInfo{}
	if err = randomize.Struct(seed, userPersonalInfoOne, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, userPersonalInfoTwo, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPersonalInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPersonalInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userPersonalInfoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func userPersonalInfoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfo) error {
	*o = UserPersonalInfo{}
	return nil
}

func testUserPersonalInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserPersonalInfo{}
	o := &UserPersonalInfo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo object: %s", err)
	}

	AddUserPersonalInfoHook(boil.BeforeInsertHook, userPersonalInfoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoBeforeInsertHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.AfterInsertHook, userPersonalInfoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoAfterInsertHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.AfterSelectHook, userPersonalInfoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoAfterSelectHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.BeforeUpdateHook, userPersonalInfoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoBeforeUpdateHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.AfterUpdateHook, userPersonalInfoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoAfterUpdateHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.BeforeDeleteHook, userPersonalInfoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoBeforeDeleteHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.AfterDeleteHook, userPersonalInfoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoAfterDeleteHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.BeforeUpsertHook, userPersonalInfoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoBeforeUpsertHooks = []UserPersonalInfoHook{}

	AddUserPersonalInfoHook(boil.AfterUpsertHook, userPersonalInfoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoAfterUpsertHooks = []UserPersonalInfoHook{}
}

func testUserPersonalInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPersonalInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userPersonalInfoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPersonalInfoToManyUserPersonalInfoHonors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c UserPersonalInfoHonor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserPersonalInfoID = a.UserPersonalInfoID
	c.UserPersonalInfoID = a.UserPersonalInfoID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userPersonalInfoHonor, err := a.UserPersonalInfoHonors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userPersonalInfoHonor {
		if v.UserPersonalInfoID == b.UserPersonalInfoID {
			bFound = true
		}
		if v.UserPersonalInfoID == c.UserPersonalInfoID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserPersonalInfoSlice{&a}
	if err = a.L.LoadUserPersonalInfoHonors(ctx, tx, false, (*[]*UserPersonalInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoHonors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserPersonalInfoHonors = nil
	if err = a.L.LoadUserPersonalInfoHonors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoHonors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userPersonalInfoHonor)
	}
}

func testUserPersonalInfoToManyUserPersonalInfoTitles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c UserPersonalInfoTitle

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userPersonalInfoTitleDBTypes, false, userPersonalInfoTitleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoTitleDBTypes, false, userPersonalInfoTitleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserPersonalInfoID = a.UserPersonalInfoID
	c.UserPersonalInfoID = a.UserPersonalInfoID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userPersonalInfoTitle, err := a.UserPersonalInfoTitles().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userPersonalInfoTitle {
		if v.UserPersonalInfoID == b.UserPersonalInfoID {
			bFound = true
		}
		if v.UserPersonalInfoID == c.UserPersonalInfoID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserPersonalInfoSlice{&a}
	if err = a.L.LoadUserPersonalInfoTitles(ctx, tx, false, (*[]*UserPersonalInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoTitles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserPersonalInfoTitles = nil
	if err = a.L.LoadUserPersonalInfoTitles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoTitles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userPersonalInfoTitle)
	}
}

func testUserPersonalInfoToManyUserPersonalInfoTitleAfterLastNames(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c UserPersonalInfoTitleAfterLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userPersonalInfoTitleAfterLastNameDBTypes, false, userPersonalInfoTitleAfterLastNameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoTitleAfterLastNameDBTypes, false, userPersonalInfoTitleAfterLastNameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserPersonalInfoID = a.UserPersonalInfoID
	c.UserPersonalInfoID = a.UserPersonalInfoID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userPersonalInfoTitleAfterLastName, err := a.UserPersonalInfoTitleAfterLastNames().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userPersonalInfoTitleAfterLastName {
		if v.UserPersonalInfoID == b.UserPersonalInfoID {
			bFound = true
		}
		if v.UserPersonalInfoID == c.UserPersonalInfoID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserPersonalInfoSlice{&a}
	if err = a.L.LoadUserPersonalInfoTitleAfterLastNames(ctx, tx, false, (*[]*UserPersonalInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoTitleAfterLastNames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserPersonalInfoTitleAfterLastNames = nil
	if err = a.L.LoadUserPersonalInfoTitleAfterLastNames(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoTitleAfterLastNames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userPersonalInfoTitleAfterLastName)
	}
}

func testUserPersonalInfoToManyAddOpUserPersonalInfoHonors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c, d, e UserPersonalInfoHonor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserPersonalInfoHonor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userPersonalInfoHonorDBTypes, false, strmangle.SetComplement(userPersonalInfoHonorPrimaryKeyColumns, userPersonalInfoHonorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserPersonalInfoHonor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserPersonalInfoHonors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserPersonalInfoID != first.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, first.UserPersonalInfoID)
		}
		if a.UserPersonalInfoID != second.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, second.UserPersonalInfoID)
		}

		if first.R.UserPersonalInfo != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserPersonalInfo != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserPersonalInfoHonors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserPersonalInfoHonors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserPersonalInfoHonors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserPersonalInfoToManyAddOpUserPersonalInfoTitles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c, d, e UserPersonalInfoTitle

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserPersonalInfoTitle{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userPersonalInfoTitleDBTypes, false, strmangle.SetComplement(userPersonalInfoTitlePrimaryKeyColumns, userPersonalInfoTitleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserPersonalInfoTitle{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserPersonalInfoTitles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserPersonalInfoID != first.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, first.UserPersonalInfoID)
		}
		if a.UserPersonalInfoID != second.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, second.UserPersonalInfoID)
		}

		if first.R.UserPersonalInfo != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserPersonalInfo != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserPersonalInfoTitles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserPersonalInfoTitles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserPersonalInfoTitles().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserPersonalInfoToManyAddOpUserPersonalInfoTitleAfterLastNames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c, d, e UserPersonalInfoTitleAfterLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserPersonalInfoTitleAfterLastName{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userPersonalInfoTitleAfterLastNameDBTypes, false, strmangle.SetComplement(userPersonalInfoTitleAfterLastNamePrimaryKeyColumns, userPersonalInfoTitleAfterLastNameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserPersonalInfoTitleAfterLastName{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserPersonalInfoTitleAfterLastNames(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserPersonalInfoID != first.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, first.UserPersonalInfoID)
		}
		if a.UserPersonalInfoID != second.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, second.UserPersonalInfoID)
		}

		if first.R.UserPersonalInfo != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserPersonalInfo != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserPersonalInfoTitleAfterLastNames[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserPersonalInfoTitleAfterLastNames[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserPersonalInfoTitleAfterLastNames().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserPersonalInfoToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPersonalInfo
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := UserPersonalInfoSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*UserPersonalInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserPersonalInfoToOneAddressUsingAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPersonalInfo
	var foreign Address

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AddressID = foreign.AddressID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Address().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AddressID != foreign.AddressID {
		t.Errorf("want: %v, got %v", foreign.AddressID, check.AddressID)
	}

	slice := UserPersonalInfoSlice{&local}
	if err = local.L.LoadAddress(ctx, tx, false, (*[]*UserPersonalInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Address == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Address = nil
	if err = local.L.LoadAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Address == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserPersonalInfoToOnePersonTypeUsingPersonType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPersonalInfo
	var foreign PersonType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, personTypeDBTypes, false, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PersonTypeID = foreign.PersonTypeID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PersonType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PersonTypeID != foreign.PersonTypeID {
		t.Errorf("want: %v, got %v", foreign.PersonTypeID, check.PersonTypeID)
	}

	slice := UserPersonalInfoSlice{&local}
	if err = local.L.LoadPersonType(ctx, tx, false, (*[]*UserPersonalInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PersonType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PersonType = nil
	if err = local.L.LoadPersonType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PersonType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserPersonalInfoToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPersonalInfos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testUserPersonalInfoToOneSetOpAddressUsingAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Address{&b, &c} {
		err = a.SetAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Address != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPersonalInfos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AddressID != x.AddressID {
			t.Error("foreign key was wrong value", a.AddressID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AddressID))
		reflect.Indirect(reflect.ValueOf(&a.AddressID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AddressID != x.AddressID {
			t.Error("foreign key was wrong value", a.AddressID, x.AddressID)
		}
	}
}
func testUserPersonalInfoToOneSetOpPersonTypeUsingPersonType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfo
	var b, c PersonType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personTypeDBTypes, false, strmangle.SetComplement(personTypePrimaryKeyColumns, personTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personTypeDBTypes, false, strmangle.SetComplement(personTypePrimaryKeyColumns, personTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PersonType{&b, &c} {
		err = a.SetPersonType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PersonType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPersonalInfos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PersonTypeID != x.PersonTypeID {
			t.Error("foreign key was wrong value", a.PersonTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PersonTypeID))
		reflect.Indirect(reflect.ValueOf(&a.PersonTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PersonTypeID != x.PersonTypeID {
			t.Error("foreign key was wrong value", a.PersonTypeID, x.PersonTypeID)
		}
	}
}

func testUserPersonalInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPersonalInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPersonalInfoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPersonalInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPersonalInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userPersonalInfoDBTypes = map[string]string{`AddressID`: `int8`, `EmailAddressID`: `int8`, `PasswordHashAlgorithm`: `varchar`, `PasswordHashkey`: `varchar`, `PasswordSalt`: `varchar`, `PersonTypeID`: `int8`, `Phone`: `varchar`, `UpdatedAt`: `timestamptz`, `UserAccountID`: `int8`, `UserPersonalInfoID`: `int8`}
	_                       = bytes.MinRead
)

func testUserPersonalInfosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userPersonalInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userPersonalInfoColumns) == len(userPersonalInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserPersonalInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userPersonalInfoColumns) == len(userPersonalInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfo{}
	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPersonalInfoDBTypes, true, userPersonalInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userPersonalInfoColumns, userPersonalInfoPrimaryKeyColumns) {
		fields = userPersonalInfoColumns
	} else {
		fields = strmangle.SetComplement(
			userPersonalInfoColumns,
			userPersonalInfoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserPersonalInfoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserPersonalInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(userPersonalInfoColumns) == len(userPersonalInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserPersonalInfo{}
	if err = randomize.Struct(seed, &o, userPersonalInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPersonalInfo: %s", err)
	}

	count, err := UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userPersonalInfoDBTypes, false, userPersonalInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPersonalInfo: %s", err)
	}

	count, err = UserPersonalInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
