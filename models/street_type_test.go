// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStreetTypes(t *testing.T) {
	t.Parallel()

	query := StreetTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStreetTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreetTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StreetTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreetTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StreetTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreetTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StreetTypeExists(ctx, tx, o.StreetTypeID)
	if err != nil {
		t.Errorf("Unable to check if StreetType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StreetTypeExists to return true, but got false.")
	}
}

func testStreetTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	streetTypeFound, err := FindStreetType(ctx, tx, o.StreetTypeID)
	if err != nil {
		t.Error(err)
	}

	if streetTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStreetTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StreetTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStreetTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StreetTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStreetTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	streetTypeOne := &StreetType{}
	streetTypeTwo := &StreetType{}
	if err = randomize.Struct(seed, streetTypeOne, streetTypeDBTypes, false, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}
	if err = randomize.Struct(seed, streetTypeTwo, streetTypeDBTypes, false, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = streetTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = streetTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StreetTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStreetTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	streetTypeOne := &StreetType{}
	streetTypeTwo := &StreetType{}
	if err = randomize.Struct(seed, streetTypeOne, streetTypeDBTypes, false, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}
	if err = randomize.Struct(seed, streetTypeTwo, streetTypeDBTypes, false, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = streetTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = streetTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func streetTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func streetTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StreetType) error {
	*o = StreetType{}
	return nil
}

func testStreetTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StreetType{}
	o := &StreetType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, streetTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StreetType object: %s", err)
	}

	AddStreetTypeHook(boil.BeforeInsertHook, streetTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	streetTypeBeforeInsertHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.AfterInsertHook, streetTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	streetTypeAfterInsertHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.AfterSelectHook, streetTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	streetTypeAfterSelectHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.BeforeUpdateHook, streetTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	streetTypeBeforeUpdateHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.AfterUpdateHook, streetTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	streetTypeAfterUpdateHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.BeforeDeleteHook, streetTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	streetTypeBeforeDeleteHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.AfterDeleteHook, streetTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	streetTypeAfterDeleteHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.BeforeUpsertHook, streetTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	streetTypeBeforeUpsertHooks = []StreetTypeHook{}

	AddStreetTypeHook(boil.AfterUpsertHook, streetTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	streetTypeAfterUpsertHooks = []StreetTypeHook{}
}

func testStreetTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStreetTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(streetTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStreetTypeToManyStreets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StreetType
	var b, c Street

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StreetTypeID = a.StreetTypeID
	c.StreetTypeID = a.StreetTypeID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	street, err := a.Streets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range street {
		if v.StreetTypeID == b.StreetTypeID {
			bFound = true
		}
		if v.StreetTypeID == c.StreetTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StreetTypeSlice{&a}
	if err = a.L.LoadStreets(ctx, tx, false, (*[]*StreetType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Streets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Streets = nil
	if err = a.L.LoadStreets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Streets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", street)
	}
}

func testStreetTypeToManyAddOpStreets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StreetType
	var b, c, d, e Street

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetTypeDBTypes, false, strmangle.SetComplement(streetTypePrimaryKeyColumns, streetTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Street{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, streetDBTypes, false, strmangle.SetComplement(streetPrimaryKeyColumns, streetColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Street{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStreets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.StreetTypeID != first.StreetTypeID {
			t.Error("foreign key was wrong value", a.StreetTypeID, first.StreetTypeID)
		}
		if a.StreetTypeID != second.StreetTypeID {
			t.Error("foreign key was wrong value", a.StreetTypeID, second.StreetTypeID)
		}

		if first.R.StreetType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.StreetType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Streets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Streets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Streets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStreetTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStreetTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StreetTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStreetTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StreetTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	streetTypeDBTypes = map[string]string{`StreetType`: `varchar`, `StreetTypeID`: `int8`}
	_                 = bytes.MinRead
)

func testStreetTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(streetTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(streetTypeColumns) == len(streetTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStreetTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(streetTypeColumns) == len(streetTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StreetType{}
	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, streetTypeDBTypes, true, streetTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(streetTypeColumns, streetTypePrimaryKeyColumns) {
		fields = streetTypeColumns
	} else {
		fields = strmangle.SetComplement(
			streetTypeColumns,
			streetTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StreetTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStreetTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(streetTypeColumns) == len(streetTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StreetType{}
	if err = randomize.Struct(seed, &o, streetTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StreetType: %s", err)
	}

	count, err := StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, streetTypeDBTypes, false, streetTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StreetType: %s", err)
	}

	count, err = StreetTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
