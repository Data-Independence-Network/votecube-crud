// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsPollsGroup is an object representing the database table.
type PollsPollsGroup struct {
	PollPollGroupID int64     `boil:"poll_poll_group_id" json:"poll_poll_group_id" toml:"poll_poll_group_id" yaml:"poll_poll_group_id"`
	PollGroupID     int64     `boil:"poll_group_id" json:"poll_group_id" toml:"poll_group_id" yaml:"poll_group_id"`
	PollID          int64     `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	UserAccountID   int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *pollsPollsGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsPollsGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsPollsGroupColumns = struct {
	PollPollGroupID string
	PollGroupID     string
	PollID          string
	UserAccountID   string
	CreatedAt       string
}{
	PollPollGroupID: "poll_poll_group_id",
	PollGroupID:     "poll_group_id",
	PollID:          "poll_id",
	UserAccountID:   "user_account_id",
	CreatedAt:       "created_at",
}

// PollsPollsGroupRels is where relationship names are stored.
var PollsPollsGroupRels = struct {
	UserAccount string
	Poll        string
	PollGroup   string
}{
	UserAccount: "UserAccount",
	Poll:        "Poll",
	PollGroup:   "PollGroup",
}

// pollsPollsGroupR is where relationships are stored.
type pollsPollsGroupR struct {
	UserAccount *UserAccount
	Poll        *Poll
	PollGroup   *PollsGroup
}

// NewStruct creates a new relationship struct
func (*pollsPollsGroupR) NewStruct() *pollsPollsGroupR {
	return &pollsPollsGroupR{}
}

// pollsPollsGroupL is where Load methods for each relationship are stored.
type pollsPollsGroupL struct{}

var (
	pollsPollsGroupColumns               = []string{"poll_poll_group_id", "poll_group_id", "poll_id", "user_account_id", "created_at"}
	pollsPollsGroupColumnsWithoutDefault = []string{"poll_poll_group_id", "poll_group_id", "poll_id", "user_account_id", "created_at"}
	pollsPollsGroupColumnsWithDefault    = []string{}
	pollsPollsGroupPrimaryKeyColumns     = []string{"poll_poll_group_id"}
)

type (
	// PollsPollsGroupSlice is an alias for a slice of pointers to PollsPollsGroup.
	// This should generally be used opposed to []PollsPollsGroup.
	PollsPollsGroupSlice []*PollsPollsGroup
	// PollsPollsGroupHook is the signature for custom PollsPollsGroup hook methods
	PollsPollsGroupHook func(context.Context, boil.ContextExecutor, *PollsPollsGroup) error

	pollsPollsGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsPollsGroupType                 = reflect.TypeOf(&PollsPollsGroup{})
	pollsPollsGroupMapping              = queries.MakeStructMapping(pollsPollsGroupType)
	pollsPollsGroupPrimaryKeyMapping, _ = queries.BindMapping(pollsPollsGroupType, pollsPollsGroupMapping, pollsPollsGroupPrimaryKeyColumns)
	pollsPollsGroupInsertCacheMut       sync.RWMutex
	pollsPollsGroupInsertCache          = make(map[string]insertCache)
	pollsPollsGroupUpdateCacheMut       sync.RWMutex
	pollsPollsGroupUpdateCache          = make(map[string]updateCache)
	pollsPollsGroupUpsertCacheMut       sync.RWMutex
	pollsPollsGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsPollsGroupBeforeInsertHooks []PollsPollsGroupHook
var pollsPollsGroupBeforeUpdateHooks []PollsPollsGroupHook
var pollsPollsGroupBeforeDeleteHooks []PollsPollsGroupHook
var pollsPollsGroupBeforeUpsertHooks []PollsPollsGroupHook

var pollsPollsGroupAfterInsertHooks []PollsPollsGroupHook
var pollsPollsGroupAfterSelectHooks []PollsPollsGroupHook
var pollsPollsGroupAfterUpdateHooks []PollsPollsGroupHook
var pollsPollsGroupAfterDeleteHooks []PollsPollsGroupHook
var pollsPollsGroupAfterUpsertHooks []PollsPollsGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsPollsGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsPollsGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsPollsGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsPollsGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsPollsGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsPollsGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsPollsGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsPollsGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsPollsGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsPollsGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsPollsGroupHook registers your hook function for all future operations.
func AddPollsPollsGroupHook(hookPoint boil.HookPoint, pollsPollsGroupHook PollsPollsGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsPollsGroupBeforeInsertHooks = append(pollsPollsGroupBeforeInsertHooks, pollsPollsGroupHook)
	case boil.BeforeUpdateHook:
		pollsPollsGroupBeforeUpdateHooks = append(pollsPollsGroupBeforeUpdateHooks, pollsPollsGroupHook)
	case boil.BeforeDeleteHook:
		pollsPollsGroupBeforeDeleteHooks = append(pollsPollsGroupBeforeDeleteHooks, pollsPollsGroupHook)
	case boil.BeforeUpsertHook:
		pollsPollsGroupBeforeUpsertHooks = append(pollsPollsGroupBeforeUpsertHooks, pollsPollsGroupHook)
	case boil.AfterInsertHook:
		pollsPollsGroupAfterInsertHooks = append(pollsPollsGroupAfterInsertHooks, pollsPollsGroupHook)
	case boil.AfterSelectHook:
		pollsPollsGroupAfterSelectHooks = append(pollsPollsGroupAfterSelectHooks, pollsPollsGroupHook)
	case boil.AfterUpdateHook:
		pollsPollsGroupAfterUpdateHooks = append(pollsPollsGroupAfterUpdateHooks, pollsPollsGroupHook)
	case boil.AfterDeleteHook:
		pollsPollsGroupAfterDeleteHooks = append(pollsPollsGroupAfterDeleteHooks, pollsPollsGroupHook)
	case boil.AfterUpsertHook:
		pollsPollsGroupAfterUpsertHooks = append(pollsPollsGroupAfterUpsertHooks, pollsPollsGroupHook)
	}
}

// OneG returns a single pollsPollsGroup record from the query using the global executor.
func (q pollsPollsGroupQuery) OneG(ctx context.Context) (*PollsPollsGroup, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pollsPollsGroup record from the query.
func (q pollsPollsGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsPollsGroup, error) {
	o := &PollsPollsGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_polls_groups")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PollsPollsGroup records from the query using the global executor.
func (q pollsPollsGroupQuery) AllG(ctx context.Context) (PollsPollsGroupSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PollsPollsGroup records from the query.
func (q pollsPollsGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsPollsGroupSlice, error) {
	var o []*PollsPollsGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsPollsGroup slice")
	}

	if len(pollsPollsGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PollsPollsGroup records in the query, and panics on error.
func (q pollsPollsGroupQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PollsPollsGroup records in the query.
func (q pollsPollsGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_polls_groups rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q pollsPollsGroupQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pollsPollsGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_polls_groups exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *PollsPollsGroup) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Poll pointed to by the foreign key.
func (o *PollsPollsGroup) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// PollGroup pointed to by the foreign key.
func (o *PollsPollsGroup) PollGroup(mods ...qm.QueryMod) pollsGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_group_id=?", o.PollGroupID),
	}

	queryMods = append(queryMods, mods...)

	query := PollsGroups(queryMods...)
	queries.SetFrom(query.Query, "\"polls_groups\"")

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsPollsGroupL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsPollsGroup interface{}, mods queries.Applicator) error {
	var slice []*PollsPollsGroup
	var object *PollsPollsGroup

	if singular {
		object = maybePollsPollsGroup.(*PollsPollsGroup)
	} else {
		slice = *maybePollsPollsGroup.(*[]*PollsPollsGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsPollsGroupR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsPollsGroupR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(pollsPollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.PollsPollsGroups = append(foreign.R.PollsPollsGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.PollsPollsGroups = append(foreign.R.PollsPollsGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsPollsGroupL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsPollsGroup interface{}, mods queries.Applicator) error {
	var slice []*PollsPollsGroup
	var object *PollsPollsGroup

	if singular {
		object = maybePollsPollsGroup.(*PollsPollsGroup)
	} else {
		slice = *maybePollsPollsGroup.(*[]*PollsPollsGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsPollsGroupR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsPollsGroupR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsPollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsPollsGroups = append(foreign.R.PollsPollsGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.PollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsPollsGroups = append(foreign.R.PollsPollsGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadPollGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsPollsGroupL) LoadPollGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsPollsGroup interface{}, mods queries.Applicator) error {
	var slice []*PollsPollsGroup
	var object *PollsPollsGroup

	if singular {
		object = maybePollsPollsGroup.(*PollsPollsGroup)
	} else {
		slice = *maybePollsPollsGroup.(*[]*PollsPollsGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsPollsGroupR{}
		}
		args = append(args, object.PollGroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsPollsGroupR{}
			}

			for _, a := range args {
				if a == obj.PollGroupID {
					continue Outer
				}
			}

			args = append(args, obj.PollGroupID)
		}
	}

	query := NewQuery(qm.From(`polls_groups`), qm.WhereIn(`poll_group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PollsGroup")
	}

	var resultSlice []*PollsGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PollsGroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_groups")
	}

	if len(pollsPollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PollGroup = foreign
		if foreign.R == nil {
			foreign.R = &pollsGroupR{}
		}
		foreign.R.PollGroupPollsPollsGroups = append(foreign.R.PollGroupPollsPollsGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollGroupID == foreign.PollGroupID {
				local.R.PollGroup = foreign
				if foreign.R == nil {
					foreign.R = &pollsGroupR{}
				}
				foreign.R.PollGroupPollsPollsGroups = append(foreign.R.PollGroupPollsPollsGroups, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccountG of the pollsPollsGroup to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.PollsPollsGroups.
// Uses the global database handle.
func (o *PollsPollsGroup) SetUserAccountG(ctx context.Context, insert bool, related *UserAccount) error {
	return o.SetUserAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetUserAccount of the pollsPollsGroup to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.PollsPollsGroups.
func (o *PollsPollsGroup) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsPollsGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.PollPollGroupID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &pollsPollsGroupR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			PollsPollsGroups: PollsPollsGroupSlice{o},
		}
	} else {
		related.R.PollsPollsGroups = append(related.R.PollsPollsGroups, o)
	}

	return nil
}

// SetPollG of the pollsPollsGroup to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsPollsGroups.
// Uses the global database handle.
func (o *PollsPollsGroup) SetPollG(ctx context.Context, insert bool, related *Poll) error {
	return o.SetPoll(ctx, boil.GetContextDB(), insert, related)
}

// SetPoll of the pollsPollsGroup to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsPollsGroups.
func (o *PollsPollsGroup) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsPollsGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.PollID, o.PollPollGroupID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.PollID
	if o.R == nil {
		o.R = &pollsPollsGroupR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsPollsGroups: PollsPollsGroupSlice{o},
		}
	} else {
		related.R.PollsPollsGroups = append(related.R.PollsPollsGroups, o)
	}

	return nil
}

// SetPollGroupG of the pollsPollsGroup to the related item.
// Sets o.R.PollGroup to related.
// Adds o to related.R.PollGroupPollsPollsGroups.
// Uses the global database handle.
func (o *PollsPollsGroup) SetPollGroupG(ctx context.Context, insert bool, related *PollsGroup) error {
	return o.SetPollGroup(ctx, boil.GetContextDB(), insert, related)
}

// SetPollGroup of the pollsPollsGroup to the related item.
// Sets o.R.PollGroup to related.
// Adds o to related.R.PollGroupPollsPollsGroups.
func (o *PollsPollsGroup) SetPollGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PollsGroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsPollsGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.PollGroupID, o.PollPollGroupID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollGroupID = related.PollGroupID
	if o.R == nil {
		o.R = &pollsPollsGroupR{
			PollGroup: related,
		}
	} else {
		o.R.PollGroup = related
	}

	if related.R == nil {
		related.R = &pollsGroupR{
			PollGroupPollsPollsGroups: PollsPollsGroupSlice{o},
		}
	} else {
		related.R.PollGroupPollsPollsGroups = append(related.R.PollGroupPollsPollsGroups, o)
	}

	return nil
}

// PollsPollsGroups retrieves all the records using an executor.
func PollsPollsGroups(mods ...qm.QueryMod) pollsPollsGroupQuery {
	mods = append(mods, qm.From("\"polls_polls_groups\""))
	return pollsPollsGroupQuery{NewQuery(mods...)}
}

// FindPollsPollsGroupG retrieves a single record by ID.
func FindPollsPollsGroupG(ctx context.Context, pollPollGroupID int64, selectCols ...string) (*PollsPollsGroup, error) {
	return FindPollsPollsGroup(ctx, boil.GetContextDB(), pollPollGroupID, selectCols...)
}

// FindPollsPollsGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsPollsGroup(ctx context.Context, exec boil.ContextExecutor, pollPollGroupID int64, selectCols ...string) (*PollsPollsGroup, error) {
	pollsPollsGroupObj := &PollsPollsGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_polls_groups\" where \"poll_poll_group_id\"=$1", sel,
	)

	q := queries.Raw(query, pollPollGroupID)

	err := q.Bind(ctx, exec, pollsPollsGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_polls_groups")
	}

	return pollsPollsGroupObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PollsPollsGroup) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsPollsGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_polls_groups provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsPollsGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsPollsGroupInsertCacheMut.RLock()
	cache, cached := pollsPollsGroupInsertCache[key]
	pollsPollsGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsPollsGroupColumns,
			pollsPollsGroupColumnsWithDefault,
			pollsPollsGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsPollsGroupType, pollsPollsGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsPollsGroupType, pollsPollsGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_polls_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_polls_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_polls_groups")
	}

	if !cached {
		pollsPollsGroupInsertCacheMut.Lock()
		pollsPollsGroupInsertCache[key] = cache
		pollsPollsGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PollsPollsGroup record using the global executor.
// See Update for more documentation.
func (o *PollsPollsGroup) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PollsPollsGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsPollsGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsPollsGroupUpdateCacheMut.RLock()
	cache, cached := pollsPollsGroupUpdateCache[key]
	pollsPollsGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsPollsGroupColumns,
			pollsPollsGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_polls_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_polls_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsPollsGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsPollsGroupType, pollsPollsGroupMapping, append(wl, pollsPollsGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_polls_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_polls_groups")
	}

	if !cached {
		pollsPollsGroupUpdateCacheMut.Lock()
		pollsPollsGroupUpdateCache[key] = cache
		pollsPollsGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsPollsGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_polls_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_polls_groups")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PollsPollsGroupSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsPollsGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsPollsGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsPollsGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsPollsGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsPollsGroup")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PollsPollsGroup) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsPollsGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_polls_groups provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsPollsGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsPollsGroupUpsertCacheMut.RLock()
	cache, cached := pollsPollsGroupUpsertCache[key]
	pollsPollsGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsPollsGroupColumns,
			pollsPollsGroupColumnsWithDefault,
			pollsPollsGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsPollsGroupColumns,
			pollsPollsGroupPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_polls_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsPollsGroupPrimaryKeyColumns))
			copy(conflict, pollsPollsGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_polls_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsPollsGroupType, pollsPollsGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsPollsGroupType, pollsPollsGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_polls_groups")
	}

	if !cached {
		pollsPollsGroupUpsertCacheMut.Lock()
		pollsPollsGroupUpsertCache[key] = cache
		pollsPollsGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PollsPollsGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PollsPollsGroup) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PollsPollsGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsPollsGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsPollsGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsPollsGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_polls_groups\" WHERE \"poll_poll_group_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_polls_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_polls_groups")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsPollsGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsPollsGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_polls_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_polls_groups")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PollsPollsGroupSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsPollsGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsPollsGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsPollsGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsPollsGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_polls_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsPollsGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsPollsGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_polls_groups")
	}

	if len(pollsPollsGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PollsPollsGroup) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PollsPollsGroup provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsPollsGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsPollsGroup(ctx, exec, o.PollPollGroupID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsPollsGroupSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PollsPollsGroupSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsPollsGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsPollsGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsPollsGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_polls_groups\".* FROM \"polls_polls_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsPollsGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsPollsGroupSlice")
	}

	*o = slice

	return nil
}

// PollsPollsGroupExistsG checks if the PollsPollsGroup row exists.
func PollsPollsGroupExistsG(ctx context.Context, pollPollGroupID int64) (bool, error) {
	return PollsPollsGroupExists(ctx, boil.GetContextDB(), pollPollGroupID)
}

// PollsPollsGroupExists checks if the PollsPollsGroup row exists.
func PollsPollsGroupExists(ctx context.Context, exec boil.ContextExecutor, pollPollGroupID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_polls_groups\" where \"poll_poll_group_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollPollGroupID)
	}

	row := exec.QueryRowContext(ctx, sql, pollPollGroupID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_polls_groups exists")
	}

	return exists, nil
}
