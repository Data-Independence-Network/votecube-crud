// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Title is an object representing the database table.
type Title struct {
	TitleID   int64  `boil:"title_id" json:"title_id" toml:"title_id" yaml:"title_id"`
	TitleName string `boil:"title_name" json:"title_name" toml:"title_name" yaml:"title_name"`

	R *titleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L titleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TitleColumns = struct {
	TitleID   string
	TitleName string
}{
	TitleID:   "title_id",
	TitleName: "title_name",
}

// TitleRels is where relationship names are stored.
var TitleRels = struct {
	UserPersonalInfoTitles string
}{
	UserPersonalInfoTitles: "UserPersonalInfoTitles",
}

// titleR is where relationships are stored.
type titleR struct {
	UserPersonalInfoTitles UserPersonalInfoTitleSlice
}

// NewStruct creates a new relationship struct
func (*titleR) NewStruct() *titleR {
	return &titleR{}
}

// titleL is where Load methods for each relationship are stored.
type titleL struct{}

var (
	titleColumns               = []string{"title_id", "title_name"}
	titleColumnsWithoutDefault = []string{"title_id", "title_name"}
	titleColumnsWithDefault    = []string{}
	titlePrimaryKeyColumns     = []string{"title_id"}
)

type (
	// TitleSlice is an alias for a slice of pointers to Title.
	// This should generally be used opposed to []Title.
	TitleSlice []*Title
	// TitleHook is the signature for custom Title hook methods
	TitleHook func(context.Context, boil.ContextExecutor, *Title) error

	titleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	titleType                 = reflect.TypeOf(&Title{})
	titleMapping              = queries.MakeStructMapping(titleType)
	titlePrimaryKeyMapping, _ = queries.BindMapping(titleType, titleMapping, titlePrimaryKeyColumns)
	titleInsertCacheMut       sync.RWMutex
	titleInsertCache          = make(map[string]insertCache)
	titleUpdateCacheMut       sync.RWMutex
	titleUpdateCache          = make(map[string]updateCache)
	titleUpsertCacheMut       sync.RWMutex
	titleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var titleBeforeInsertHooks []TitleHook
var titleBeforeUpdateHooks []TitleHook
var titleBeforeDeleteHooks []TitleHook
var titleBeforeUpsertHooks []TitleHook

var titleAfterInsertHooks []TitleHook
var titleAfterSelectHooks []TitleHook
var titleAfterUpdateHooks []TitleHook
var titleAfterDeleteHooks []TitleHook
var titleAfterUpsertHooks []TitleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Title) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Title) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Title) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Title) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Title) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Title) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Title) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Title) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Title) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range titleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTitleHook registers your hook function for all future operations.
func AddTitleHook(hookPoint boil.HookPoint, titleHook TitleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		titleBeforeInsertHooks = append(titleBeforeInsertHooks, titleHook)
	case boil.BeforeUpdateHook:
		titleBeforeUpdateHooks = append(titleBeforeUpdateHooks, titleHook)
	case boil.BeforeDeleteHook:
		titleBeforeDeleteHooks = append(titleBeforeDeleteHooks, titleHook)
	case boil.BeforeUpsertHook:
		titleBeforeUpsertHooks = append(titleBeforeUpsertHooks, titleHook)
	case boil.AfterInsertHook:
		titleAfterInsertHooks = append(titleAfterInsertHooks, titleHook)
	case boil.AfterSelectHook:
		titleAfterSelectHooks = append(titleAfterSelectHooks, titleHook)
	case boil.AfterUpdateHook:
		titleAfterUpdateHooks = append(titleAfterUpdateHooks, titleHook)
	case boil.AfterDeleteHook:
		titleAfterDeleteHooks = append(titleAfterDeleteHooks, titleHook)
	case boil.AfterUpsertHook:
		titleAfterUpsertHooks = append(titleAfterUpsertHooks, titleHook)
	}
}

// One returns a single title record from the query.
func (q titleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Title, error) {
	o := &Title{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for title")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Title records from the query.
func (q titleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TitleSlice, error) {
	var o []*Title

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Title slice")
	}

	if len(titleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Title records in the query.
func (q titleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count title rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q titleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if title exists")
	}

	return count > 0, nil
}

// UserPersonalInfoTitles retrieves all the user_personal_info_title's UserPersonalInfoTitles with an executor.
func (o *Title) UserPersonalInfoTitles(mods ...qm.QueryMod) userPersonalInfoTitleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_personal_info_title\".\"title_id\"=?", o.TitleID),
	)

	query := UserPersonalInfoTitles(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info_title\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_personal_info_title\".*"})
	}

	return query
}

// LoadUserPersonalInfoTitles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (titleL) LoadUserPersonalInfoTitles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTitle interface{}, mods queries.Applicator) error {
	var slice []*Title
	var object *Title

	if singular {
		object = maybeTitle.(*Title)
	} else {
		slice = *maybeTitle.(*[]*Title)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &titleR{}
		}
		args = append(args, object.TitleID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &titleR{}
			}

			for _, a := range args {
				if a == obj.TitleID {
					continue Outer
				}
			}

			args = append(args, obj.TitleID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info_title`), qm.WhereIn(`title_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_personal_info_title")
	}

	var resultSlice []*UserPersonalInfoTitle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_personal_info_title")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_personal_info_title")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info_title")
	}

	if len(userPersonalInfoTitleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserPersonalInfoTitles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPersonalInfoTitleR{}
			}
			foreign.R.Title = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TitleID == foreign.TitleID {
				local.R.UserPersonalInfoTitles = append(local.R.UserPersonalInfoTitles, foreign)
				if foreign.R == nil {
					foreign.R = &userPersonalInfoTitleR{}
				}
				foreign.R.Title = local
				break
			}
		}
	}

	return nil
}

// AddUserPersonalInfoTitles adds the given related objects to the existing relationships
// of the title, optionally inserting them as new records.
// Appends related to o.R.UserPersonalInfoTitles.
// Sets related.R.Title appropriately.
func (o *Title) AddUserPersonalInfoTitles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserPersonalInfoTitle) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TitleID = o.TitleID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_personal_info_title\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"title_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitlePrimaryKeyColumns),
			)
			values := []interface{}{o.TitleID, rel.UserPersonalInfoTitleID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TitleID = o.TitleID
		}
	}

	if o.R == nil {
		o.R = &titleR{
			UserPersonalInfoTitles: related,
		}
	} else {
		o.R.UserPersonalInfoTitles = append(o.R.UserPersonalInfoTitles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPersonalInfoTitleR{
				Title: o,
			}
		} else {
			rel.R.Title = o
		}
	}
	return nil
}

// Titles retrieves all the records using an executor.
func Titles(mods ...qm.QueryMod) titleQuery {
	mods = append(mods, qm.From("\"title\""))
	return titleQuery{NewQuery(mods...)}
}

// FindTitle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTitle(ctx context.Context, exec boil.ContextExecutor, titleID int64, selectCols ...string) (*Title, error) {
	titleObj := &Title{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"title\" where \"title_id\"=$1", sel,
	)

	q := queries.Raw(query, titleID)

	err := q.Bind(ctx, exec, titleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from title")
	}

	return titleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Title) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no title provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(titleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	titleInsertCacheMut.RLock()
	cache, cached := titleInsertCache[key]
	titleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			titleColumns,
			titleColumnsWithDefault,
			titleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(titleType, titleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(titleType, titleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"title\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"title\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into title")
	}

	if !cached {
		titleInsertCacheMut.Lock()
		titleInsertCache[key] = cache
		titleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Title.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Title) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	titleUpdateCacheMut.RLock()
	cache, cached := titleUpdateCache[key]
	titleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			titleColumns,
			titlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update title, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"title\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, titlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(titleType, titleMapping, append(wl, titlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update title row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for title")
	}

	if !cached {
		titleUpdateCacheMut.Lock()
		titleUpdateCache[key] = cache
		titleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q titleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for title")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for title")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TitleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), titlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"title\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, titlePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in title slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all title")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Title) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no title provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(titleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	titleUpsertCacheMut.RLock()
	cache, cached := titleUpsertCache[key]
	titleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			titleColumns,
			titleColumnsWithDefault,
			titleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			titleColumns,
			titlePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert title, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(titlePrimaryKeyColumns))
			copy(conflict, titlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"title\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(titleType, titleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(titleType, titleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert title")
	}

	if !cached {
		titleUpsertCacheMut.Lock()
		titleUpsertCache[key] = cache
		titleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Title record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Title) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Title provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), titlePrimaryKeyMapping)
	sql := "DELETE FROM \"title\" WHERE \"title_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from title")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for title")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q titleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no titleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from title")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for title")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TitleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Title slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(titleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), titlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"title\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, titlePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from title slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for title")
	}

	if len(titleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Title) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTitle(ctx, exec, o.TitleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TitleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TitleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), titlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"title\".* FROM \"title\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, titlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TitleSlice")
	}

	*o = slice

	return nil
}

// TitleExists checks if the Title row exists.
func TitleExists(ctx context.Context, exec boil.ContextExecutor, titleID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"title\" where \"title_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, titleID)
	}

	row := exec.QueryRowContext(ctx, sql, titleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if title exists")
	}

	return exists, nil
}
