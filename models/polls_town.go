// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsTown is an object representing the database table.
type PollsTown struct {
	PollTownID int64 `boil:"poll_town_id" json:"poll_town_id" toml:"poll_town_id" yaml:"poll_town_id"`
	PollID     int64 `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	TownID     int64 `boil:"town_id" json:"town_id" toml:"town_id" yaml:"town_id"`

	R *pollsTownR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsTownL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsTownColumns = struct {
	PollTownID string
	PollID     string
	TownID     string
}{
	PollTownID: "poll_town_id",
	PollID:     "poll_id",
	TownID:     "town_id",
}

// PollsTownRels is where relationship names are stored.
var PollsTownRels = struct {
	Town string
	Poll string
}{
	Town: "Town",
	Poll: "Poll",
}

// pollsTownR is where relationships are stored.
type pollsTownR struct {
	Town *Town
	Poll *Poll
}

// NewStruct creates a new relationship struct
func (*pollsTownR) NewStruct() *pollsTownR {
	return &pollsTownR{}
}

// pollsTownL is where Load methods for each relationship are stored.
type pollsTownL struct{}

var (
	pollsTownColumns               = []string{"poll_town_id", "poll_id", "town_id"}
	pollsTownColumnsWithoutDefault = []string{"poll_town_id", "poll_id", "town_id"}
	pollsTownColumnsWithDefault    = []string{}
	pollsTownPrimaryKeyColumns     = []string{"poll_town_id"}
)

type (
	// PollsTownSlice is an alias for a slice of pointers to PollsTown.
	// This should generally be used opposed to []PollsTown.
	PollsTownSlice []*PollsTown
	// PollsTownHook is the signature for custom PollsTown hook methods
	PollsTownHook func(context.Context, boil.ContextExecutor, *PollsTown) error

	pollsTownQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsTownType                 = reflect.TypeOf(&PollsTown{})
	pollsTownMapping              = queries.MakeStructMapping(pollsTownType)
	pollsTownPrimaryKeyMapping, _ = queries.BindMapping(pollsTownType, pollsTownMapping, pollsTownPrimaryKeyColumns)
	pollsTownInsertCacheMut       sync.RWMutex
	pollsTownInsertCache          = make(map[string]insertCache)
	pollsTownUpdateCacheMut       sync.RWMutex
	pollsTownUpdateCache          = make(map[string]updateCache)
	pollsTownUpsertCacheMut       sync.RWMutex
	pollsTownUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsTownBeforeInsertHooks []PollsTownHook
var pollsTownBeforeUpdateHooks []PollsTownHook
var pollsTownBeforeDeleteHooks []PollsTownHook
var pollsTownBeforeUpsertHooks []PollsTownHook

var pollsTownAfterInsertHooks []PollsTownHook
var pollsTownAfterSelectHooks []PollsTownHook
var pollsTownAfterUpdateHooks []PollsTownHook
var pollsTownAfterDeleteHooks []PollsTownHook
var pollsTownAfterUpsertHooks []PollsTownHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsTown) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsTown) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsTown) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsTown) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsTown) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsTown) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsTown) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsTown) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsTown) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsTownAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsTownHook registers your hook function for all future operations.
func AddPollsTownHook(hookPoint boil.HookPoint, pollsTownHook PollsTownHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsTownBeforeInsertHooks = append(pollsTownBeforeInsertHooks, pollsTownHook)
	case boil.BeforeUpdateHook:
		pollsTownBeforeUpdateHooks = append(pollsTownBeforeUpdateHooks, pollsTownHook)
	case boil.BeforeDeleteHook:
		pollsTownBeforeDeleteHooks = append(pollsTownBeforeDeleteHooks, pollsTownHook)
	case boil.BeforeUpsertHook:
		pollsTownBeforeUpsertHooks = append(pollsTownBeforeUpsertHooks, pollsTownHook)
	case boil.AfterInsertHook:
		pollsTownAfterInsertHooks = append(pollsTownAfterInsertHooks, pollsTownHook)
	case boil.AfterSelectHook:
		pollsTownAfterSelectHooks = append(pollsTownAfterSelectHooks, pollsTownHook)
	case boil.AfterUpdateHook:
		pollsTownAfterUpdateHooks = append(pollsTownAfterUpdateHooks, pollsTownHook)
	case boil.AfterDeleteHook:
		pollsTownAfterDeleteHooks = append(pollsTownAfterDeleteHooks, pollsTownHook)
	case boil.AfterUpsertHook:
		pollsTownAfterUpsertHooks = append(pollsTownAfterUpsertHooks, pollsTownHook)
	}
}

// One returns a single pollsTown record from the query.
func (q pollsTownQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsTown, error) {
	o := &PollsTown{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_town")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PollsTown records from the query.
func (q pollsTownQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsTownSlice, error) {
	var o []*PollsTown

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsTown slice")
	}

	if len(pollsTownAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PollsTown records in the query.
func (q pollsTownQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_town rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pollsTownQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_town exists")
	}

	return count > 0, nil
}

// Town pointed to by the foreign key.
func (o *PollsTown) Town(mods ...qm.QueryMod) townQuery {
	queryMods := []qm.QueryMod{
		qm.Where("town_id=?", o.TownID),
	}

	queryMods = append(queryMods, mods...)

	query := Towns(queryMods...)
	queries.SetFrom(query.Query, "\"town\"")

	return query
}

// Poll pointed to by the foreign key.
func (o *PollsTown) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// LoadTown allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsTownL) LoadTown(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsTown interface{}, mods queries.Applicator) error {
	var slice []*PollsTown
	var object *PollsTown

	if singular {
		object = maybePollsTown.(*PollsTown)
	} else {
		slice = *maybePollsTown.(*[]*PollsTown)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsTownR{}
		}
		args = append(args, object.TownID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsTownR{}
			}

			for _, a := range args {
				if a == obj.TownID {
					continue Outer
				}
			}

			args = append(args, obj.TownID)
		}
	}

	query := NewQuery(qm.From(`town`), qm.WhereIn(`town_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Town")
	}

	var resultSlice []*Town
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Town")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for town")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for town")
	}

	if len(pollsTownAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Town = foreign
		if foreign.R == nil {
			foreign.R = &townR{}
		}
		foreign.R.PollsTowns = append(foreign.R.PollsTowns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TownID == foreign.TownID {
				local.R.Town = foreign
				if foreign.R == nil {
					foreign.R = &townR{}
				}
				foreign.R.PollsTowns = append(foreign.R.PollsTowns, local)
				break
			}
		}
	}

	return nil
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsTownL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsTown interface{}, mods queries.Applicator) error {
	var slice []*PollsTown
	var object *PollsTown

	if singular {
		object = maybePollsTown.(*PollsTown)
	} else {
		slice = *maybePollsTown.(*[]*PollsTown)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsTownR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsTownR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsTownAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsTowns = append(foreign.R.PollsTowns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.PollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsTowns = append(foreign.R.PollsTowns, local)
				break
			}
		}
	}

	return nil
}

// SetTown of the pollsTown to the related item.
// Sets o.R.Town to related.
// Adds o to related.R.PollsTowns.
func (o *PollsTown) SetTown(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Town) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_town\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"town_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsTownPrimaryKeyColumns),
	)
	values := []interface{}{related.TownID, o.PollTownID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TownID = related.TownID
	if o.R == nil {
		o.R = &pollsTownR{
			Town: related,
		}
	} else {
		o.R.Town = related
	}

	if related.R == nil {
		related.R = &townR{
			PollsTowns: PollsTownSlice{o},
		}
	} else {
		related.R.PollsTowns = append(related.R.PollsTowns, o)
	}

	return nil
}

// SetPoll of the pollsTown to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsTowns.
func (o *PollsTown) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_town\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsTownPrimaryKeyColumns),
	)
	values := []interface{}{related.PollID, o.PollTownID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.PollID
	if o.R == nil {
		o.R = &pollsTownR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsTowns: PollsTownSlice{o},
		}
	} else {
		related.R.PollsTowns = append(related.R.PollsTowns, o)
	}

	return nil
}

// PollsTowns retrieves all the records using an executor.
func PollsTowns(mods ...qm.QueryMod) pollsTownQuery {
	mods = append(mods, qm.From("\"polls_town\""))
	return pollsTownQuery{NewQuery(mods...)}
}

// FindPollsTown retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsTown(ctx context.Context, exec boil.ContextExecutor, pollTownID int64, selectCols ...string) (*PollsTown, error) {
	pollsTownObj := &PollsTown{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_town\" where \"poll_town_id\"=$1", sel,
	)

	q := queries.Raw(query, pollTownID)

	err := q.Bind(ctx, exec, pollsTownObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_town")
	}

	return pollsTownObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsTown) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_town provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsTownColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsTownInsertCacheMut.RLock()
	cache, cached := pollsTownInsertCache[key]
	pollsTownInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsTownColumns,
			pollsTownColumnsWithDefault,
			pollsTownColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsTownType, pollsTownMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsTownType, pollsTownMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_town\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_town\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_town")
	}

	if !cached {
		pollsTownInsertCacheMut.Lock()
		pollsTownInsertCache[key] = cache
		pollsTownInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PollsTown.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsTown) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsTownUpdateCacheMut.RLock()
	cache, cached := pollsTownUpdateCache[key]
	pollsTownUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsTownColumns,
			pollsTownPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_town, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_town\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsTownPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsTownType, pollsTownMapping, append(wl, pollsTownPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_town row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_town")
	}

	if !cached {
		pollsTownUpdateCacheMut.Lock()
		pollsTownUpdateCache[key] = cache
		pollsTownUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsTownQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_town")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_town")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsTownSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsTownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_town\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsTownPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsTown slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsTown")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsTown) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_town provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsTownColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsTownUpsertCacheMut.RLock()
	cache, cached := pollsTownUpsertCache[key]
	pollsTownUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsTownColumns,
			pollsTownColumnsWithDefault,
			pollsTownColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsTownColumns,
			pollsTownPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_town, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsTownPrimaryKeyColumns))
			copy(conflict, pollsTownPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_town\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsTownType, pollsTownMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsTownType, pollsTownMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_town")
	}

	if !cached {
		pollsTownUpsertCacheMut.Lock()
		pollsTownUpsertCache[key] = cache
		pollsTownUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PollsTown record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsTown) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsTown provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsTownPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_town\" WHERE \"poll_town_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_town")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_town")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsTownQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsTownQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_town")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_town")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsTownSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsTown slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsTownBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsTownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_town\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsTownPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsTown slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_town")
	}

	if len(pollsTownAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsTown) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsTown(ctx, exec, o.PollTownID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsTownSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsTownSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsTownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_town\".* FROM \"polls_town\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsTownPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsTownSlice")
	}

	*o = slice

	return nil
}

// PollsTownExists checks if the PollsTown row exists.
func PollsTownExists(ctx context.Context, exec boil.ContextExecutor, pollTownID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_town\" where \"poll_town_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollTownID)
	}

	row := exec.QueryRowContext(ctx, sql, pollTownID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_town exists")
	}

	return exists, nil
}
