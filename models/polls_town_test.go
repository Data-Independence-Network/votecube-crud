// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsTowns(t *testing.T) {
	t.Parallel()

	query := PollsTowns()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsTownsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsTownsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsTowns().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsTownsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsTownSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsTownsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsTownExists(ctx, tx, o.PollTownID)
	if err != nil {
		t.Errorf("Unable to check if PollsTown exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsTownExists to return true, but got false.")
	}
}

func testPollsTownsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsTownFound, err := FindPollsTown(ctx, tx, o.PollTownID)
	if err != nil {
		t.Error(err)
	}

	if pollsTownFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsTownsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsTowns().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsTownsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsTowns().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsTownsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsTownOne := &PollsTown{}
	pollsTownTwo := &PollsTown{}
	if err = randomize.Struct(seed, pollsTownOne, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsTownTwo, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsTownOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsTownTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsTowns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsTownsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsTownOne := &PollsTown{}
	pollsTownTwo := &PollsTown{}
	if err = randomize.Struct(seed, pollsTownOne, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsTownTwo, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsTownOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsTownTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsTownBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func pollsTownAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsTown) error {
	*o = PollsTown{}
	return nil
}

func testPollsTownsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsTown{}
	o := &PollsTown{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsTownDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsTown object: %s", err)
	}

	AddPollsTownHook(boil.BeforeInsertHook, pollsTownBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsTownBeforeInsertHooks = []PollsTownHook{}

	AddPollsTownHook(boil.AfterInsertHook, pollsTownAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsTownAfterInsertHooks = []PollsTownHook{}

	AddPollsTownHook(boil.AfterSelectHook, pollsTownAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsTownAfterSelectHooks = []PollsTownHook{}

	AddPollsTownHook(boil.BeforeUpdateHook, pollsTownBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsTownBeforeUpdateHooks = []PollsTownHook{}

	AddPollsTownHook(boil.AfterUpdateHook, pollsTownAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsTownAfterUpdateHooks = []PollsTownHook{}

	AddPollsTownHook(boil.BeforeDeleteHook, pollsTownBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsTownBeforeDeleteHooks = []PollsTownHook{}

	AddPollsTownHook(boil.AfterDeleteHook, pollsTownAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsTownAfterDeleteHooks = []PollsTownHook{}

	AddPollsTownHook(boil.BeforeUpsertHook, pollsTownBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsTownBeforeUpsertHooks = []PollsTownHook{}

	AddPollsTownHook(boil.AfterUpsertHook, pollsTownAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsTownAfterUpsertHooks = []PollsTownHook{}
}

func testPollsTownsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsTownsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsTownColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsTownToOneTownUsingTown(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsTown
	var foreign Town

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, townDBTypes, false, townColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Town struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TownID = foreign.TownID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Town().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TownID != foreign.TownID {
		t.Errorf("want: %v, got %v", foreign.TownID, check.TownID)
	}

	slice := PollsTownSlice{&local}
	if err = local.L.LoadTown(ctx, tx, false, (*[]*PollsTown)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Town == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Town = nil
	if err = local.L.LoadTown(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Town == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsTownToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsTown
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsTownDBTypes, false, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.PollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollID != foreign.PollID {
		t.Errorf("want: %v, got %v", foreign.PollID, check.PollID)
	}

	slice := PollsTownSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsTown)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsTownToOneSetOpTownUsingTown(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsTown
	var b, c Town

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsTownDBTypes, false, strmangle.SetComplement(pollsTownPrimaryKeyColumns, pollsTownColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, townDBTypes, false, strmangle.SetComplement(townPrimaryKeyColumns, townColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, townDBTypes, false, strmangle.SetComplement(townPrimaryKeyColumns, townColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Town{&b, &c} {
		err = a.SetTown(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Town != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsTowns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TownID != x.TownID {
			t.Error("foreign key was wrong value", a.TownID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TownID))
		reflect.Indirect(reflect.ValueOf(&a.TownID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TownID != x.TownID {
			t.Error("foreign key was wrong value", a.TownID, x.TownID)
		}
	}
}
func testPollsTownToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsTown
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsTownDBTypes, false, strmangle.SetComplement(pollsTownPrimaryKeyColumns, pollsTownColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsTowns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID, x.PollID)
		}
	}
}

func testPollsTownsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsTownsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsTownSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsTownsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsTowns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsTownDBTypes = map[string]string{`PollID`: `int8`, `PollTownID`: `int8`, `TownID`: `int8`}
	_                = bytes.MinRead
)

func testPollsTownsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsTownPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsTownColumns) == len(pollsTownPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsTownsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsTownColumns) == len(pollsTownPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsTown{}
	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsTownDBTypes, true, pollsTownPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsTownColumns, pollsTownPrimaryKeyColumns) {
		fields = pollsTownColumns
	} else {
		fields = strmangle.SetComplement(
			pollsTownColumns,
			pollsTownPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsTownSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsTownsUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsTownColumns) == len(pollsTownPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsTown{}
	if err = randomize.Struct(seed, &o, pollsTownDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsTown: %s", err)
	}

	count, err := PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsTownDBTypes, false, pollsTownPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsTown struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsTown: %s", err)
	}

	count, err = PollsTowns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
