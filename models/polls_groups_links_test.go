// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsGroupsLinks(t *testing.T) {
	t.Parallel()

	query := PollsGroupsLinks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsGroupsLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsGroupsLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsGroupsLinks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsGroupsLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsGroupsLinkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsGroupsLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsGroupsLinkExists(ctx, tx, o.PollGroupLinkID)
	if err != nil {
		t.Errorf("Unable to check if PollsGroupsLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsGroupsLinkExists to return true, but got false.")
	}
}

func testPollsGroupsLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsGroupsLinkFound, err := FindPollsGroupsLink(ctx, tx, o.PollGroupLinkID)
	if err != nil {
		t.Error(err)
	}

	if pollsGroupsLinkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsGroupsLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsGroupsLinks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsGroupsLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsGroupsLinks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsGroupsLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsGroupsLinkOne := &PollsGroupsLink{}
	pollsGroupsLinkTwo := &PollsGroupsLink{}
	if err = randomize.Struct(seed, pollsGroupsLinkOne, pollsGroupsLinkDBTypes, false, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsGroupsLinkTwo, pollsGroupsLinkDBTypes, false, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsGroupsLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsGroupsLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsGroupsLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsGroupsLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsGroupsLinkOne := &PollsGroupsLink{}
	pollsGroupsLinkTwo := &PollsGroupsLink{}
	if err = randomize.Struct(seed, pollsGroupsLinkOne, pollsGroupsLinkDBTypes, false, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsGroupsLinkTwo, pollsGroupsLinkDBTypes, false, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsGroupsLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsGroupsLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsGroupsLinkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func pollsGroupsLinkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsGroupsLink) error {
	*o = PollsGroupsLink{}
	return nil
}

func testPollsGroupsLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsGroupsLink{}
	o := &PollsGroupsLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink object: %s", err)
	}

	AddPollsGroupsLinkHook(boil.BeforeInsertHook, pollsGroupsLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkBeforeInsertHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.AfterInsertHook, pollsGroupsLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkAfterInsertHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.AfterSelectHook, pollsGroupsLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkAfterSelectHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.BeforeUpdateHook, pollsGroupsLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkBeforeUpdateHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.AfterUpdateHook, pollsGroupsLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkAfterUpdateHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.BeforeDeleteHook, pollsGroupsLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkBeforeDeleteHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.AfterDeleteHook, pollsGroupsLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkAfterDeleteHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.BeforeUpsertHook, pollsGroupsLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkBeforeUpsertHooks = []PollsGroupsLinkHook{}

	AddPollsGroupsLinkHook(boil.AfterUpsertHook, pollsGroupsLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsGroupsLinkAfterUpsertHooks = []PollsGroupsLinkHook{}
}

func testPollsGroupsLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsGroupsLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsGroupsLinkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsGroupsLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsGroupsLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsGroupsLinkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsGroupsLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsGroupsLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsGroupsLinkDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `LinkID`: `int8`, `PollGroupID`: `int8`, `PollGroupLinkID`: `int8`, `UserAccountID`: `int8`}
	_                      = bytes.MinRead
)

func testPollsGroupsLinksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsGroupsLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsGroupsLinkColumns) == len(pollsGroupsLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsGroupsLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsGroupsLinkColumns) == len(pollsGroupsLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsGroupsLink{}
	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsGroupsLinkDBTypes, true, pollsGroupsLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsGroupsLinkColumns, pollsGroupsLinkPrimaryKeyColumns) {
		fields = pollsGroupsLinkColumns
	} else {
		fields = strmangle.SetComplement(
			pollsGroupsLinkColumns,
			pollsGroupsLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsGroupsLinkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsGroupsLinksUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsGroupsLinkColumns) == len(pollsGroupsLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsGroupsLink{}
	if err = randomize.Struct(seed, &o, pollsGroupsLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsGroupsLink: %s", err)
	}

	count, err := PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsGroupsLinkDBTypes, false, pollsGroupsLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsGroupsLink struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsGroupsLink: %s", err)
	}

	count, err = PollsGroupsLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
