// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Position is an object representing the database table.
type Position struct {
	PositionID          int64      `boil:"position_id" json:"position_id" toml:"position_id" yaml:"position_id"`
	ParentPositionID    null.Int64 `boil:"parent_position_id" json:"parent_position_id,omitempty" toml:"parent_position_id" yaml:"parent_position_id,omitempty"`
	PositionDescription string     `boil:"position_description" json:"position_description" toml:"position_description" yaml:"position_description"`
	UserAccountID       int64      `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	DesignPatternID     null.Int64 `boil:"design_pattern_id" json:"design_pattern_id,omitempty" toml:"design_pattern_id" yaml:"design_pattern_id,omitempty"`
	EmojiID             null.Int64 `boil:"emoji_id" json:"emoji_id,omitempty" toml:"emoji_id" yaml:"emoji_id,omitempty"`
	CreatedAt           time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *positionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L positionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PositionColumns = struct {
	PositionID          string
	ParentPositionID    string
	PositionDescription string
	UserAccountID       string
	DesignPatternID     string
	EmojiID             string
	CreatedAt           string
}{
	PositionID:          "position_id",
	ParentPositionID:    "parent_position_id",
	PositionDescription: "position_description",
	UserAccountID:       "user_account_id",
	DesignPatternID:     "design_pattern_id",
	EmojiID:             "emoji_id",
	CreatedAt:           "created_at",
}

// PositionRels is where relationship names are stored.
var PositionRels = struct {
	UserAccount     string
	Emoji           string
	DesignPattern   string
	FactorPositions string
}{
	UserAccount:     "UserAccount",
	Emoji:           "Emoji",
	DesignPattern:   "DesignPattern",
	FactorPositions: "FactorPositions",
}

// positionR is where relationships are stored.
type positionR struct {
	UserAccount     *UserAccount
	Emoji           *Emoji
	DesignPattern   *DesignPattern
	FactorPositions FactorPositionSlice
}

// NewStruct creates a new relationship struct
func (*positionR) NewStruct() *positionR {
	return &positionR{}
}

// positionL is where Load methods for each relationship are stored.
type positionL struct{}

var (
	positionColumns               = []string{"position_id", "parent_position_id", "position_description", "user_account_id", "design_pattern_id", "emoji_id", "created_at"}
	positionColumnsWithoutDefault = []string{"position_id", "parent_position_id", "position_description", "user_account_id", "design_pattern_id", "emoji_id", "created_at"}
	positionColumnsWithDefault    = []string{}
	positionPrimaryKeyColumns     = []string{"position_id"}
)

type (
	// PositionSlice is an alias for a slice of pointers to Position.
	// This should generally be used opposed to []Position.
	PositionSlice []*Position
	// PositionHook is the signature for custom Position hook methods
	PositionHook func(context.Context, boil.ContextExecutor, *Position) error

	positionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	positionType                 = reflect.TypeOf(&Position{})
	positionMapping              = queries.MakeStructMapping(positionType)
	positionPrimaryKeyMapping, _ = queries.BindMapping(positionType, positionMapping, positionPrimaryKeyColumns)
	positionInsertCacheMut       sync.RWMutex
	positionInsertCache          = make(map[string]insertCache)
	positionUpdateCacheMut       sync.RWMutex
	positionUpdateCache          = make(map[string]updateCache)
	positionUpsertCacheMut       sync.RWMutex
	positionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var positionBeforeInsertHooks []PositionHook
var positionBeforeUpdateHooks []PositionHook
var positionBeforeDeleteHooks []PositionHook
var positionBeforeUpsertHooks []PositionHook

var positionAfterInsertHooks []PositionHook
var positionAfterSelectHooks []PositionHook
var positionAfterUpdateHooks []PositionHook
var positionAfterDeleteHooks []PositionHook
var positionAfterUpsertHooks []PositionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Position) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Position) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Position) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Position) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Position) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Position) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Position) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Position) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Position) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range positionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPositionHook registers your hook function for all future operations.
func AddPositionHook(hookPoint boil.HookPoint, positionHook PositionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		positionBeforeInsertHooks = append(positionBeforeInsertHooks, positionHook)
	case boil.BeforeUpdateHook:
		positionBeforeUpdateHooks = append(positionBeforeUpdateHooks, positionHook)
	case boil.BeforeDeleteHook:
		positionBeforeDeleteHooks = append(positionBeforeDeleteHooks, positionHook)
	case boil.BeforeUpsertHook:
		positionBeforeUpsertHooks = append(positionBeforeUpsertHooks, positionHook)
	case boil.AfterInsertHook:
		positionAfterInsertHooks = append(positionAfterInsertHooks, positionHook)
	case boil.AfterSelectHook:
		positionAfterSelectHooks = append(positionAfterSelectHooks, positionHook)
	case boil.AfterUpdateHook:
		positionAfterUpdateHooks = append(positionAfterUpdateHooks, positionHook)
	case boil.AfterDeleteHook:
		positionAfterDeleteHooks = append(positionAfterDeleteHooks, positionHook)
	case boil.AfterUpsertHook:
		positionAfterUpsertHooks = append(positionAfterUpsertHooks, positionHook)
	}
}

// One returns a single position record from the query.
func (q positionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Position, error) {
	o := &Position{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for positions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Position records from the query.
func (q positionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PositionSlice, error) {
	var o []*Position

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Position slice")
	}

	if len(positionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Position records in the query.
func (q positionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count positions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q positionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if positions exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *Position) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Emoji pointed to by the foreign key.
func (o *Position) Emoji(mods ...qm.QueryMod) emojiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("emoji_id=?", o.EmojiID),
	}

	queryMods = append(queryMods, mods...)

	query := Emojis(queryMods...)
	queries.SetFrom(query.Query, "\"emoji\"")

	return query
}

// DesignPattern pointed to by the foreign key.
func (o *Position) DesignPattern(mods ...qm.QueryMod) designPatternQuery {
	queryMods := []qm.QueryMod{
		qm.Where("design_pattern_id=?", o.DesignPatternID),
	}

	queryMods = append(queryMods, mods...)

	query := DesignPatterns(queryMods...)
	queries.SetFrom(query.Query, "\"design_patterns\"")

	return query
}

// FactorPositions retrieves all the factor_position's FactorPositions with an executor.
func (o *Position) FactorPositions(mods ...qm.QueryMod) factorPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"factor_positions\".\"position_id\"=?", o.PositionID),
	)

	query := FactorPositions(queryMods...)
	queries.SetFrom(query.Query, "\"factor_positions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"factor_positions\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (positionL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePosition interface{}, mods queries.Applicator) error {
	var slice []*Position
	var object *Position

	if singular {
		object = maybePosition.(*Position)
	} else {
		slice = *maybePosition.(*[]*Position)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &positionR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &positionR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(positionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Positions = append(foreign.R.Positions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Positions = append(foreign.R.Positions, local)
				break
			}
		}
	}

	return nil
}

// LoadEmoji allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (positionL) LoadEmoji(ctx context.Context, e boil.ContextExecutor, singular bool, maybePosition interface{}, mods queries.Applicator) error {
	var slice []*Position
	var object *Position

	if singular {
		object = maybePosition.(*Position)
	} else {
		slice = *maybePosition.(*[]*Position)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &positionR{}
		}
		args = append(args, object.EmojiID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &positionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EmojiID) {
					continue Outer
				}
			}

			args = append(args, obj.EmojiID)
		}
	}

	query := NewQuery(qm.From(`emoji`), qm.WhereIn(`emoji_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Emoji")
	}

	var resultSlice []*Emoji
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Emoji")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for emoji")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for emoji")
	}

	if len(positionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Emoji = foreign
		if foreign.R == nil {
			foreign.R = &emojiR{}
		}
		foreign.R.Positions = append(foreign.R.Positions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EmojiID, foreign.EmojiID) {
				local.R.Emoji = foreign
				if foreign.R == nil {
					foreign.R = &emojiR{}
				}
				foreign.R.Positions = append(foreign.R.Positions, local)
				break
			}
		}
	}

	return nil
}

// LoadDesignPattern allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (positionL) LoadDesignPattern(ctx context.Context, e boil.ContextExecutor, singular bool, maybePosition interface{}, mods queries.Applicator) error {
	var slice []*Position
	var object *Position

	if singular {
		object = maybePosition.(*Position)
	} else {
		slice = *maybePosition.(*[]*Position)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &positionR{}
		}
		args = append(args, object.DesignPatternID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &positionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DesignPatternID) {
					continue Outer
				}
			}

			args = append(args, obj.DesignPatternID)
		}
	}

	query := NewQuery(qm.From(`design_patterns`), qm.WhereIn(`design_pattern_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DesignPattern")
	}

	var resultSlice []*DesignPattern
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DesignPattern")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for design_patterns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for design_patterns")
	}

	if len(positionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DesignPattern = foreign
		if foreign.R == nil {
			foreign.R = &designPatternR{}
		}
		foreign.R.Positions = append(foreign.R.Positions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DesignPatternID, foreign.DesignPatternID) {
				local.R.DesignPattern = foreign
				if foreign.R == nil {
					foreign.R = &designPatternR{}
				}
				foreign.R.Positions = append(foreign.R.Positions, local)
				break
			}
		}
	}

	return nil
}

// LoadFactorPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (positionL) LoadFactorPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePosition interface{}, mods queries.Applicator) error {
	var slice []*Position
	var object *Position

	if singular {
		object = maybePosition.(*Position)
	} else {
		slice = *maybePosition.(*[]*Position)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &positionR{}
		}
		args = append(args, object.PositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &positionR{}
			}

			for _, a := range args {
				if a == obj.PositionID {
					continue Outer
				}
			}

			args = append(args, obj.PositionID)
		}
	}

	query := NewQuery(qm.From(`factor_positions`), qm.WhereIn(`position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load factor_positions")
	}

	var resultSlice []*FactorPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice factor_positions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on factor_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factor_positions")
	}

	if len(factorPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FactorPositions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &factorPositionR{}
			}
			foreign.R.Position = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PositionID == foreign.PositionID {
				local.R.FactorPositions = append(local.R.FactorPositions, foreign)
				if foreign.R == nil {
					foreign.R = &factorPositionR{}
				}
				foreign.R.Position = local
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the position to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Positions.
func (o *Position) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, positionPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.PositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &positionR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Positions: PositionSlice{o},
		}
	} else {
		related.R.Positions = append(related.R.Positions, o)
	}

	return nil
}

// SetEmoji of the position to the related item.
// Sets o.R.Emoji to related.
// Adds o to related.R.Positions.
func (o *Position) SetEmoji(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Emoji) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"emoji_id"}),
		strmangle.WhereClause("\"", "\"", 2, positionPrimaryKeyColumns),
	)
	values := []interface{}{related.EmojiID, o.PositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EmojiID, related.EmojiID)
	if o.R == nil {
		o.R = &positionR{
			Emoji: related,
		}
	} else {
		o.R.Emoji = related
	}

	if related.R == nil {
		related.R = &emojiR{
			Positions: PositionSlice{o},
		}
	} else {
		related.R.Positions = append(related.R.Positions, o)
	}

	return nil
}

// RemoveEmoji relationship.
// Sets o.R.Emoji to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Position) RemoveEmoji(ctx context.Context, exec boil.ContextExecutor, related *Emoji) error {
	var err error

	queries.SetScanner(&o.EmojiID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("emoji_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Emoji = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Positions {
		if queries.Equal(o.EmojiID, ri.EmojiID) {
			continue
		}

		ln := len(related.R.Positions)
		if ln > 1 && i < ln-1 {
			related.R.Positions[i] = related.R.Positions[ln-1]
		}
		related.R.Positions = related.R.Positions[:ln-1]
		break
	}
	return nil
}

// SetDesignPattern of the position to the related item.
// Sets o.R.DesignPattern to related.
// Adds o to related.R.Positions.
func (o *Position) SetDesignPattern(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DesignPattern) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"design_pattern_id"}),
		strmangle.WhereClause("\"", "\"", 2, positionPrimaryKeyColumns),
	)
	values := []interface{}{related.DesignPatternID, o.PositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DesignPatternID, related.DesignPatternID)
	if o.R == nil {
		o.R = &positionR{
			DesignPattern: related,
		}
	} else {
		o.R.DesignPattern = related
	}

	if related.R == nil {
		related.R = &designPatternR{
			Positions: PositionSlice{o},
		}
	} else {
		related.R.Positions = append(related.R.Positions, o)
	}

	return nil
}

// RemoveDesignPattern relationship.
// Sets o.R.DesignPattern to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Position) RemoveDesignPattern(ctx context.Context, exec boil.ContextExecutor, related *DesignPattern) error {
	var err error

	queries.SetScanner(&o.DesignPatternID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("design_pattern_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.DesignPattern = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Positions {
		if queries.Equal(o.DesignPatternID, ri.DesignPatternID) {
			continue
		}

		ln := len(related.R.Positions)
		if ln > 1 && i < ln-1 {
			related.R.Positions[i] = related.R.Positions[ln-1]
		}
		related.R.Positions = related.R.Positions[:ln-1]
		break
	}
	return nil
}

// AddFactorPositions adds the given related objects to the existing relationships
// of the position, optionally inserting them as new records.
// Appends related to o.R.FactorPositions.
// Sets related.R.Position appropriately.
func (o *Position) AddFactorPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FactorPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PositionID = o.PositionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"factor_positions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"position_id"}),
				strmangle.WhereClause("\"", "\"", 2, factorPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.PositionID, rel.FactorPositionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PositionID = o.PositionID
		}
	}

	if o.R == nil {
		o.R = &positionR{
			FactorPositions: related,
		}
	} else {
		o.R.FactorPositions = append(o.R.FactorPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &factorPositionR{
				Position: o,
			}
		} else {
			rel.R.Position = o
		}
	}
	return nil
}

// Positions retrieves all the records using an executor.
func Positions(mods ...qm.QueryMod) positionQuery {
	mods = append(mods, qm.From("\"positions\""))
	return positionQuery{NewQuery(mods...)}
}

// FindPosition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPosition(ctx context.Context, exec boil.ContextExecutor, positionID int64, selectCols ...string) (*Position, error) {
	positionObj := &Position{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"positions\" where \"position_id\"=$1", sel,
	)

	q := queries.Raw(query, positionID)

	err := q.Bind(ctx, exec, positionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from positions")
	}

	return positionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Position) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no positions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(positionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	positionInsertCacheMut.RLock()
	cache, cached := positionInsertCache[key]
	positionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			positionColumns,
			positionColumnsWithDefault,
			positionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(positionType, positionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(positionType, positionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"positions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"positions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into positions")
	}

	if !cached {
		positionInsertCacheMut.Lock()
		positionInsertCache[key] = cache
		positionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Position.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Position) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	positionUpdateCacheMut.RLock()
	cache, cached := positionUpdateCache[key]
	positionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			positionColumns,
			positionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update positions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"positions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, positionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(positionType, positionMapping, append(wl, positionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update positions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for positions")
	}

	if !cached {
		positionUpdateCacheMut.Lock()
		positionUpdateCache[key] = cache
		positionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q positionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for positions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PositionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), positionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, positionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in position slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all position")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Position) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no positions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(positionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	positionUpsertCacheMut.RLock()
	cache, cached := positionUpsertCache[key]
	positionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			positionColumns,
			positionColumnsWithDefault,
			positionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			positionColumns,
			positionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert positions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(positionPrimaryKeyColumns))
			copy(conflict, positionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"positions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(positionType, positionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(positionType, positionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert positions")
	}

	if !cached {
		positionUpsertCacheMut.Lock()
		positionUpsertCache[key] = cache
		positionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Position record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Position) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Position provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), positionPrimaryKeyMapping)
	sql := "DELETE FROM \"positions\" WHERE \"position_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for positions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q positionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no positionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for positions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PositionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Position slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(positionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), positionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, positionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from position slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for positions")
	}

	if len(positionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Position) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPosition(ctx, exec, o.PositionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PositionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PositionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), positionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"positions\".* FROM \"positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, positionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PositionSlice")
	}

	*o = slice

	return nil
}

// PositionExists checks if the Position row exists.
func PositionExists(ctx context.Context, exec boil.ContextExecutor, positionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"positions\" where \"position_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, positionID)
	}

	row := exec.QueryRowContext(ctx, sql, positionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if positions exists")
	}

	return exists, nil
}
