// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsDimensionsDirections(t *testing.T) {
	t.Parallel()

	query := PollsDimensionsDirections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsDimensionsDirectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsDimensionsDirectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsDimensionsDirections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsDimensionsDirectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsDimensionsDirectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsDimensionsDirectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsDimensionsDirectionExists(ctx, tx, o.PollDimensionDirectionID)
	if err != nil {
		t.Errorf("Unable to check if PollsDimensionsDirection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsDimensionsDirectionExists to return true, but got false.")
	}
}

func testPollsDimensionsDirectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsDimensionsDirectionFound, err := FindPollsDimensionsDirection(ctx, tx, o.PollDimensionDirectionID)
	if err != nil {
		t.Error(err)
	}

	if pollsDimensionsDirectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsDimensionsDirectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsDimensionsDirections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsDimensionsDirectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsDimensionsDirections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsDimensionsDirectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsDimensionsDirectionOne := &PollsDimensionsDirection{}
	pollsDimensionsDirectionTwo := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, pollsDimensionsDirectionOne, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsDimensionsDirectionTwo, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsDimensionsDirectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsDimensionsDirectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsDimensionsDirections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsDimensionsDirectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsDimensionsDirectionOne := &PollsDimensionsDirection{}
	pollsDimensionsDirectionTwo := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, pollsDimensionsDirectionOne, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsDimensionsDirectionTwo, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsDimensionsDirectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsDimensionsDirectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsDimensionsDirectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func pollsDimensionsDirectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsDimensionsDirection) error {
	*o = PollsDimensionsDirection{}
	return nil
}

func testPollsDimensionsDirectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsDimensionsDirection{}
	o := &PollsDimensionsDirection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection object: %s", err)
	}

	AddPollsDimensionsDirectionHook(boil.BeforeInsertHook, pollsDimensionsDirectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionBeforeInsertHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.AfterInsertHook, pollsDimensionsDirectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionAfterInsertHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.AfterSelectHook, pollsDimensionsDirectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionAfterSelectHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.BeforeUpdateHook, pollsDimensionsDirectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionBeforeUpdateHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.AfterUpdateHook, pollsDimensionsDirectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionAfterUpdateHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.BeforeDeleteHook, pollsDimensionsDirectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionBeforeDeleteHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.AfterDeleteHook, pollsDimensionsDirectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionAfterDeleteHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.BeforeUpsertHook, pollsDimensionsDirectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionBeforeUpsertHooks = []PollsDimensionsDirectionHook{}

	AddPollsDimensionsDirectionHook(boil.AfterUpsertHook, pollsDimensionsDirectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsDimensionsDirectionAfterUpsertHooks = []PollsDimensionsDirectionHook{}
}

func testPollsDimensionsDirectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsDimensionsDirectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsDimensionsDirectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsDimensionsDirectionToManyZPollDimensionDirectionVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ZPollDimensionDirectionID = a.PollDimensionDirectionID
	c.ZPollDimensionDirectionID = a.PollDimensionDirectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.ZPollDimensionDirectionVotes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.ZPollDimensionDirectionID == b.ZPollDimensionDirectionID {
			bFound = true
		}
		if v.ZPollDimensionDirectionID == c.ZPollDimensionDirectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsDimensionsDirectionSlice{&a}
	if err = a.L.LoadZPollDimensionDirectionVotes(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ZPollDimensionDirectionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ZPollDimensionDirectionVotes = nil
	if err = a.L.LoadZPollDimensionDirectionVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ZPollDimensionDirectionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollsDimensionsDirectionToManyYPollDimensionDirectionVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.YPollDimensionDirectionID = a.PollDimensionDirectionID
	c.YPollDimensionDirectionID = a.PollDimensionDirectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.YPollDimensionDirectionVotes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.YPollDimensionDirectionID == b.YPollDimensionDirectionID {
			bFound = true
		}
		if v.YPollDimensionDirectionID == c.YPollDimensionDirectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsDimensionsDirectionSlice{&a}
	if err = a.L.LoadYPollDimensionDirectionVotes(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.YPollDimensionDirectionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.YPollDimensionDirectionVotes = nil
	if err = a.L.LoadYPollDimensionDirectionVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.YPollDimensionDirectionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollsDimensionsDirectionToManyXPollDimensionDirectionVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.XPollDimensionDirectionID = a.PollDimensionDirectionID
	c.XPollDimensionDirectionID = a.PollDimensionDirectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.XPollDimensionDirectionVotes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.XPollDimensionDirectionID == b.XPollDimensionDirectionID {
			bFound = true
		}
		if v.XPollDimensionDirectionID == c.XPollDimensionDirectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsDimensionsDirectionSlice{&a}
	if err = a.L.LoadXPollDimensionDirectionVotes(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XPollDimensionDirectionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XPollDimensionDirectionVotes = nil
	if err = a.L.LoadXPollDimensionDirectionVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XPollDimensionDirectionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollsDimensionsDirectionToManyAddOpZPollDimensionDirectionVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddZPollDimensionDirectionVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollDimensionDirectionID != first.ZPollDimensionDirectionID {
			t.Error("foreign key was wrong value", a.PollDimensionDirectionID, first.ZPollDimensionDirectionID)
		}
		if a.PollDimensionDirectionID != second.ZPollDimensionDirectionID {
			t.Error("foreign key was wrong value", a.PollDimensionDirectionID, second.ZPollDimensionDirectionID)
		}

		if first.R.ZPollDimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ZPollDimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ZPollDimensionDirectionVotes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ZPollDimensionDirectionVotes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ZPollDimensionDirectionVotes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsDimensionsDirectionToManyAddOpYPollDimensionDirectionVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddYPollDimensionDirectionVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollDimensionDirectionID != first.YPollDimensionDirectionID {
			t.Error("foreign key was wrong value", a.PollDimensionDirectionID, first.YPollDimensionDirectionID)
		}
		if a.PollDimensionDirectionID != second.YPollDimensionDirectionID {
			t.Error("foreign key was wrong value", a.PollDimensionDirectionID, second.YPollDimensionDirectionID)
		}

		if first.R.YPollDimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.YPollDimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.YPollDimensionDirectionVotes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.YPollDimensionDirectionVotes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.YPollDimensionDirectionVotes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsDimensionsDirectionToManyAddOpXPollDimensionDirectionVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXPollDimensionDirectionVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollDimensionDirectionID != first.XPollDimensionDirectionID {
			t.Error("foreign key was wrong value", a.PollDimensionDirectionID, first.XPollDimensionDirectionID)
		}
		if a.PollDimensionDirectionID != second.XPollDimensionDirectionID {
			t.Error("foreign key was wrong value", a.PollDimensionDirectionID, second.XPollDimensionDirectionID)
		}

		if first.R.XPollDimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.XPollDimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XPollDimensionDirectionVotes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XPollDimensionDirectionVotes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XPollDimensionDirectionVotes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsDimensionsDirectionToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsDimensionsDirection
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.ParentPollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ParentPollID != foreign.ParentPollID {
		t.Errorf("want: %v, got %v", foreign.ParentPollID, check.ParentPollID)
	}

	slice := PollsDimensionsDirectionSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsDimensionsDirectionToOneDimensionDirectionUsingDimensionDirection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsDimensionsDirection
	var foreign DimensionDirection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DimensionDirectionID = foreign.DimensionDirectionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DimensionDirection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DimensionDirectionID != foreign.DimensionDirectionID {
		t.Errorf("want: %v, got %v", foreign.DimensionDirectionID, check.DimensionDirectionID)
	}

	slice := PollsDimensionsDirectionSlice{&local}
	if err = local.L.LoadDimensionDirection(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DimensionDirection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DimensionDirection = nil
	if err = local.L.LoadDimensionDirection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DimensionDirection == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsDimensionsDirectionToOneEmojiUsingEmoji(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsDimensionsDirection
	var foreign Emoji

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, emojiDBTypes, false, emojiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Emoji struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.EmojiID, foreign.EmojiID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Emoji().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.EmojiID, foreign.EmojiID) {
		t.Errorf("want: %v, got %v", foreign.EmojiID, check.EmojiID)
	}

	slice := PollsDimensionsDirectionSlice{&local}
	if err = local.L.LoadEmoji(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Emoji == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Emoji = nil
	if err = local.L.LoadEmoji(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Emoji == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsDimensionsDirectionToOneDesignPatternUsingDesignPattern(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsDimensionsDirection
	var foreign DesignPattern

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, designPatternDBTypes, false, designPatternColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DesignPattern struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DesignPatternID, foreign.DesignPatternID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DesignPattern().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.DesignPatternID, foreign.DesignPatternID) {
		t.Errorf("want: %v, got %v", foreign.DesignPatternID, check.DesignPatternID)
	}

	slice := PollsDimensionsDirectionSlice{&local}
	if err = local.L.LoadDesignPattern(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DesignPattern == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DesignPattern = nil
	if err = local.L.LoadDesignPattern(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DesignPattern == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsDimensionsDirectionToOneColorUsingColor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsDimensionsDirection
	var foreign Color

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, colorDBTypes, false, colorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Color struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ColorID = foreign.ColorID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Color().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ColorID != foreign.ColorID {
		t.Errorf("want: %v, got %v", foreign.ColorID, check.ColorID)
	}

	slice := PollsDimensionsDirectionSlice{&local}
	if err = local.L.LoadColor(ctx, tx, false, (*[]*PollsDimensionsDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Color == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Color = nil
	if err = local.L.LoadColor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Color == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsDimensionsDirectionToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsDimensionsDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID, x.ParentPollID)
		}
	}
}
func testPollsDimensionsDirectionToOneSetOpDimensionDirectionUsingDimensionDirection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c DimensionDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DimensionDirection{&b, &c} {
		err = a.SetDimensionDirection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DimensionDirection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsDimensionsDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DimensionDirectionID != x.DimensionDirectionID {
			t.Error("foreign key was wrong value", a.DimensionDirectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DimensionDirectionID))
		reflect.Indirect(reflect.ValueOf(&a.DimensionDirectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DimensionDirectionID != x.DimensionDirectionID {
			t.Error("foreign key was wrong value", a.DimensionDirectionID, x.DimensionDirectionID)
		}
	}
}
func testPollsDimensionsDirectionToOneSetOpEmojiUsingEmoji(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c Emoji

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Emoji{&b, &c} {
		err = a.SetEmoji(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Emoji != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsDimensionsDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.EmojiID, x.EmojiID) {
			t.Error("foreign key was wrong value", a.EmojiID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EmojiID))
		reflect.Indirect(reflect.ValueOf(&a.EmojiID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.EmojiID, x.EmojiID) {
			t.Error("foreign key was wrong value", a.EmojiID, x.EmojiID)
		}
	}
}

func testPollsDimensionsDirectionToOneRemoveOpEmojiUsingEmoji(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b Emoji

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetEmoji(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveEmoji(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Emoji().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Emoji != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.EmojiID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PollsDimensionsDirections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPollsDimensionsDirectionToOneSetOpDesignPatternUsingDesignPattern(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c DesignPattern

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DesignPattern{&b, &c} {
		err = a.SetDesignPattern(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DesignPattern != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsDimensionsDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DesignPatternID, x.DesignPatternID) {
			t.Error("foreign key was wrong value", a.DesignPatternID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DesignPatternID))
		reflect.Indirect(reflect.ValueOf(&a.DesignPatternID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DesignPatternID, x.DesignPatternID) {
			t.Error("foreign key was wrong value", a.DesignPatternID, x.DesignPatternID)
		}
	}
}

func testPollsDimensionsDirectionToOneRemoveOpDesignPatternUsingDesignPattern(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b DesignPattern

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDesignPattern(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDesignPattern(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DesignPattern().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DesignPattern != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DesignPatternID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PollsDimensionsDirections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPollsDimensionsDirectionToOneSetOpColorUsingColor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsDimensionsDirection
	var b, c Color

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, colorDBTypes, false, strmangle.SetComplement(colorPrimaryKeyColumns, colorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, colorDBTypes, false, strmangle.SetComplement(colorPrimaryKeyColumns, colorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Color{&b, &c} {
		err = a.SetColor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Color != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsDimensionsDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ColorID != x.ColorID {
			t.Error("foreign key was wrong value", a.ColorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ColorID))
		reflect.Indirect(reflect.ValueOf(&a.ColorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ColorID != x.ColorID {
			t.Error("foreign key was wrong value", a.ColorID, x.ColorID)
		}
	}
}

func testPollsDimensionsDirectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsDimensionsDirectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsDimensionsDirectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsDimensionsDirectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsDimensionsDirections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsDimensionsDirectionDBTypes = map[string]string{`ColorID`: `int8`, `DesignPatternID`: `int8`, `DimensionCoordinateAxis`: `varchar`, `DimensionDirectionID`: `int8`, `DirectionOrientation`: `bool`, `EmojiID`: `int8`, `PollDimensionDirectionID`: `int8`, `PollID`: `int8`}
	_                               = bytes.MinRead
)

func testPollsDimensionsDirectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsDimensionsDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsDimensionsDirectionColumns) == len(pollsDimensionsDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsDimensionsDirectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsDimensionsDirectionColumns) == len(pollsDimensionsDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsDimensionsDirection{}
	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsDimensionsDirectionDBTypes, true, pollsDimensionsDirectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsDimensionsDirectionColumns, pollsDimensionsDirectionPrimaryKeyColumns) {
		fields = pollsDimensionsDirectionColumns
	} else {
		fields = strmangle.SetComplement(
			pollsDimensionsDirectionColumns,
			pollsDimensionsDirectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsDimensionsDirectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsDimensionsDirectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsDimensionsDirectionColumns) == len(pollsDimensionsDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsDimensionsDirection{}
	if err = randomize.Struct(seed, &o, pollsDimensionsDirectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsDimensionsDirection: %s", err)
	}

	count, err := PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsDimensionsDirection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsDimensionsDirection: %s", err)
	}

	count, err = PollsDimensionsDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
