// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EthnicGroup is an object representing the database table.
type EthnicGroup struct {
	EthnicGroupID   int64  `boil:"ethnic_group_id" json:"ethnic_group_id" toml:"ethnic_group_id" yaml:"ethnic_group_id"`
	EthnicGroupCode string `boil:"ethnic_group_code" json:"ethnic_group_code" toml:"ethnic_group_code" yaml:"ethnic_group_code"`
	EthnicGroupName string `boil:"ethnic_group_name" json:"ethnic_group_name" toml:"ethnic_group_name" yaml:"ethnic_group_name"`

	R *ethnicGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ethnicGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EthnicGroupColumns = struct {
	EthnicGroupID   string
	EthnicGroupCode string
	EthnicGroupName string
}{
	EthnicGroupID:   "ethnic_group_id",
	EthnicGroupCode: "ethnic_group_code",
	EthnicGroupName: "ethnic_group_name",
}

// EthnicGroupRels is where relationship names are stored.
var EthnicGroupRels = struct {
	EthnicGroupCountries string
	EthnicSubgroups      string
}{
	EthnicGroupCountries: "EthnicGroupCountries",
	EthnicSubgroups:      "EthnicSubgroups",
}

// ethnicGroupR is where relationships are stored.
type ethnicGroupR struct {
	EthnicGroupCountries EthnicGroupCountrySlice
	EthnicSubgroups      EthnicSubgroupSlice
}

// NewStruct creates a new relationship struct
func (*ethnicGroupR) NewStruct() *ethnicGroupR {
	return &ethnicGroupR{}
}

// ethnicGroupL is where Load methods for each relationship are stored.
type ethnicGroupL struct{}

var (
	ethnicGroupColumns               = []string{"ethnic_group_id", "ethnic_group_code", "ethnic_group_name"}
	ethnicGroupColumnsWithoutDefault = []string{"ethnic_group_id", "ethnic_group_code", "ethnic_group_name"}
	ethnicGroupColumnsWithDefault    = []string{}
	ethnicGroupPrimaryKeyColumns     = []string{"ethnic_group_id"}
)

type (
	// EthnicGroupSlice is an alias for a slice of pointers to EthnicGroup.
	// This should generally be used opposed to []EthnicGroup.
	EthnicGroupSlice []*EthnicGroup
	// EthnicGroupHook is the signature for custom EthnicGroup hook methods
	EthnicGroupHook func(context.Context, boil.ContextExecutor, *EthnicGroup) error

	ethnicGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ethnicGroupType                 = reflect.TypeOf(&EthnicGroup{})
	ethnicGroupMapping              = queries.MakeStructMapping(ethnicGroupType)
	ethnicGroupPrimaryKeyMapping, _ = queries.BindMapping(ethnicGroupType, ethnicGroupMapping, ethnicGroupPrimaryKeyColumns)
	ethnicGroupInsertCacheMut       sync.RWMutex
	ethnicGroupInsertCache          = make(map[string]insertCache)
	ethnicGroupUpdateCacheMut       sync.RWMutex
	ethnicGroupUpdateCache          = make(map[string]updateCache)
	ethnicGroupUpsertCacheMut       sync.RWMutex
	ethnicGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var ethnicGroupBeforeInsertHooks []EthnicGroupHook
var ethnicGroupBeforeUpdateHooks []EthnicGroupHook
var ethnicGroupBeforeDeleteHooks []EthnicGroupHook
var ethnicGroupBeforeUpsertHooks []EthnicGroupHook

var ethnicGroupAfterInsertHooks []EthnicGroupHook
var ethnicGroupAfterSelectHooks []EthnicGroupHook
var ethnicGroupAfterUpdateHooks []EthnicGroupHook
var ethnicGroupAfterDeleteHooks []EthnicGroupHook
var ethnicGroupAfterUpsertHooks []EthnicGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EthnicGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EthnicGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EthnicGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EthnicGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EthnicGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EthnicGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EthnicGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EthnicGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EthnicGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEthnicGroupHook registers your hook function for all future operations.
func AddEthnicGroupHook(hookPoint boil.HookPoint, ethnicGroupHook EthnicGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ethnicGroupBeforeInsertHooks = append(ethnicGroupBeforeInsertHooks, ethnicGroupHook)
	case boil.BeforeUpdateHook:
		ethnicGroupBeforeUpdateHooks = append(ethnicGroupBeforeUpdateHooks, ethnicGroupHook)
	case boil.BeforeDeleteHook:
		ethnicGroupBeforeDeleteHooks = append(ethnicGroupBeforeDeleteHooks, ethnicGroupHook)
	case boil.BeforeUpsertHook:
		ethnicGroupBeforeUpsertHooks = append(ethnicGroupBeforeUpsertHooks, ethnicGroupHook)
	case boil.AfterInsertHook:
		ethnicGroupAfterInsertHooks = append(ethnicGroupAfterInsertHooks, ethnicGroupHook)
	case boil.AfterSelectHook:
		ethnicGroupAfterSelectHooks = append(ethnicGroupAfterSelectHooks, ethnicGroupHook)
	case boil.AfterUpdateHook:
		ethnicGroupAfterUpdateHooks = append(ethnicGroupAfterUpdateHooks, ethnicGroupHook)
	case boil.AfterDeleteHook:
		ethnicGroupAfterDeleteHooks = append(ethnicGroupAfterDeleteHooks, ethnicGroupHook)
	case boil.AfterUpsertHook:
		ethnicGroupAfterUpsertHooks = append(ethnicGroupAfterUpsertHooks, ethnicGroupHook)
	}
}

// One returns a single ethnicGroup record from the query.
func (q ethnicGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EthnicGroup, error) {
	o := &EthnicGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ethnic_group")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EthnicGroup records from the query.
func (q ethnicGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (EthnicGroupSlice, error) {
	var o []*EthnicGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EthnicGroup slice")
	}

	if len(ethnicGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EthnicGroup records in the query.
func (q ethnicGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ethnic_group rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ethnicGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ethnic_group exists")
	}

	return count > 0, nil
}

// EthnicGroupCountries retrieves all the ethnic_group_country's EthnicGroupCountries with an executor.
func (o *EthnicGroup) EthnicGroupCountries(mods ...qm.QueryMod) ethnicGroupCountryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ethnic_group_country\".\"ethnic_group_id\"=?", o.EthnicGroupID),
	)

	query := EthnicGroupCountries(queryMods...)
	queries.SetFrom(query.Query, "\"ethnic_group_country\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ethnic_group_country\".*"})
	}

	return query
}

// EthnicSubgroups retrieves all the ethnic_subgroup's EthnicSubgroups with an executor.
func (o *EthnicGroup) EthnicSubgroups(mods ...qm.QueryMod) ethnicSubgroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ethnic_subgroup\".\"ethnic_group_id\"=?", o.EthnicGroupID),
	)

	query := EthnicSubgroups(queryMods...)
	queries.SetFrom(query.Query, "\"ethnic_subgroup\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ethnic_subgroup\".*"})
	}

	return query
}

// LoadEthnicGroupCountries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ethnicGroupL) LoadEthnicGroupCountries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEthnicGroup interface{}, mods queries.Applicator) error {
	var slice []*EthnicGroup
	var object *EthnicGroup

	if singular {
		object = maybeEthnicGroup.(*EthnicGroup)
	} else {
		slice = *maybeEthnicGroup.(*[]*EthnicGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ethnicGroupR{}
		}
		args = append(args, object.EthnicGroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ethnicGroupR{}
			}

			for _, a := range args {
				if a == obj.EthnicGroupID {
					continue Outer
				}
			}

			args = append(args, obj.EthnicGroupID)
		}
	}

	query := NewQuery(qm.From(`ethnic_group_country`), qm.WhereIn(`ethnic_group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ethnic_group_country")
	}

	var resultSlice []*EthnicGroupCountry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ethnic_group_country")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ethnic_group_country")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ethnic_group_country")
	}

	if len(ethnicGroupCountryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EthnicGroupCountries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ethnicGroupCountryR{}
			}
			foreign.R.EthnicGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EthnicGroupID == foreign.EthnicGroupID {
				local.R.EthnicGroupCountries = append(local.R.EthnicGroupCountries, foreign)
				if foreign.R == nil {
					foreign.R = &ethnicGroupCountryR{}
				}
				foreign.R.EthnicGroup = local
				break
			}
		}
	}

	return nil
}

// LoadEthnicSubgroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ethnicGroupL) LoadEthnicSubgroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEthnicGroup interface{}, mods queries.Applicator) error {
	var slice []*EthnicGroup
	var object *EthnicGroup

	if singular {
		object = maybeEthnicGroup.(*EthnicGroup)
	} else {
		slice = *maybeEthnicGroup.(*[]*EthnicGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ethnicGroupR{}
		}
		args = append(args, object.EthnicGroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ethnicGroupR{}
			}

			for _, a := range args {
				if a == obj.EthnicGroupID {
					continue Outer
				}
			}

			args = append(args, obj.EthnicGroupID)
		}
	}

	query := NewQuery(qm.From(`ethnic_subgroup`), qm.WhereIn(`ethnic_group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ethnic_subgroup")
	}

	var resultSlice []*EthnicSubgroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ethnic_subgroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ethnic_subgroup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ethnic_subgroup")
	}

	if len(ethnicSubgroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EthnicSubgroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ethnicSubgroupR{}
			}
			foreign.R.EthnicGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EthnicGroupID == foreign.EthnicGroupID {
				local.R.EthnicSubgroups = append(local.R.EthnicSubgroups, foreign)
				if foreign.R == nil {
					foreign.R = &ethnicSubgroupR{}
				}
				foreign.R.EthnicGroup = local
				break
			}
		}
	}

	return nil
}

// AddEthnicGroupCountries adds the given related objects to the existing relationships
// of the ethnic_group, optionally inserting them as new records.
// Appends related to o.R.EthnicGroupCountries.
// Sets related.R.EthnicGroup appropriately.
func (o *EthnicGroup) AddEthnicGroupCountries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EthnicGroupCountry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EthnicGroupID = o.EthnicGroupID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ethnic_group_country\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ethnic_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, ethnicGroupCountryPrimaryKeyColumns),
			)
			values := []interface{}{o.EthnicGroupID, rel.EthnicGroupCountryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EthnicGroupID = o.EthnicGroupID
		}
	}

	if o.R == nil {
		o.R = &ethnicGroupR{
			EthnicGroupCountries: related,
		}
	} else {
		o.R.EthnicGroupCountries = append(o.R.EthnicGroupCountries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ethnicGroupCountryR{
				EthnicGroup: o,
			}
		} else {
			rel.R.EthnicGroup = o
		}
	}
	return nil
}

// AddEthnicSubgroups adds the given related objects to the existing relationships
// of the ethnic_group, optionally inserting them as new records.
// Appends related to o.R.EthnicSubgroups.
// Sets related.R.EthnicGroup appropriately.
func (o *EthnicGroup) AddEthnicSubgroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EthnicSubgroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EthnicGroupID = o.EthnicGroupID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ethnic_subgroup\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ethnic_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, ethnicSubgroupPrimaryKeyColumns),
			)
			values := []interface{}{o.EthnicGroupID, rel.EthnicSubgroupID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EthnicGroupID = o.EthnicGroupID
		}
	}

	if o.R == nil {
		o.R = &ethnicGroupR{
			EthnicSubgroups: related,
		}
	} else {
		o.R.EthnicSubgroups = append(o.R.EthnicSubgroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ethnicSubgroupR{
				EthnicGroup: o,
			}
		} else {
			rel.R.EthnicGroup = o
		}
	}
	return nil
}

// EthnicGroups retrieves all the records using an executor.
func EthnicGroups(mods ...qm.QueryMod) ethnicGroupQuery {
	mods = append(mods, qm.From("\"ethnic_group\""))
	return ethnicGroupQuery{NewQuery(mods...)}
}

// FindEthnicGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEthnicGroup(ctx context.Context, exec boil.ContextExecutor, ethnicGroupID int64, selectCols ...string) (*EthnicGroup, error) {
	ethnicGroupObj := &EthnicGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ethnic_group\" where \"ethnic_group_id\"=$1", sel,
	)

	q := queries.Raw(query, ethnicGroupID)

	err := q.Bind(ctx, exec, ethnicGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ethnic_group")
	}

	return ethnicGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EthnicGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ethnic_group provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ethnicGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ethnicGroupInsertCacheMut.RLock()
	cache, cached := ethnicGroupInsertCache[key]
	ethnicGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ethnicGroupColumns,
			ethnicGroupColumnsWithDefault,
			ethnicGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ethnicGroupType, ethnicGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ethnicGroupType, ethnicGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ethnic_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ethnic_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ethnic_group")
	}

	if !cached {
		ethnicGroupInsertCacheMut.Lock()
		ethnicGroupInsertCache[key] = cache
		ethnicGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EthnicGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EthnicGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ethnicGroupUpdateCacheMut.RLock()
	cache, cached := ethnicGroupUpdateCache[key]
	ethnicGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ethnicGroupColumns,
			ethnicGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ethnic_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ethnic_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ethnicGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ethnicGroupType, ethnicGroupMapping, append(wl, ethnicGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ethnic_group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ethnic_group")
	}

	if !cached {
		ethnicGroupUpdateCacheMut.Lock()
		ethnicGroupUpdateCache[key] = cache
		ethnicGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ethnicGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ethnic_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ethnic_group")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EthnicGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ethnic_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ethnicGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ethnicGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ethnicGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EthnicGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ethnic_group provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ethnicGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ethnicGroupUpsertCacheMut.RLock()
	cache, cached := ethnicGroupUpsertCache[key]
	ethnicGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ethnicGroupColumns,
			ethnicGroupColumnsWithDefault,
			ethnicGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ethnicGroupColumns,
			ethnicGroupPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ethnic_group, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ethnicGroupPrimaryKeyColumns))
			copy(conflict, ethnicGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"ethnic_group\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ethnicGroupType, ethnicGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ethnicGroupType, ethnicGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ethnic_group")
	}

	if !cached {
		ethnicGroupUpsertCacheMut.Lock()
		ethnicGroupUpsertCache[key] = cache
		ethnicGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EthnicGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EthnicGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EthnicGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ethnicGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"ethnic_group\" WHERE \"ethnic_group_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ethnic_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ethnic_group")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ethnicGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ethnicGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ethnic_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ethnic_group")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EthnicGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EthnicGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(ethnicGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ethnic_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ethnicGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ethnicGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ethnic_group")
	}

	if len(ethnicGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EthnicGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEthnicGroup(ctx, exec, o.EthnicGroupID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EthnicGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EthnicGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ethnic_group\".* FROM \"ethnic_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ethnicGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EthnicGroupSlice")
	}

	*o = slice

	return nil
}

// EthnicGroupExists checks if the EthnicGroup row exists.
func EthnicGroupExists(ctx context.Context, exec boil.ContextExecutor, ethnicGroupID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ethnic_group\" where \"ethnic_group_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ethnicGroupID)
	}

	row := exec.QueryRowContext(ctx, sql, ethnicGroupID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ethnic_group exists")
	}

	return exists, nil
}
