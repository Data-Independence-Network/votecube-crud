// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsCounty is an object representing the database table.
type PollsCounty struct {
	PollCountyID int64 `boil:"poll_county_id" json:"poll_county_id" toml:"poll_county_id" yaml:"poll_county_id"`
	PollID       int64 `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	CountyID     int64 `boil:"county_id" json:"county_id" toml:"county_id" yaml:"county_id"`

	R *pollsCountyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsCountyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsCountyColumns = struct {
	PollCountyID string
	PollID       string
	CountyID     string
}{
	PollCountyID: "poll_county_id",
	PollID:       "poll_id",
	CountyID:     "county_id",
}

// PollsCountyRels is where relationship names are stored.
var PollsCountyRels = struct {
	Poll   string
	County string
}{
	Poll:   "Poll",
	County: "County",
}

// pollsCountyR is where relationships are stored.
type pollsCountyR struct {
	Poll   *Poll
	County *County
}

// NewStruct creates a new relationship struct
func (*pollsCountyR) NewStruct() *pollsCountyR {
	return &pollsCountyR{}
}

// pollsCountyL is where Load methods for each relationship are stored.
type pollsCountyL struct{}

var (
	pollsCountyColumns               = []string{"poll_county_id", "poll_id", "county_id"}
	pollsCountyColumnsWithoutDefault = []string{"poll_county_id", "poll_id", "county_id"}
	pollsCountyColumnsWithDefault    = []string{}
	pollsCountyPrimaryKeyColumns     = []string{"poll_county_id"}
)

type (
	// PollsCountySlice is an alias for a slice of pointers to PollsCounty.
	// This should generally be used opposed to []PollsCounty.
	PollsCountySlice []*PollsCounty
	// PollsCountyHook is the signature for custom PollsCounty hook methods
	PollsCountyHook func(context.Context, boil.ContextExecutor, *PollsCounty) error

	pollsCountyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsCountyType                 = reflect.TypeOf(&PollsCounty{})
	pollsCountyMapping              = queries.MakeStructMapping(pollsCountyType)
	pollsCountyPrimaryKeyMapping, _ = queries.BindMapping(pollsCountyType, pollsCountyMapping, pollsCountyPrimaryKeyColumns)
	pollsCountyInsertCacheMut       sync.RWMutex
	pollsCountyInsertCache          = make(map[string]insertCache)
	pollsCountyUpdateCacheMut       sync.RWMutex
	pollsCountyUpdateCache          = make(map[string]updateCache)
	pollsCountyUpsertCacheMut       sync.RWMutex
	pollsCountyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsCountyBeforeInsertHooks []PollsCountyHook
var pollsCountyBeforeUpdateHooks []PollsCountyHook
var pollsCountyBeforeDeleteHooks []PollsCountyHook
var pollsCountyBeforeUpsertHooks []PollsCountyHook

var pollsCountyAfterInsertHooks []PollsCountyHook
var pollsCountyAfterSelectHooks []PollsCountyHook
var pollsCountyAfterUpdateHooks []PollsCountyHook
var pollsCountyAfterDeleteHooks []PollsCountyHook
var pollsCountyAfterUpsertHooks []PollsCountyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsCounty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsCounty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsCounty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsCounty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsCounty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsCounty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsCounty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsCounty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsCounty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsCountyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsCountyHook registers your hook function for all future operations.
func AddPollsCountyHook(hookPoint boil.HookPoint, pollsCountyHook PollsCountyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsCountyBeforeInsertHooks = append(pollsCountyBeforeInsertHooks, pollsCountyHook)
	case boil.BeforeUpdateHook:
		pollsCountyBeforeUpdateHooks = append(pollsCountyBeforeUpdateHooks, pollsCountyHook)
	case boil.BeforeDeleteHook:
		pollsCountyBeforeDeleteHooks = append(pollsCountyBeforeDeleteHooks, pollsCountyHook)
	case boil.BeforeUpsertHook:
		pollsCountyBeforeUpsertHooks = append(pollsCountyBeforeUpsertHooks, pollsCountyHook)
	case boil.AfterInsertHook:
		pollsCountyAfterInsertHooks = append(pollsCountyAfterInsertHooks, pollsCountyHook)
	case boil.AfterSelectHook:
		pollsCountyAfterSelectHooks = append(pollsCountyAfterSelectHooks, pollsCountyHook)
	case boil.AfterUpdateHook:
		pollsCountyAfterUpdateHooks = append(pollsCountyAfterUpdateHooks, pollsCountyHook)
	case boil.AfterDeleteHook:
		pollsCountyAfterDeleteHooks = append(pollsCountyAfterDeleteHooks, pollsCountyHook)
	case boil.AfterUpsertHook:
		pollsCountyAfterUpsertHooks = append(pollsCountyAfterUpsertHooks, pollsCountyHook)
	}
}

// One returns a single pollsCounty record from the query.
func (q pollsCountyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsCounty, error) {
	o := &PollsCounty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_county")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PollsCounty records from the query.
func (q pollsCountyQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsCountySlice, error) {
	var o []*PollsCounty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsCounty slice")
	}

	if len(pollsCountyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PollsCounty records in the query.
func (q pollsCountyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_county rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pollsCountyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_county exists")
	}

	return count > 0, nil
}

// Poll pointed to by the foreign key.
func (o *PollsCounty) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// County pointed to by the foreign key.
func (o *PollsCounty) County(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("county_id=?", o.CountyID),
	}

	queryMods = append(queryMods, mods...)

	query := Counties(queryMods...)
	queries.SetFrom(query.Query, "\"county\"")

	return query
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsCountyL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsCounty interface{}, mods queries.Applicator) error {
	var slice []*PollsCounty
	var object *PollsCounty

	if singular {
		object = maybePollsCounty.(*PollsCounty)
	} else {
		slice = *maybePollsCounty.(*[]*PollsCounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsCountyR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsCountyR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsCountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsCounties = append(foreign.R.PollsCounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.PollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsCounties = append(foreign.R.PollsCounties, local)
				break
			}
		}
	}

	return nil
}

// LoadCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsCountyL) LoadCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsCounty interface{}, mods queries.Applicator) error {
	var slice []*PollsCounty
	var object *PollsCounty

	if singular {
		object = maybePollsCounty.(*PollsCounty)
	} else {
		slice = *maybePollsCounty.(*[]*PollsCounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsCountyR{}
		}
		args = append(args, object.CountyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsCountyR{}
			}

			for _, a := range args {
				if a == obj.CountyID {
					continue Outer
				}
			}

			args = append(args, obj.CountyID)
		}
	}

	query := NewQuery(qm.From(`county`), qm.WhereIn(`county_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(pollsCountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.County = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.PollsCounties = append(foreign.R.PollsCounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountyID == foreign.CountyID {
				local.R.County = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.PollsCounties = append(foreign.R.PollsCounties, local)
				break
			}
		}
	}

	return nil
}

// SetPoll of the pollsCounty to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsCounties.
func (o *PollsCounty) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsCountyPrimaryKeyColumns),
	)
	values := []interface{}{related.PollID, o.PollCountyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.PollID
	if o.R == nil {
		o.R = &pollsCountyR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsCounties: PollsCountySlice{o},
		}
	} else {
		related.R.PollsCounties = append(related.R.PollsCounties, o)
	}

	return nil
}

// SetCounty of the pollsCounty to the related item.
// Sets o.R.County to related.
// Adds o to related.R.PollsCounties.
func (o *PollsCounty) SetCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsCountyPrimaryKeyColumns),
	)
	values := []interface{}{related.CountyID, o.PollCountyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountyID = related.CountyID
	if o.R == nil {
		o.R = &pollsCountyR{
			County: related,
		}
	} else {
		o.R.County = related
	}

	if related.R == nil {
		related.R = &countyR{
			PollsCounties: PollsCountySlice{o},
		}
	} else {
		related.R.PollsCounties = append(related.R.PollsCounties, o)
	}

	return nil
}

// PollsCounties retrieves all the records using an executor.
func PollsCounties(mods ...qm.QueryMod) pollsCountyQuery {
	mods = append(mods, qm.From("\"polls_county\""))
	return pollsCountyQuery{NewQuery(mods...)}
}

// FindPollsCounty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsCounty(ctx context.Context, exec boil.ContextExecutor, pollCountyID int64, selectCols ...string) (*PollsCounty, error) {
	pollsCountyObj := &PollsCounty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_county\" where \"poll_county_id\"=$1", sel,
	)

	q := queries.Raw(query, pollCountyID)

	err := q.Bind(ctx, exec, pollsCountyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_county")
	}

	return pollsCountyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsCounty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_county provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsCountyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsCountyInsertCacheMut.RLock()
	cache, cached := pollsCountyInsertCache[key]
	pollsCountyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsCountyColumns,
			pollsCountyColumnsWithDefault,
			pollsCountyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsCountyType, pollsCountyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsCountyType, pollsCountyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_county\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_county\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_county")
	}

	if !cached {
		pollsCountyInsertCacheMut.Lock()
		pollsCountyInsertCache[key] = cache
		pollsCountyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PollsCounty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsCounty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsCountyUpdateCacheMut.RLock()
	cache, cached := pollsCountyUpdateCache[key]
	pollsCountyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsCountyColumns,
			pollsCountyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_county, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_county\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsCountyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsCountyType, pollsCountyMapping, append(wl, pollsCountyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_county row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_county")
	}

	if !cached {
		pollsCountyUpdateCacheMut.Lock()
		pollsCountyUpdateCache[key] = cache
		pollsCountyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsCountyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_county")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsCountySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsCountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsCountyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsCounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsCounty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsCounty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_county provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsCountyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsCountyUpsertCacheMut.RLock()
	cache, cached := pollsCountyUpsertCache[key]
	pollsCountyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsCountyColumns,
			pollsCountyColumnsWithDefault,
			pollsCountyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsCountyColumns,
			pollsCountyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_county, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsCountyPrimaryKeyColumns))
			copy(conflict, pollsCountyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_county\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsCountyType, pollsCountyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsCountyType, pollsCountyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_county")
	}

	if !cached {
		pollsCountyUpsertCacheMut.Lock()
		pollsCountyUpsertCache[key] = cache
		pollsCountyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PollsCounty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsCounty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsCounty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsCountyPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_county\" WHERE \"poll_county_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_county")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsCountyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsCountyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_county")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsCountySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsCounty slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsCountyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsCountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_county\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsCountyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsCounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_county")
	}

	if len(pollsCountyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsCounty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsCounty(ctx, exec, o.PollCountyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsCountySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsCountySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsCountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_county\".* FROM \"polls_county\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsCountyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsCountySlice")
	}

	*o = slice

	return nil
}

// PollsCountyExists checks if the PollsCounty row exists.
func PollsCountyExists(ctx context.Context, exec boil.ContextExecutor, pollCountyID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_county\" where \"poll_county_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollCountyID)
	}

	row := exec.QueryRowContext(ctx, sql, pollCountyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_county exists")
	}

	return exists, nil
}
