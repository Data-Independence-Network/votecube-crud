// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserAccountEthnicity is an object representing the database table.
type UserAccountEthnicity struct {
	UserAccountEthnicityID int64      `boil:"user_account_ethnicity_id" json:"user_account_ethnicity_id" toml:"user_account_ethnicity_id" yaml:"user_account_ethnicity_id"`
	UserAccountID          int64      `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	EthnicSubgroupID       int64      `boil:"ethnic_subgroup_id" json:"ethnic_subgroup_id" toml:"ethnic_subgroup_id" yaml:"ethnic_subgroup_id"`
	EthnicityPercent       null.Int16 `boil:"ethnicity_percent" json:"ethnicity_percent,omitempty" toml:"ethnicity_percent" yaml:"ethnicity_percent,omitempty"`

	R *userAccountEthnicityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAccountEthnicityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAccountEthnicityColumns = struct {
	UserAccountEthnicityID string
	UserAccountID          string
	EthnicSubgroupID       string
	EthnicityPercent       string
}{
	UserAccountEthnicityID: "user_account_ethnicity_id",
	UserAccountID:          "user_account_id",
	EthnicSubgroupID:       "ethnic_subgroup_id",
	EthnicityPercent:       "ethnicity_percent",
}

// UserAccountEthnicityRels is where relationship names are stored.
var UserAccountEthnicityRels = struct {
	UserAccount    string
	EthnicSubgroup string
}{
	UserAccount:    "UserAccount",
	EthnicSubgroup: "EthnicSubgroup",
}

// userAccountEthnicityR is where relationships are stored.
type userAccountEthnicityR struct {
	UserAccount    *UserAccount
	EthnicSubgroup *EthnicSubgroup
}

// NewStruct creates a new relationship struct
func (*userAccountEthnicityR) NewStruct() *userAccountEthnicityR {
	return &userAccountEthnicityR{}
}

// userAccountEthnicityL is where Load methods for each relationship are stored.
type userAccountEthnicityL struct{}

var (
	userAccountEthnicityColumns               = []string{"user_account_ethnicity_id", "user_account_id", "ethnic_subgroup_id", "ethnicity_percent"}
	userAccountEthnicityColumnsWithoutDefault = []string{"user_account_ethnicity_id", "user_account_id", "ethnic_subgroup_id", "ethnicity_percent"}
	userAccountEthnicityColumnsWithDefault    = []string{}
	userAccountEthnicityPrimaryKeyColumns     = []string{"user_account_ethnicity_id"}
)

type (
	// UserAccountEthnicitySlice is an alias for a slice of pointers to UserAccountEthnicity.
	// This should generally be used opposed to []UserAccountEthnicity.
	UserAccountEthnicitySlice []*UserAccountEthnicity
	// UserAccountEthnicityHook is the signature for custom UserAccountEthnicity hook methods
	UserAccountEthnicityHook func(context.Context, boil.ContextExecutor, *UserAccountEthnicity) error

	userAccountEthnicityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAccountEthnicityType                 = reflect.TypeOf(&UserAccountEthnicity{})
	userAccountEthnicityMapping              = queries.MakeStructMapping(userAccountEthnicityType)
	userAccountEthnicityPrimaryKeyMapping, _ = queries.BindMapping(userAccountEthnicityType, userAccountEthnicityMapping, userAccountEthnicityPrimaryKeyColumns)
	userAccountEthnicityInsertCacheMut       sync.RWMutex
	userAccountEthnicityInsertCache          = make(map[string]insertCache)
	userAccountEthnicityUpdateCacheMut       sync.RWMutex
	userAccountEthnicityUpdateCache          = make(map[string]updateCache)
	userAccountEthnicityUpsertCacheMut       sync.RWMutex
	userAccountEthnicityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userAccountEthnicityBeforeInsertHooks []UserAccountEthnicityHook
var userAccountEthnicityBeforeUpdateHooks []UserAccountEthnicityHook
var userAccountEthnicityBeforeDeleteHooks []UserAccountEthnicityHook
var userAccountEthnicityBeforeUpsertHooks []UserAccountEthnicityHook

var userAccountEthnicityAfterInsertHooks []UserAccountEthnicityHook
var userAccountEthnicityAfterSelectHooks []UserAccountEthnicityHook
var userAccountEthnicityAfterUpdateHooks []UserAccountEthnicityHook
var userAccountEthnicityAfterDeleteHooks []UserAccountEthnicityHook
var userAccountEthnicityAfterUpsertHooks []UserAccountEthnicityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAccountEthnicity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAccountEthnicity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAccountEthnicity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAccountEthnicity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAccountEthnicity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAccountEthnicity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAccountEthnicity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAccountEthnicity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAccountEthnicity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userAccountEthnicityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAccountEthnicityHook registers your hook function for all future operations.
func AddUserAccountEthnicityHook(hookPoint boil.HookPoint, userAccountEthnicityHook UserAccountEthnicityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userAccountEthnicityBeforeInsertHooks = append(userAccountEthnicityBeforeInsertHooks, userAccountEthnicityHook)
	case boil.BeforeUpdateHook:
		userAccountEthnicityBeforeUpdateHooks = append(userAccountEthnicityBeforeUpdateHooks, userAccountEthnicityHook)
	case boil.BeforeDeleteHook:
		userAccountEthnicityBeforeDeleteHooks = append(userAccountEthnicityBeforeDeleteHooks, userAccountEthnicityHook)
	case boil.BeforeUpsertHook:
		userAccountEthnicityBeforeUpsertHooks = append(userAccountEthnicityBeforeUpsertHooks, userAccountEthnicityHook)
	case boil.AfterInsertHook:
		userAccountEthnicityAfterInsertHooks = append(userAccountEthnicityAfterInsertHooks, userAccountEthnicityHook)
	case boil.AfterSelectHook:
		userAccountEthnicityAfterSelectHooks = append(userAccountEthnicityAfterSelectHooks, userAccountEthnicityHook)
	case boil.AfterUpdateHook:
		userAccountEthnicityAfterUpdateHooks = append(userAccountEthnicityAfterUpdateHooks, userAccountEthnicityHook)
	case boil.AfterDeleteHook:
		userAccountEthnicityAfterDeleteHooks = append(userAccountEthnicityAfterDeleteHooks, userAccountEthnicityHook)
	case boil.AfterUpsertHook:
		userAccountEthnicityAfterUpsertHooks = append(userAccountEthnicityAfterUpsertHooks, userAccountEthnicityHook)
	}
}

// One returns a single userAccountEthnicity record from the query.
func (q userAccountEthnicityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAccountEthnicity, error) {
	o := &UserAccountEthnicity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_account_ethnicity")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAccountEthnicity records from the query.
func (q userAccountEthnicityQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAccountEthnicitySlice, error) {
	var o []*UserAccountEthnicity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserAccountEthnicity slice")
	}

	if len(userAccountEthnicityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAccountEthnicity records in the query.
func (q userAccountEthnicityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_account_ethnicity rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAccountEthnicityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_account_ethnicity exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *UserAccountEthnicity) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// EthnicSubgroup pointed to by the foreign key.
func (o *UserAccountEthnicity) EthnicSubgroup(mods ...qm.QueryMod) ethnicSubgroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("ethnic_subgroup_id=?", o.EthnicSubgroupID),
	}

	queryMods = append(queryMods, mods...)

	query := EthnicSubgroups(queryMods...)
	queries.SetFrom(query.Query, "\"ethnic_subgroup\"")

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAccountEthnicityL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAccountEthnicity interface{}, mods queries.Applicator) error {
	var slice []*UserAccountEthnicity
	var object *UserAccountEthnicity

	if singular {
		object = maybeUserAccountEthnicity.(*UserAccountEthnicity)
	} else {
		slice = *maybeUserAccountEthnicity.(*[]*UserAccountEthnicity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountEthnicityR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountEthnicityR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(userAccountEthnicityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.UserAccountEthnicities = append(foreign.R.UserAccountEthnicities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.UserAccountEthnicities = append(foreign.R.UserAccountEthnicities, local)
				break
			}
		}
	}

	return nil
}

// LoadEthnicSubgroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAccountEthnicityL) LoadEthnicSubgroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAccountEthnicity interface{}, mods queries.Applicator) error {
	var slice []*UserAccountEthnicity
	var object *UserAccountEthnicity

	if singular {
		object = maybeUserAccountEthnicity.(*UserAccountEthnicity)
	} else {
		slice = *maybeUserAccountEthnicity.(*[]*UserAccountEthnicity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountEthnicityR{}
		}
		args = append(args, object.EthnicSubgroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountEthnicityR{}
			}

			for _, a := range args {
				if a == obj.EthnicSubgroupID {
					continue Outer
				}
			}

			args = append(args, obj.EthnicSubgroupID)
		}
	}

	query := NewQuery(qm.From(`ethnic_subgroup`), qm.WhereIn(`ethnic_subgroup_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EthnicSubgroup")
	}

	var resultSlice []*EthnicSubgroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EthnicSubgroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ethnic_subgroup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ethnic_subgroup")
	}

	if len(userAccountEthnicityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EthnicSubgroup = foreign
		if foreign.R == nil {
			foreign.R = &ethnicSubgroupR{}
		}
		foreign.R.UserAccountEthnicities = append(foreign.R.UserAccountEthnicities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EthnicSubgroupID == foreign.EthnicSubgroupID {
				local.R.EthnicSubgroup = foreign
				if foreign.R == nil {
					foreign.R = &ethnicSubgroupR{}
				}
				foreign.R.UserAccountEthnicities = append(foreign.R.UserAccountEthnicities, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the userAccountEthnicity to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.UserAccountEthnicities.
func (o *UserAccountEthnicity) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_account_ethnicity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAccountEthnicityPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.UserAccountEthnicityID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &userAccountEthnicityR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			UserAccountEthnicities: UserAccountEthnicitySlice{o},
		}
	} else {
		related.R.UserAccountEthnicities = append(related.R.UserAccountEthnicities, o)
	}

	return nil
}

// SetEthnicSubgroup of the userAccountEthnicity to the related item.
// Sets o.R.EthnicSubgroup to related.
// Adds o to related.R.UserAccountEthnicities.
func (o *UserAccountEthnicity) SetEthnicSubgroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *EthnicSubgroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_account_ethnicity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ethnic_subgroup_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAccountEthnicityPrimaryKeyColumns),
	)
	values := []interface{}{related.EthnicSubgroupID, o.UserAccountEthnicityID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EthnicSubgroupID = related.EthnicSubgroupID
	if o.R == nil {
		o.R = &userAccountEthnicityR{
			EthnicSubgroup: related,
		}
	} else {
		o.R.EthnicSubgroup = related
	}

	if related.R == nil {
		related.R = &ethnicSubgroupR{
			UserAccountEthnicities: UserAccountEthnicitySlice{o},
		}
	} else {
		related.R.UserAccountEthnicities = append(related.R.UserAccountEthnicities, o)
	}

	return nil
}

// UserAccountEthnicities retrieves all the records using an executor.
func UserAccountEthnicities(mods ...qm.QueryMod) userAccountEthnicityQuery {
	mods = append(mods, qm.From("\"user_account_ethnicity\""))
	return userAccountEthnicityQuery{NewQuery(mods...)}
}

// FindUserAccountEthnicity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAccountEthnicity(ctx context.Context, exec boil.ContextExecutor, userAccountEthnicityID int64, selectCols ...string) (*UserAccountEthnicity, error) {
	userAccountEthnicityObj := &UserAccountEthnicity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_account_ethnicity\" where \"user_account_ethnicity_id\"=$1", sel,
	)

	q := queries.Raw(query, userAccountEthnicityID)

	err := q.Bind(ctx, exec, userAccountEthnicityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_account_ethnicity")
	}

	return userAccountEthnicityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAccountEthnicity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_account_ethnicity provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountEthnicityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAccountEthnicityInsertCacheMut.RLock()
	cache, cached := userAccountEthnicityInsertCache[key]
	userAccountEthnicityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAccountEthnicityColumns,
			userAccountEthnicityColumnsWithDefault,
			userAccountEthnicityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAccountEthnicityType, userAccountEthnicityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAccountEthnicityType, userAccountEthnicityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_account_ethnicity\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_account_ethnicity\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_account_ethnicity")
	}

	if !cached {
		userAccountEthnicityInsertCacheMut.Lock()
		userAccountEthnicityInsertCache[key] = cache
		userAccountEthnicityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserAccountEthnicity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAccountEthnicity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAccountEthnicityUpdateCacheMut.RLock()
	cache, cached := userAccountEthnicityUpdateCache[key]
	userAccountEthnicityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAccountEthnicityColumns,
			userAccountEthnicityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_account_ethnicity, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_account_ethnicity\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAccountEthnicityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAccountEthnicityType, userAccountEthnicityMapping, append(wl, userAccountEthnicityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_account_ethnicity row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_account_ethnicity")
	}

	if !cached {
		userAccountEthnicityUpdateCacheMut.Lock()
		userAccountEthnicityUpdateCache[key] = cache
		userAccountEthnicityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAccountEthnicityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_account_ethnicity")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_account_ethnicity")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAccountEthnicitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountEthnicityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_account_ethnicity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAccountEthnicityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userAccountEthnicity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userAccountEthnicity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAccountEthnicity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_account_ethnicity provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountEthnicityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAccountEthnicityUpsertCacheMut.RLock()
	cache, cached := userAccountEthnicityUpsertCache[key]
	userAccountEthnicityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAccountEthnicityColumns,
			userAccountEthnicityColumnsWithDefault,
			userAccountEthnicityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAccountEthnicityColumns,
			userAccountEthnicityPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_account_ethnicity, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAccountEthnicityPrimaryKeyColumns))
			copy(conflict, userAccountEthnicityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"user_account_ethnicity\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAccountEthnicityType, userAccountEthnicityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAccountEthnicityType, userAccountEthnicityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_account_ethnicity")
	}

	if !cached {
		userAccountEthnicityUpsertCacheMut.Lock()
		userAccountEthnicityUpsertCache[key] = cache
		userAccountEthnicityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserAccountEthnicity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAccountEthnicity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserAccountEthnicity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAccountEthnicityPrimaryKeyMapping)
	sql := "DELETE FROM \"user_account_ethnicity\" WHERE \"user_account_ethnicity_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_account_ethnicity")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_account_ethnicity")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAccountEthnicityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userAccountEthnicityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_account_ethnicity")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_account_ethnicity")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAccountEthnicitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserAccountEthnicity slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userAccountEthnicityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountEthnicityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_account_ethnicity\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountEthnicityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userAccountEthnicity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_account_ethnicity")
	}

	if len(userAccountEthnicityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAccountEthnicity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAccountEthnicity(ctx, exec, o.UserAccountEthnicityID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAccountEthnicitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAccountEthnicitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountEthnicityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_account_ethnicity\".* FROM \"user_account_ethnicity\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountEthnicityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserAccountEthnicitySlice")
	}

	*o = slice

	return nil
}

// UserAccountEthnicityExists checks if the UserAccountEthnicity row exists.
func UserAccountEthnicityExists(ctx context.Context, exec boil.ContextExecutor, userAccountEthnicityID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_account_ethnicity\" where \"user_account_ethnicity_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userAccountEthnicityID)
	}

	row := exec.QueryRowContext(ctx, sql, userAccountEthnicityID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_account_ethnicity exists")
	}

	return exists, nil
}
