// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserAccounts(t *testing.T) {
	t.Parallel()

	query := UserAccounts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserAccountsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserAccounts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserAccountExists(ctx, tx, o.UserAccountID)
	if err != nil {
		t.Errorf("Unable to check if UserAccount exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAccountExists to return true, but got false.")
	}
}

func testUserAccountsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userAccountFound, err := FindUserAccount(ctx, tx, o.UserAccountID)
	if err != nil {
		t.Error(err)
	}

	if userAccountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserAccountsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserAccounts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserAccountsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserAccounts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAccountsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountOne := &UserAccount{}
	userAccountTwo := &UserAccount{}
	if err = randomize.Struct(seed, userAccountOne, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountTwo, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAccountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAccountOne := &UserAccount{}
	userAccountTwo := &UserAccount{}
	if err = randomize.Struct(seed, userAccountOne, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountTwo, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userAccountBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func testUserAccountsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserAccount{}
	o := &UserAccount{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAccountDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAccount object: %s", err)
	}

	AddUserAccountHook(boil.BeforeInsertHook, userAccountBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeInsertHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterInsertHook, userAccountAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAccountAfterInsertHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterSelectHook, userAccountAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAccountAfterSelectHooks = []UserAccountHook{}

	AddUserAccountHook(boil.BeforeUpdateHook, userAccountBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeUpdateHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterUpdateHook, userAccountAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountAfterUpdateHooks = []UserAccountHook{}

	AddUserAccountHook(boil.BeforeDeleteHook, userAccountBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeDeleteHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterDeleteHook, userAccountAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountAfterDeleteHooks = []UserAccountHook{}

	AddUserAccountHook(boil.BeforeUpsertHook, userAccountBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeUpsertHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterUpsertHook, userAccountAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountAfterUpsertHooks = []UserAccountHook{}
}

func testUserAccountsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userAccountColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountToManyDimensions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dimension, err := a.Dimensions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dimension {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadDimensions(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Dimensions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Dimensions = nil
	if err = a.L.LoadDimensions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Dimensions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dimension)
	}
}

func testUserAccountToManyDimensionsLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c DimensionsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dimensionsLinkDBTypes, false, dimensionsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionsLinkDBTypes, false, dimensionsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dimensionsLink, err := a.DimensionsLinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dimensionsLink {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadDimensionsLinks(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DimensionsLinks = nil
	if err = a.L.LoadDimensionsLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dimensionsLink)
	}
}

func testUserAccountToManyDirections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Direction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	direction, err := a.Directions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range direction {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadDirections(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Directions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Directions = nil
	if err = a.L.LoadDirections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Directions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", direction)
	}
}

func testUserAccountToManyEmailAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c EmailAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, emailAddressDBTypes, false, emailAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, emailAddressDBTypes, false, emailAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	emailAddress, err := a.EmailAddresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range emailAddress {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadEmailAddresses(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EmailAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EmailAddresses = nil
	if err = a.L.LoadEmailAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EmailAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", emailAddress)
	}
}

func testUserAccountToManyEmailDomains(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c EmailDomain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, emailDomainDBTypes, false, emailDomainColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, emailDomainDBTypes, false, emailDomainColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	emailDomain, err := a.EmailDomains().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range emailDomain {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadEmailDomains(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EmailDomains); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EmailDomains = nil
	if err = a.L.LoadEmailDomains(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EmailDomains); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", emailDomain)
	}
}

func testUserAccountToManyLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	label, err := a.Labels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range label {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadLabels(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Labels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Labels = nil
	if err = a.L.LoadLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Labels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", label)
	}
}

func testUserAccountToManyLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	link, err := a.Links().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range link {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadLinks(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Links); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Links = nil
	if err = a.L.LoadLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Links); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", link)
	}
}

func testUserAccountToManyMessages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Message

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, messageDBTypes, false, messageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, messageDBTypes, false, messageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	message, err := a.Messages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range message {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadMessages(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Messages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Messages = nil
	if err = a.L.LoadMessages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Messages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", message)
	}
}

func testUserAccountToManyPolls(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	poll, err := a.Polls().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range poll {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadPolls(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Polls); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Polls = nil
	if err = a.L.LoadPolls(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Polls); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", poll)
	}
}

func testUserAccountToManyPollsGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c PollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsGroupDBTypes, false, pollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsGroup, err := a.PollsGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsGroup {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadPollsGroups(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsGroups = nil
	if err = a.L.LoadPollsGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsGroup)
	}
}

func testUserAccountToManyPollsLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c PollsLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsLabelDBTypes, false, pollsLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsLabel, err := a.PollsLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsLabel {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadPollsLabels(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsLabels = nil
	if err = a.L.LoadPollsLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsLabel)
	}
}

func testUserAccountToManyPollsLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c PollsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsLinkDBTypes, false, pollsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsLinkDBTypes, false, pollsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsLink, err := a.PollsLinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsLink {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadPollsLinks(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsLinks = nil
	if err = a.L.LoadPollsLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsLink)
	}
}

func testUserAccountToManyPollsPollsGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c PollsPollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsPollsGroupDBTypes, false, pollsPollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsPollsGroupDBTypes, false, pollsPollsGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsPollsGroup, err := a.PollsPollsGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsPollsGroup {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadPollsPollsGroups(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsPollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsPollsGroups = nil
	if err = a.L.LoadPollsPollsGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsPollsGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsPollsGroup)
	}
}

func testUserAccountToManyUserAccountEthnicities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c UserAccountEthnicity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userAccountEthnicity, err := a.UserAccountEthnicities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userAccountEthnicity {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadUserAccountEthnicities(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccountEthnicities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserAccountEthnicities = nil
	if err = a.L.LoadUserAccountEthnicities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccountEthnicities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userAccountEthnicity)
	}
}

func testUserAccountToManyUserAccountSuffixes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c UserAccountSuffix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userAccountSuffix, err := a.UserAccountSuffixes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userAccountSuffix {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadUserAccountSuffixes(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccountSuffixes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserAccountSuffixes = nil
	if err = a.L.LoadUserAccountSuffixes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccountSuffixes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userAccountSuffix)
	}
}

func testUserAccountToManyUserPersonalInfos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c UserPersonalInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userPersonalInfo, err := a.UserPersonalInfos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userPersonalInfo {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadUserPersonalInfos(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserPersonalInfos = nil
	if err = a.L.LoadUserPersonalInfos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userPersonalInfo)
	}
}

func testUserAccountToManyVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserAccountID = a.UserAccountID
	c.UserAccountID = a.UserAccountID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.Votes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.UserAccountID == b.UserAccountID {
			bFound = true
		}
		if v.UserAccountID == c.UserAccountID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadVotes(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Votes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Votes = nil
	if err = a.L.LoadVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Votes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testUserAccountToManyAddOpDimensions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dimension{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dimension{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDimensions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Dimensions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Dimensions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Dimensions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpDimensionsLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e DimensionsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DimensionsLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionsLinkDBTypes, false, strmangle.SetComplement(dimensionsLinkPrimaryKeyColumns, dimensionsLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DimensionsLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDimensionsLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DimensionsLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DimensionsLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DimensionsLinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpDirections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Direction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Direction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Direction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDirections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Directions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Directions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Directions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpEmailAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e EmailAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EmailAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, emailAddressDBTypes, false, strmangle.SetComplement(emailAddressPrimaryKeyColumns, emailAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EmailAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEmailAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EmailAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EmailAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EmailAddresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpEmailDomains(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e EmailDomain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EmailDomain{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, emailDomainDBTypes, false, strmangle.SetComplement(emailDomainPrimaryKeyColumns, emailDomainColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EmailDomain{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEmailDomains(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EmailDomains[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EmailDomains[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EmailDomains().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Label{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Label{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Labels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Labels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Labels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Link{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Link{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Links[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Links[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Links().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpMessages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Message

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Message{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, messageDBTypes, false, strmangle.SetComplement(messagePrimaryKeyColumns, messageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Message{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMessages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Messages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Messages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Messages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpPolls(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Poll{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Poll{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPolls(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Polls[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Polls[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Polls().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpPollsGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e PollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsGroupDBTypes, false, strmangle.SetComplement(pollsGroupPrimaryKeyColumns, pollsGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpPollsLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e PollsLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsLabelDBTypes, false, strmangle.SetComplement(pollsLabelPrimaryKeyColumns, pollsLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpPollsLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e PollsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsLinkDBTypes, false, strmangle.SetComplement(pollsLinkPrimaryKeyColumns, pollsLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsLinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpPollsPollsGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e PollsPollsGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsPollsGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsPollsGroupDBTypes, false, strmangle.SetComplement(pollsPollsGroupPrimaryKeyColumns, pollsPollsGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsPollsGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsPollsGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsPollsGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsPollsGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsPollsGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpUserAccountEthnicities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e UserAccountEthnicity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAccountEthnicity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAccountEthnicityDBTypes, false, strmangle.SetComplement(userAccountEthnicityPrimaryKeyColumns, userAccountEthnicityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserAccountEthnicity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserAccountEthnicities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserAccountEthnicities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserAccountEthnicities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserAccountEthnicities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpUserAccountSuffixes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e UserAccountSuffix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAccountSuffix{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAccountSuffixDBTypes, false, strmangle.SetComplement(userAccountSuffixPrimaryKeyColumns, userAccountSuffixColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserAccountSuffix{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserAccountSuffixes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserAccountSuffixes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserAccountSuffixes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserAccountSuffixes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpUserPersonalInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e UserPersonalInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserPersonalInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserPersonalInfo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserPersonalInfos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserPersonalInfos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserPersonalInfos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserPersonalInfos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToManyAddOpVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserAccountID != first.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, first.UserAccountID)
		}
		if a.UserAccountID != second.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, second.UserAccountID)
		}

		if first.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Votes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Votes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Votes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserAccountToOnePrefixLastNameUsingPrefixLastName(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAccount
	var foreign PrefixLastName

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, prefixLastNameDBTypes, false, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefixLastNameID, foreign.PrefixLastNameID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PrefixLastName().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PrefixLastNameID, foreign.PrefixLastNameID) {
		t.Errorf("want: %v, got %v", foreign.PrefixLastNameID, check.PrefixLastNameID)
	}

	slice := UserAccountSlice{&local}
	if err = local.L.LoadPrefixLastName(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PrefixLastName == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PrefixLastName = nil
	if err = local.L.LoadPrefixLastName(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PrefixLastName == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountToOneNameAfterLastNameUsingNameAfterLastName(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAccount
	var foreign NameAfterLastName

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, nameAfterLastNameDBTypes, false, nameAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameAfterLastName struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.NameAfterLastNameID, foreign.NameAfterLastNameID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.NameAfterLastName().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.NameAfterLastNameID, foreign.NameAfterLastNameID) {
		t.Errorf("want: %v, got %v", foreign.NameAfterLastNameID, check.NameAfterLastNameID)
	}

	slice := UserAccountSlice{&local}
	if err = local.L.LoadNameAfterLastName(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NameAfterLastName == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.NameAfterLastName = nil
	if err = local.L.LoadNameAfterLastName(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NameAfterLastName == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountToOneSetOpPrefixLastNameUsingPrefixLastName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c PrefixLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, prefixLastNameDBTypes, false, strmangle.SetComplement(prefixLastNamePrimaryKeyColumns, prefixLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, prefixLastNameDBTypes, false, strmangle.SetComplement(prefixLastNamePrimaryKeyColumns, prefixLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PrefixLastName{&b, &c} {
		err = a.SetPrefixLastName(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PrefixLastName != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefixLastNameID, x.PrefixLastNameID) {
			t.Error("foreign key was wrong value", a.PrefixLastNameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefixLastNameID))
		reflect.Indirect(reflect.ValueOf(&a.PrefixLastNameID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefixLastNameID, x.PrefixLastNameID) {
			t.Error("foreign key was wrong value", a.PrefixLastNameID, x.PrefixLastNameID)
		}
	}
}

func testUserAccountToOneRemoveOpPrefixLastNameUsingPrefixLastName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b PrefixLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, prefixLastNameDBTypes, false, strmangle.SetComplement(prefixLastNamePrimaryKeyColumns, prefixLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPrefixLastName(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePrefixLastName(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PrefixLastName().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.PrefixLastName != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefixLastNameID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserAccounts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserAccountToOneSetOpNameAfterLastNameUsingNameAfterLastName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c NameAfterLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, nameAfterLastNameDBTypes, false, strmangle.SetComplement(nameAfterLastNamePrimaryKeyColumns, nameAfterLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, nameAfterLastNameDBTypes, false, strmangle.SetComplement(nameAfterLastNamePrimaryKeyColumns, nameAfterLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*NameAfterLastName{&b, &c} {
		err = a.SetNameAfterLastName(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.NameAfterLastName != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.NameAfterLastNameID, x.NameAfterLastNameID) {
			t.Error("foreign key was wrong value", a.NameAfterLastNameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.NameAfterLastNameID))
		reflect.Indirect(reflect.ValueOf(&a.NameAfterLastNameID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.NameAfterLastNameID, x.NameAfterLastNameID) {
			t.Error("foreign key was wrong value", a.NameAfterLastNameID, x.NameAfterLastNameID)
		}
	}
}

func testUserAccountToOneRemoveOpNameAfterLastNameUsingNameAfterLastName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b NameAfterLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, nameAfterLastNameDBTypes, false, strmangle.SetComplement(nameAfterLastNamePrimaryKeyColumns, nameAfterLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetNameAfterLastName(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveNameAfterLastName(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.NameAfterLastName().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.NameAfterLastName != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.NameAfterLastNameID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserAccounts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserAccountsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAccountDBTypes = map[string]string{`BirthDate`: `date`, `CreatedAt`: `timestamptz`, `FirstName`: `varchar`, `LastName`: `varchar`, `MiddleNameOrInitials`: `varchar`, `NameAfterLastNameID`: `int8`, `PrefixLastNameID`: `int8`, `UserAccountID`: `int8`, `UserName`: `varchar`}
	_                  = bytes.MinRead
)

func testUserAccountsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAccountColumns) == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserAccountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAccountColumns) == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAccountColumns, userAccountPrimaryKeyColumns) {
		fields = userAccountColumns
	} else {
		fields = strmangle.SetComplement(
			userAccountColumns,
			userAccountPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserAccountSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserAccountsUpsert(t *testing.T) {
	t.Parallel()

	if len(userAccountColumns) == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserAccount{}
	if err = randomize.Struct(seed, &o, userAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccount: %s", err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userAccountDBTypes, false, userAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccount: %s", err)
	}

	count, err = UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
