// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsFactorsPosition is an object representing the database table.
type PollsFactorsPosition struct {
	PollFactorPositionID int64      `boil:"poll_factor_position_id" json:"poll_factor_position_id" toml:"poll_factor_position_id" yaml:"poll_factor_position_id"`
	FactorPositionID     int64      `boil:"factor_position_id" json:"factor_position_id" toml:"factor_position_id" yaml:"factor_position_id"`
	PollID               int64      `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	FactorCoordinateAxis string     `boil:"factor_coordinate_axis" json:"factor_coordinate_axis" toml:"factor_coordinate_axis" yaml:"factor_coordinate_axis"`
	PositionOrientation  bool       `boil:"position_orientation" json:"position_orientation" toml:"position_orientation" yaml:"position_orientation"`
	ColorID              int64      `boil:"color_id" json:"color_id" toml:"color_id" yaml:"color_id"`
	DesignPatternID      null.Int64 `boil:"design_pattern_id" json:"design_pattern_id,omitempty" toml:"design_pattern_id" yaml:"design_pattern_id,omitempty"`
	EmojiID              null.Int64 `boil:"emoji_id" json:"emoji_id,omitempty" toml:"emoji_id" yaml:"emoji_id,omitempty"`

	R *pollsFactorsPositionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsFactorsPositionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsFactorsPositionColumns = struct {
	PollFactorPositionID string
	FactorPositionID     string
	PollID               string
	FactorCoordinateAxis string
	PositionOrientation  string
	ColorID              string
	DesignPatternID      string
	EmojiID              string
}{
	PollFactorPositionID: "poll_factor_position_id",
	FactorPositionID:     "factor_position_id",
	PollID:               "poll_id",
	FactorCoordinateAxis: "factor_coordinate_axis",
	PositionOrientation:  "position_orientation",
	ColorID:              "color_id",
	DesignPatternID:      "design_pattern_id",
	EmojiID:              "emoji_id",
}

// PollsFactorsPositionRels is where relationship names are stored.
var PollsFactorsPositionRels = struct {
	Poll                     string
	FactorPosition           string
	Emoji                    string
	DesignPattern            string
	Color                    string
	ZPollFactorPositionVotes string
	YPollFactorPositionVotes string
	XPollFactorPositionVotes string
}{
	Poll:                     "Poll",
	FactorPosition:           "FactorPosition",
	Emoji:                    "Emoji",
	DesignPattern:            "DesignPattern",
	Color:                    "Color",
	ZPollFactorPositionVotes: "ZPollFactorPositionVotes",
	YPollFactorPositionVotes: "YPollFactorPositionVotes",
	XPollFactorPositionVotes: "XPollFactorPositionVotes",
}

// pollsFactorsPositionR is where relationships are stored.
type pollsFactorsPositionR struct {
	Poll                     *Poll
	FactorPosition           *FactorPosition
	Emoji                    *Emoji
	DesignPattern            *DesignPattern
	Color                    *Color
	ZPollFactorPositionVotes VoteSlice
	YPollFactorPositionVotes VoteSlice
	XPollFactorPositionVotes VoteSlice
}

// NewStruct creates a new relationship struct
func (*pollsFactorsPositionR) NewStruct() *pollsFactorsPositionR {
	return &pollsFactorsPositionR{}
}

// pollsFactorsPositionL is where Load methods for each relationship are stored.
type pollsFactorsPositionL struct{}

var (
	pollsFactorsPositionColumns               = []string{"poll_factor_position_id", "factor_position_id", "poll_id", "factor_coordinate_axis", "position_orientation", "color_id", "design_pattern_id", "emoji_id"}
	pollsFactorsPositionColumnsWithoutDefault = []string{"poll_factor_position_id", "factor_position_id", "poll_id", "factor_coordinate_axis", "position_orientation", "color_id", "design_pattern_id", "emoji_id"}
	pollsFactorsPositionColumnsWithDefault    = []string{}
	pollsFactorsPositionPrimaryKeyColumns     = []string{"poll_factor_position_id"}
)

type (
	// PollsFactorsPositionSlice is an alias for a slice of pointers to PollsFactorsPosition.
	// This should generally be used opposed to []PollsFactorsPosition.
	PollsFactorsPositionSlice []*PollsFactorsPosition
	// PollsFactorsPositionHook is the signature for custom PollsFactorsPosition hook methods
	PollsFactorsPositionHook func(context.Context, boil.ContextExecutor, *PollsFactorsPosition) error

	pollsFactorsPositionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsFactorsPositionType                 = reflect.TypeOf(&PollsFactorsPosition{})
	pollsFactorsPositionMapping              = queries.MakeStructMapping(pollsFactorsPositionType)
	pollsFactorsPositionPrimaryKeyMapping, _ = queries.BindMapping(pollsFactorsPositionType, pollsFactorsPositionMapping, pollsFactorsPositionPrimaryKeyColumns)
	pollsFactorsPositionInsertCacheMut       sync.RWMutex
	pollsFactorsPositionInsertCache          = make(map[string]insertCache)
	pollsFactorsPositionUpdateCacheMut       sync.RWMutex
	pollsFactorsPositionUpdateCache          = make(map[string]updateCache)
	pollsFactorsPositionUpsertCacheMut       sync.RWMutex
	pollsFactorsPositionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsFactorsPositionBeforeInsertHooks []PollsFactorsPositionHook
var pollsFactorsPositionBeforeUpdateHooks []PollsFactorsPositionHook
var pollsFactorsPositionBeforeDeleteHooks []PollsFactorsPositionHook
var pollsFactorsPositionBeforeUpsertHooks []PollsFactorsPositionHook

var pollsFactorsPositionAfterInsertHooks []PollsFactorsPositionHook
var pollsFactorsPositionAfterSelectHooks []PollsFactorsPositionHook
var pollsFactorsPositionAfterUpdateHooks []PollsFactorsPositionHook
var pollsFactorsPositionAfterDeleteHooks []PollsFactorsPositionHook
var pollsFactorsPositionAfterUpsertHooks []PollsFactorsPositionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsFactorsPosition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsFactorsPosition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsFactorsPosition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsFactorsPosition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsFactorsPosition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsFactorsPosition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsFactorsPosition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsFactorsPosition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsFactorsPosition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsFactorsPositionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsFactorsPositionHook registers your hook function for all future operations.
func AddPollsFactorsPositionHook(hookPoint boil.HookPoint, pollsFactorsPositionHook PollsFactorsPositionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsFactorsPositionBeforeInsertHooks = append(pollsFactorsPositionBeforeInsertHooks, pollsFactorsPositionHook)
	case boil.BeforeUpdateHook:
		pollsFactorsPositionBeforeUpdateHooks = append(pollsFactorsPositionBeforeUpdateHooks, pollsFactorsPositionHook)
	case boil.BeforeDeleteHook:
		pollsFactorsPositionBeforeDeleteHooks = append(pollsFactorsPositionBeforeDeleteHooks, pollsFactorsPositionHook)
	case boil.BeforeUpsertHook:
		pollsFactorsPositionBeforeUpsertHooks = append(pollsFactorsPositionBeforeUpsertHooks, pollsFactorsPositionHook)
	case boil.AfterInsertHook:
		pollsFactorsPositionAfterInsertHooks = append(pollsFactorsPositionAfterInsertHooks, pollsFactorsPositionHook)
	case boil.AfterSelectHook:
		pollsFactorsPositionAfterSelectHooks = append(pollsFactorsPositionAfterSelectHooks, pollsFactorsPositionHook)
	case boil.AfterUpdateHook:
		pollsFactorsPositionAfterUpdateHooks = append(pollsFactorsPositionAfterUpdateHooks, pollsFactorsPositionHook)
	case boil.AfterDeleteHook:
		pollsFactorsPositionAfterDeleteHooks = append(pollsFactorsPositionAfterDeleteHooks, pollsFactorsPositionHook)
	case boil.AfterUpsertHook:
		pollsFactorsPositionAfterUpsertHooks = append(pollsFactorsPositionAfterUpsertHooks, pollsFactorsPositionHook)
	}
}

// One returns a single pollsFactorsPosition record from the query.
func (q pollsFactorsPositionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsFactorsPosition, error) {
	o := &PollsFactorsPosition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_factors_positions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PollsFactorsPosition records from the query.
func (q pollsFactorsPositionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsFactorsPositionSlice, error) {
	var o []*PollsFactorsPosition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsFactorsPosition slice")
	}

	if len(pollsFactorsPositionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PollsFactorsPosition records in the query.
func (q pollsFactorsPositionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_factors_positions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pollsFactorsPositionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_factors_positions exists")
	}

	return count > 0, nil
}

// Poll pointed to by the foreign key.
func (o *PollsFactorsPosition) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("parent_poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// FactorPosition pointed to by the foreign key.
func (o *PollsFactorsPosition) FactorPosition(mods ...qm.QueryMod) factorPositionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("factor_position_id=?", o.FactorPositionID),
	}

	queryMods = append(queryMods, mods...)

	query := FactorPositions(queryMods...)
	queries.SetFrom(query.Query, "\"factor_positions\"")

	return query
}

// Emoji pointed to by the foreign key.
func (o *PollsFactorsPosition) Emoji(mods ...qm.QueryMod) emojiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("emoji_id=?", o.EmojiID),
	}

	queryMods = append(queryMods, mods...)

	query := Emojis(queryMods...)
	queries.SetFrom(query.Query, "\"emoji\"")

	return query
}

// DesignPattern pointed to by the foreign key.
func (o *PollsFactorsPosition) DesignPattern(mods ...qm.QueryMod) designPatternQuery {
	queryMods := []qm.QueryMod{
		qm.Where("design_pattern_id=?", o.DesignPatternID),
	}

	queryMods = append(queryMods, mods...)

	query := DesignPatterns(queryMods...)
	queries.SetFrom(query.Query, "\"design_patterns\"")

	return query
}

// Color pointed to by the foreign key.
func (o *PollsFactorsPosition) Color(mods ...qm.QueryMod) colorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("color_id=?", o.ColorID),
	}

	queryMods = append(queryMods, mods...)

	query := Colors(queryMods...)
	queries.SetFrom(query.Query, "\"colors\"")

	return query
}

// ZPollFactorPositionVotes retrieves all the vote's Votes with an executor via z_poll_factor_position_id column.
func (o *PollsFactorsPosition) ZPollFactorPositionVotes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"z_poll_factor_position_id\"=?", o.PollFactorPositionID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// YPollFactorPositionVotes retrieves all the vote's Votes with an executor via y_poll_factor_position_id column.
func (o *PollsFactorsPosition) YPollFactorPositionVotes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"y_poll_factor_position_id\"=?", o.PollFactorPositionID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// XPollFactorPositionVotes retrieves all the vote's Votes with an executor via x_poll_factor_position_id column.
func (o *PollsFactorsPosition) XPollFactorPositionVotes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"x_poll_factor_position_id\"=?", o.PollFactorPositionID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsFactorsPositionL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`parent_poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsFactorsPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.ParentPollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, local)
				break
			}
		}
	}

	return nil
}

// LoadFactorPosition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsFactorsPositionL) LoadFactorPosition(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.FactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if a == obj.FactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.FactorPositionID)
		}
	}

	query := NewQuery(qm.From(`factor_positions`), qm.WhereIn(`factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FactorPosition")
	}

	var resultSlice []*FactorPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FactorPosition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factor_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factor_positions")
	}

	if len(pollsFactorsPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FactorPosition = foreign
		if foreign.R == nil {
			foreign.R = &factorPositionR{}
		}
		foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactorPositionID == foreign.FactorPositionID {
				local.R.FactorPosition = foreign
				if foreign.R == nil {
					foreign.R = &factorPositionR{}
				}
				foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, local)
				break
			}
		}
	}

	return nil
}

// LoadEmoji allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsFactorsPositionL) LoadEmoji(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.EmojiID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EmojiID) {
					continue Outer
				}
			}

			args = append(args, obj.EmojiID)
		}
	}

	query := NewQuery(qm.From(`emoji`), qm.WhereIn(`emoji_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Emoji")
	}

	var resultSlice []*Emoji
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Emoji")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for emoji")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for emoji")
	}

	if len(pollsFactorsPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Emoji = foreign
		if foreign.R == nil {
			foreign.R = &emojiR{}
		}
		foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EmojiID, foreign.EmojiID) {
				local.R.Emoji = foreign
				if foreign.R == nil {
					foreign.R = &emojiR{}
				}
				foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, local)
				break
			}
		}
	}

	return nil
}

// LoadDesignPattern allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsFactorsPositionL) LoadDesignPattern(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.DesignPatternID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DesignPatternID) {
					continue Outer
				}
			}

			args = append(args, obj.DesignPatternID)
		}
	}

	query := NewQuery(qm.From(`design_patterns`), qm.WhereIn(`design_pattern_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DesignPattern")
	}

	var resultSlice []*DesignPattern
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DesignPattern")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for design_patterns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for design_patterns")
	}

	if len(pollsFactorsPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DesignPattern = foreign
		if foreign.R == nil {
			foreign.R = &designPatternR{}
		}
		foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DesignPatternID, foreign.DesignPatternID) {
				local.R.DesignPattern = foreign
				if foreign.R == nil {
					foreign.R = &designPatternR{}
				}
				foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, local)
				break
			}
		}
	}

	return nil
}

// LoadColor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsFactorsPositionL) LoadColor(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.ColorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if a == obj.ColorID {
					continue Outer
				}
			}

			args = append(args, obj.ColorID)
		}
	}

	query := NewQuery(qm.From(`colors`), qm.WhereIn(`color_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Color")
	}

	var resultSlice []*Color
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Color")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for colors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for colors")
	}

	if len(pollsFactorsPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Color = foreign
		if foreign.R == nil {
			foreign.R = &colorR{}
		}
		foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ColorID == foreign.ColorID {
				local.R.Color = foreign
				if foreign.R == nil {
					foreign.R = &colorR{}
				}
				foreign.R.PollsFactorsPositions = append(foreign.R.PollsFactorsPositions, local)
				break
			}
		}
	}

	return nil
}

// LoadZPollFactorPositionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsFactorsPositionL) LoadZPollFactorPositionVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.PollFactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if a == obj.PollFactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.PollFactorPositionID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`z_poll_factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ZPollFactorPositionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.ZPollFactorPosition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollFactorPositionID == foreign.ZPollFactorPositionID {
				local.R.ZPollFactorPositionVotes = append(local.R.ZPollFactorPositionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.ZPollFactorPosition = local
				break
			}
		}
	}

	return nil
}

// LoadYPollFactorPositionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsFactorsPositionL) LoadYPollFactorPositionVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.PollFactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if a == obj.PollFactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.PollFactorPositionID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`y_poll_factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.YPollFactorPositionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.YPollFactorPosition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollFactorPositionID == foreign.YPollFactorPositionID {
				local.R.YPollFactorPositionVotes = append(local.R.YPollFactorPositionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.YPollFactorPosition = local
				break
			}
		}
	}

	return nil
}

// LoadXPollFactorPositionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsFactorsPositionL) LoadXPollFactorPositionVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsFactorsPosition interface{}, mods queries.Applicator) error {
	var slice []*PollsFactorsPosition
	var object *PollsFactorsPosition

	if singular {
		object = maybePollsFactorsPosition.(*PollsFactorsPosition)
	} else {
		slice = *maybePollsFactorsPosition.(*[]*PollsFactorsPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsFactorsPositionR{}
		}
		args = append(args, object.PollFactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsFactorsPositionR{}
			}

			for _, a := range args {
				if a == obj.PollFactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.PollFactorPositionID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`x_poll_factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XPollFactorPositionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.XPollFactorPosition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollFactorPositionID == foreign.XPollFactorPositionID {
				local.R.XPollFactorPositionVotes = append(local.R.XPollFactorPositionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.XPollFactorPosition = local
				break
			}
		}
	}

	return nil
}

// SetPoll of the pollsFactorsPosition to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsFactorsPositions.
func (o *PollsFactorsPosition) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_factors_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsFactorsPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.ParentPollID, o.PollFactorPositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.ParentPollID
	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsFactorsPositions: PollsFactorsPositionSlice{o},
		}
	} else {
		related.R.PollsFactorsPositions = append(related.R.PollsFactorsPositions, o)
	}

	return nil
}

// SetFactorPosition of the pollsFactorsPosition to the related item.
// Sets o.R.FactorPosition to related.
// Adds o to related.R.PollsFactorsPositions.
func (o *PollsFactorsPosition) SetFactorPosition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FactorPosition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_factors_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"factor_position_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsFactorsPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.FactorPositionID, o.PollFactorPositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactorPositionID = related.FactorPositionID
	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			FactorPosition: related,
		}
	} else {
		o.R.FactorPosition = related
	}

	if related.R == nil {
		related.R = &factorPositionR{
			PollsFactorsPositions: PollsFactorsPositionSlice{o},
		}
	} else {
		related.R.PollsFactorsPositions = append(related.R.PollsFactorsPositions, o)
	}

	return nil
}

// SetEmoji of the pollsFactorsPosition to the related item.
// Sets o.R.Emoji to related.
// Adds o to related.R.PollsFactorsPositions.
func (o *PollsFactorsPosition) SetEmoji(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Emoji) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_factors_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"emoji_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsFactorsPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.EmojiID, o.PollFactorPositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EmojiID, related.EmojiID)
	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			Emoji: related,
		}
	} else {
		o.R.Emoji = related
	}

	if related.R == nil {
		related.R = &emojiR{
			PollsFactorsPositions: PollsFactorsPositionSlice{o},
		}
	} else {
		related.R.PollsFactorsPositions = append(related.R.PollsFactorsPositions, o)
	}

	return nil
}

// RemoveEmoji relationship.
// Sets o.R.Emoji to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PollsFactorsPosition) RemoveEmoji(ctx context.Context, exec boil.ContextExecutor, related *Emoji) error {
	var err error

	queries.SetScanner(&o.EmojiID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("emoji_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Emoji = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PollsFactorsPositions {
		if queries.Equal(o.EmojiID, ri.EmojiID) {
			continue
		}

		ln := len(related.R.PollsFactorsPositions)
		if ln > 1 && i < ln-1 {
			related.R.PollsFactorsPositions[i] = related.R.PollsFactorsPositions[ln-1]
		}
		related.R.PollsFactorsPositions = related.R.PollsFactorsPositions[:ln-1]
		break
	}
	return nil
}

// SetDesignPattern of the pollsFactorsPosition to the related item.
// Sets o.R.DesignPattern to related.
// Adds o to related.R.PollsFactorsPositions.
func (o *PollsFactorsPosition) SetDesignPattern(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DesignPattern) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_factors_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"design_pattern_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsFactorsPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.DesignPatternID, o.PollFactorPositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DesignPatternID, related.DesignPatternID)
	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			DesignPattern: related,
		}
	} else {
		o.R.DesignPattern = related
	}

	if related.R == nil {
		related.R = &designPatternR{
			PollsFactorsPositions: PollsFactorsPositionSlice{o},
		}
	} else {
		related.R.PollsFactorsPositions = append(related.R.PollsFactorsPositions, o)
	}

	return nil
}

// RemoveDesignPattern relationship.
// Sets o.R.DesignPattern to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PollsFactorsPosition) RemoveDesignPattern(ctx context.Context, exec boil.ContextExecutor, related *DesignPattern) error {
	var err error

	queries.SetScanner(&o.DesignPatternID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("design_pattern_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.DesignPattern = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PollsFactorsPositions {
		if queries.Equal(o.DesignPatternID, ri.DesignPatternID) {
			continue
		}

		ln := len(related.R.PollsFactorsPositions)
		if ln > 1 && i < ln-1 {
			related.R.PollsFactorsPositions[i] = related.R.PollsFactorsPositions[ln-1]
		}
		related.R.PollsFactorsPositions = related.R.PollsFactorsPositions[:ln-1]
		break
	}
	return nil
}

// SetColor of the pollsFactorsPosition to the related item.
// Sets o.R.Color to related.
// Adds o to related.R.PollsFactorsPositions.
func (o *PollsFactorsPosition) SetColor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Color) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_factors_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"color_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsFactorsPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.ColorID, o.PollFactorPositionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ColorID = related.ColorID
	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			Color: related,
		}
	} else {
		o.R.Color = related
	}

	if related.R == nil {
		related.R = &colorR{
			PollsFactorsPositions: PollsFactorsPositionSlice{o},
		}
	} else {
		related.R.PollsFactorsPositions = append(related.R.PollsFactorsPositions, o)
	}

	return nil
}

// AddZPollFactorPositionVotes adds the given related objects to the existing relationships
// of the polls_factors_position, optionally inserting them as new records.
// Appends related to o.R.ZPollFactorPositionVotes.
// Sets related.R.ZPollFactorPosition appropriately.
func (o *PollsFactorsPosition) AddZPollFactorPositionVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ZPollFactorPositionID = o.PollFactorPositionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"z_poll_factor_position_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.PollFactorPositionID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ZPollFactorPositionID = o.PollFactorPositionID
		}
	}

	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			ZPollFactorPositionVotes: related,
		}
	} else {
		o.R.ZPollFactorPositionVotes = append(o.R.ZPollFactorPositionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				ZPollFactorPosition: o,
			}
		} else {
			rel.R.ZPollFactorPosition = o
		}
	}
	return nil
}

// AddYPollFactorPositionVotes adds the given related objects to the existing relationships
// of the polls_factors_position, optionally inserting them as new records.
// Appends related to o.R.YPollFactorPositionVotes.
// Sets related.R.YPollFactorPosition appropriately.
func (o *PollsFactorsPosition) AddYPollFactorPositionVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.YPollFactorPositionID = o.PollFactorPositionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y_poll_factor_position_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.PollFactorPositionID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.YPollFactorPositionID = o.PollFactorPositionID
		}
	}

	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			YPollFactorPositionVotes: related,
		}
	} else {
		o.R.YPollFactorPositionVotes = append(o.R.YPollFactorPositionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				YPollFactorPosition: o,
			}
		} else {
			rel.R.YPollFactorPosition = o
		}
	}
	return nil
}

// AddXPollFactorPositionVotes adds the given related objects to the existing relationships
// of the polls_factors_position, optionally inserting them as new records.
// Appends related to o.R.XPollFactorPositionVotes.
// Sets related.R.XPollFactorPosition appropriately.
func (o *PollsFactorsPosition) AddXPollFactorPositionVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.XPollFactorPositionID = o.PollFactorPositionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x_poll_factor_position_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.PollFactorPositionID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.XPollFactorPositionID = o.PollFactorPositionID
		}
	}

	if o.R == nil {
		o.R = &pollsFactorsPositionR{
			XPollFactorPositionVotes: related,
		}
	} else {
		o.R.XPollFactorPositionVotes = append(o.R.XPollFactorPositionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				XPollFactorPosition: o,
			}
		} else {
			rel.R.XPollFactorPosition = o
		}
	}
	return nil
}

// PollsFactorsPositions retrieves all the records using an executor.
func PollsFactorsPositions(mods ...qm.QueryMod) pollsFactorsPositionQuery {
	mods = append(mods, qm.From("\"polls_factors_positions\""))
	return pollsFactorsPositionQuery{NewQuery(mods...)}
}

// FindPollsFactorsPosition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsFactorsPosition(ctx context.Context, exec boil.ContextExecutor, pollFactorPositionID int64, selectCols ...string) (*PollsFactorsPosition, error) {
	pollsFactorsPositionObj := &PollsFactorsPosition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_factors_positions\" where \"poll_factor_position_id\"=$1", sel,
	)

	q := queries.Raw(query, pollFactorPositionID)

	err := q.Bind(ctx, exec, pollsFactorsPositionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_factors_positions")
	}

	return pollsFactorsPositionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsFactorsPosition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_factors_positions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsFactorsPositionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsFactorsPositionInsertCacheMut.RLock()
	cache, cached := pollsFactorsPositionInsertCache[key]
	pollsFactorsPositionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsFactorsPositionColumns,
			pollsFactorsPositionColumnsWithDefault,
			pollsFactorsPositionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsFactorsPositionType, pollsFactorsPositionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsFactorsPositionType, pollsFactorsPositionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_factors_positions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_factors_positions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_factors_positions")
	}

	if !cached {
		pollsFactorsPositionInsertCacheMut.Lock()
		pollsFactorsPositionInsertCache[key] = cache
		pollsFactorsPositionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PollsFactorsPosition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsFactorsPosition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsFactorsPositionUpdateCacheMut.RLock()
	cache, cached := pollsFactorsPositionUpdateCache[key]
	pollsFactorsPositionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsFactorsPositionColumns,
			pollsFactorsPositionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_factors_positions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_factors_positions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsFactorsPositionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsFactorsPositionType, pollsFactorsPositionMapping, append(wl, pollsFactorsPositionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_factors_positions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_factors_positions")
	}

	if !cached {
		pollsFactorsPositionUpdateCacheMut.Lock()
		pollsFactorsPositionUpdateCache[key] = cache
		pollsFactorsPositionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsFactorsPositionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_factors_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_factors_positions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsFactorsPositionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsFactorsPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_factors_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsFactorsPositionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsFactorsPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsFactorsPosition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsFactorsPosition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_factors_positions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsFactorsPositionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsFactorsPositionUpsertCacheMut.RLock()
	cache, cached := pollsFactorsPositionUpsertCache[key]
	pollsFactorsPositionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsFactorsPositionColumns,
			pollsFactorsPositionColumnsWithDefault,
			pollsFactorsPositionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsFactorsPositionColumns,
			pollsFactorsPositionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_factors_positions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsFactorsPositionPrimaryKeyColumns))
			copy(conflict, pollsFactorsPositionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_factors_positions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsFactorsPositionType, pollsFactorsPositionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsFactorsPositionType, pollsFactorsPositionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_factors_positions")
	}

	if !cached {
		pollsFactorsPositionUpsertCacheMut.Lock()
		pollsFactorsPositionUpsertCache[key] = cache
		pollsFactorsPositionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PollsFactorsPosition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsFactorsPosition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsFactorsPosition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsFactorsPositionPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_factors_positions\" WHERE \"poll_factor_position_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_factors_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_factors_positions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsFactorsPositionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsFactorsPositionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_factors_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_factors_positions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsFactorsPositionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsFactorsPosition slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsFactorsPositionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsFactorsPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_factors_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsFactorsPositionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsFactorsPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_factors_positions")
	}

	if len(pollsFactorsPositionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsFactorsPosition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsFactorsPosition(ctx, exec, o.PollFactorPositionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsFactorsPositionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsFactorsPositionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsFactorsPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_factors_positions\".* FROM \"polls_factors_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsFactorsPositionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsFactorsPositionSlice")
	}

	*o = slice

	return nil
}

// PollsFactorsPositionExists checks if the PollsFactorsPosition row exists.
func PollsFactorsPositionExists(ctx context.Context, exec boil.ContextExecutor, pollFactorPositionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_factors_positions\" where \"poll_factor_position_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollFactorPositionID)
	}

	row := exec.QueryRowContext(ctx, sql, pollFactorPositionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_factors_positions exists")
	}

	return exists, nil
}
