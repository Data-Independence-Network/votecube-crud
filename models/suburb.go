// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Suburb is an object representing the database table.
type Suburb struct {
	SuburbID   int64         `boil:"suburb_id" json:"suburb_id" toml:"suburb_id" yaml:"suburb_id"`
	TownID     int64         `boil:"town_id" json:"town_id" toml:"town_id" yaml:"town_id"`
	SuburbCode string        `boil:"suburb_code" json:"suburb_code" toml:"suburb_code" yaml:"suburb_code"`
	SuburbName string        `boil:"suburb_name" json:"suburb_name" toml:"suburb_name" yaml:"suburb_name"`
	Longitude  types.Decimal `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	Latitude   types.Decimal `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`

	R *suburbR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L suburbL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SuburbColumns = struct {
	SuburbID   string
	TownID     string
	SuburbCode string
	SuburbName string
	Longitude  string
	Latitude   string
}{
	SuburbID:   "suburb_id",
	TownID:     "town_id",
	SuburbCode: "suburb_code",
	SuburbName: "suburb_name",
	Longitude:  "longitude",
	Latitude:   "latitude",
}

// SuburbRels is where relationship names are stored.
var SuburbRels = struct {
	Town    string
	Streets string
}{
	Town:    "Town",
	Streets: "Streets",
}

// suburbR is where relationships are stored.
type suburbR struct {
	Town    *Town
	Streets StreetSlice
}

// NewStruct creates a new relationship struct
func (*suburbR) NewStruct() *suburbR {
	return &suburbR{}
}

// suburbL is where Load methods for each relationship are stored.
type suburbL struct{}

var (
	suburbColumns               = []string{"suburb_id", "town_id", "suburb_code", "suburb_name", "longitude", "latitude"}
	suburbColumnsWithoutDefault = []string{"suburb_id", "town_id", "suburb_code", "suburb_name", "longitude", "latitude"}
	suburbColumnsWithDefault    = []string{}
	suburbPrimaryKeyColumns     = []string{"suburb_id"}
)

type (
	// SuburbSlice is an alias for a slice of pointers to Suburb.
	// This should generally be used opposed to []Suburb.
	SuburbSlice []*Suburb
	// SuburbHook is the signature for custom Suburb hook methods
	SuburbHook func(context.Context, boil.ContextExecutor, *Suburb) error

	suburbQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	suburbType                 = reflect.TypeOf(&Suburb{})
	suburbMapping              = queries.MakeStructMapping(suburbType)
	suburbPrimaryKeyMapping, _ = queries.BindMapping(suburbType, suburbMapping, suburbPrimaryKeyColumns)
	suburbInsertCacheMut       sync.RWMutex
	suburbInsertCache          = make(map[string]insertCache)
	suburbUpdateCacheMut       sync.RWMutex
	suburbUpdateCache          = make(map[string]updateCache)
	suburbUpsertCacheMut       sync.RWMutex
	suburbUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var suburbBeforeInsertHooks []SuburbHook
var suburbBeforeUpdateHooks []SuburbHook
var suburbBeforeDeleteHooks []SuburbHook
var suburbBeforeUpsertHooks []SuburbHook

var suburbAfterInsertHooks []SuburbHook
var suburbAfterSelectHooks []SuburbHook
var suburbAfterUpdateHooks []SuburbHook
var suburbAfterDeleteHooks []SuburbHook
var suburbAfterUpsertHooks []SuburbHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Suburb) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Suburb) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Suburb) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Suburb) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Suburb) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Suburb) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Suburb) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Suburb) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Suburb) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suburbAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSuburbHook registers your hook function for all future operations.
func AddSuburbHook(hookPoint boil.HookPoint, suburbHook SuburbHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		suburbBeforeInsertHooks = append(suburbBeforeInsertHooks, suburbHook)
	case boil.BeforeUpdateHook:
		suburbBeforeUpdateHooks = append(suburbBeforeUpdateHooks, suburbHook)
	case boil.BeforeDeleteHook:
		suburbBeforeDeleteHooks = append(suburbBeforeDeleteHooks, suburbHook)
	case boil.BeforeUpsertHook:
		suburbBeforeUpsertHooks = append(suburbBeforeUpsertHooks, suburbHook)
	case boil.AfterInsertHook:
		suburbAfterInsertHooks = append(suburbAfterInsertHooks, suburbHook)
	case boil.AfterSelectHook:
		suburbAfterSelectHooks = append(suburbAfterSelectHooks, suburbHook)
	case boil.AfterUpdateHook:
		suburbAfterUpdateHooks = append(suburbAfterUpdateHooks, suburbHook)
	case boil.AfterDeleteHook:
		suburbAfterDeleteHooks = append(suburbAfterDeleteHooks, suburbHook)
	case boil.AfterUpsertHook:
		suburbAfterUpsertHooks = append(suburbAfterUpsertHooks, suburbHook)
	}
}

// One returns a single suburb record from the query.
func (q suburbQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Suburb, error) {
	o := &Suburb{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for suburb")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Suburb records from the query.
func (q suburbQuery) All(ctx context.Context, exec boil.ContextExecutor) (SuburbSlice, error) {
	var o []*Suburb

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Suburb slice")
	}

	if len(suburbAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Suburb records in the query.
func (q suburbQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count suburb rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q suburbQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if suburb exists")
	}

	return count > 0, nil
}

// Town pointed to by the foreign key.
func (o *Suburb) Town(mods ...qm.QueryMod) townQuery {
	queryMods := []qm.QueryMod{
		qm.Where("town_id=?", o.TownID),
	}

	queryMods = append(queryMods, mods...)

	query := Towns(queryMods...)
	queries.SetFrom(query.Query, "\"town\"")

	return query
}

// Streets retrieves all the street's Streets with an executor.
func (o *Suburb) Streets(mods ...qm.QueryMod) streetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"street\".\"suburb_id\"=?", o.SuburbID),
	)

	query := Streets(queryMods...)
	queries.SetFrom(query.Query, "\"street\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"street\".*"})
	}

	return query
}

// LoadTown allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (suburbL) LoadTown(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSuburb interface{}, mods queries.Applicator) error {
	var slice []*Suburb
	var object *Suburb

	if singular {
		object = maybeSuburb.(*Suburb)
	} else {
		slice = *maybeSuburb.(*[]*Suburb)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &suburbR{}
		}
		args = append(args, object.TownID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &suburbR{}
			}

			for _, a := range args {
				if a == obj.TownID {
					continue Outer
				}
			}

			args = append(args, obj.TownID)
		}
	}

	query := NewQuery(qm.From(`town`), qm.WhereIn(`town_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Town")
	}

	var resultSlice []*Town
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Town")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for town")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for town")
	}

	if len(suburbAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Town = foreign
		if foreign.R == nil {
			foreign.R = &townR{}
		}
		foreign.R.Suburbs = append(foreign.R.Suburbs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TownID == foreign.TownID {
				local.R.Town = foreign
				if foreign.R == nil {
					foreign.R = &townR{}
				}
				foreign.R.Suburbs = append(foreign.R.Suburbs, local)
				break
			}
		}
	}

	return nil
}

// LoadStreets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (suburbL) LoadStreets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSuburb interface{}, mods queries.Applicator) error {
	var slice []*Suburb
	var object *Suburb

	if singular {
		object = maybeSuburb.(*Suburb)
	} else {
		slice = *maybeSuburb.(*[]*Suburb)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &suburbR{}
		}
		args = append(args, object.SuburbID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &suburbR{}
			}

			for _, a := range args {
				if a == obj.SuburbID {
					continue Outer
				}
			}

			args = append(args, obj.SuburbID)
		}
	}

	query := NewQuery(qm.From(`street`), qm.WhereIn(`suburb_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load street")
	}

	var resultSlice []*Street
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice street")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on street")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for street")
	}

	if len(streetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Streets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &streetR{}
			}
			foreign.R.Suburb = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SuburbID == foreign.SuburbID {
				local.R.Streets = append(local.R.Streets, foreign)
				if foreign.R == nil {
					foreign.R = &streetR{}
				}
				foreign.R.Suburb = local
				break
			}
		}
	}

	return nil
}

// SetTown of the suburb to the related item.
// Sets o.R.Town to related.
// Adds o to related.R.Suburbs.
func (o *Suburb) SetTown(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Town) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"suburb\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"town_id"}),
		strmangle.WhereClause("\"", "\"", 2, suburbPrimaryKeyColumns),
	)
	values := []interface{}{related.TownID, o.SuburbID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TownID = related.TownID
	if o.R == nil {
		o.R = &suburbR{
			Town: related,
		}
	} else {
		o.R.Town = related
	}

	if related.R == nil {
		related.R = &townR{
			Suburbs: SuburbSlice{o},
		}
	} else {
		related.R.Suburbs = append(related.R.Suburbs, o)
	}

	return nil
}

// AddStreets adds the given related objects to the existing relationships
// of the suburb, optionally inserting them as new records.
// Appends related to o.R.Streets.
// Sets related.R.Suburb appropriately.
func (o *Suburb) AddStreets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Street) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SuburbID = o.SuburbID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"street\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"suburb_id"}),
				strmangle.WhereClause("\"", "\"", 2, streetPrimaryKeyColumns),
			)
			values := []interface{}{o.SuburbID, rel.StreetID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SuburbID = o.SuburbID
		}
	}

	if o.R == nil {
		o.R = &suburbR{
			Streets: related,
		}
	} else {
		o.R.Streets = append(o.R.Streets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &streetR{
				Suburb: o,
			}
		} else {
			rel.R.Suburb = o
		}
	}
	return nil
}

// Suburbs retrieves all the records using an executor.
func Suburbs(mods ...qm.QueryMod) suburbQuery {
	mods = append(mods, qm.From("\"suburb\""))
	return suburbQuery{NewQuery(mods...)}
}

// FindSuburb retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSuburb(ctx context.Context, exec boil.ContextExecutor, suburbID int64, selectCols ...string) (*Suburb, error) {
	suburbObj := &Suburb{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"suburb\" where \"suburb_id\"=$1", sel,
	)

	q := queries.Raw(query, suburbID)

	err := q.Bind(ctx, exec, suburbObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from suburb")
	}

	return suburbObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Suburb) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suburb provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(suburbColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	suburbInsertCacheMut.RLock()
	cache, cached := suburbInsertCache[key]
	suburbInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			suburbColumns,
			suburbColumnsWithDefault,
			suburbColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(suburbType, suburbMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(suburbType, suburbMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"suburb\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"suburb\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into suburb")
	}

	if !cached {
		suburbInsertCacheMut.Lock()
		suburbInsertCache[key] = cache
		suburbInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Suburb.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Suburb) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	suburbUpdateCacheMut.RLock()
	cache, cached := suburbUpdateCache[key]
	suburbUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			suburbColumns,
			suburbPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update suburb, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"suburb\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, suburbPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(suburbType, suburbMapping, append(wl, suburbPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update suburb row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for suburb")
	}

	if !cached {
		suburbUpdateCacheMut.Lock()
		suburbUpdateCache[key] = cache
		suburbUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q suburbQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for suburb")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for suburb")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SuburbSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suburbPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"suburb\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, suburbPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in suburb slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all suburb")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Suburb) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suburb provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(suburbColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	suburbUpsertCacheMut.RLock()
	cache, cached := suburbUpsertCache[key]
	suburbUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			suburbColumns,
			suburbColumnsWithDefault,
			suburbColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			suburbColumns,
			suburbPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert suburb, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(suburbPrimaryKeyColumns))
			copy(conflict, suburbPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"suburb\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(suburbType, suburbMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(suburbType, suburbMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert suburb")
	}

	if !cached {
		suburbUpsertCacheMut.Lock()
		suburbUpsertCache[key] = cache
		suburbUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Suburb record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Suburb) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Suburb provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), suburbPrimaryKeyMapping)
	sql := "DELETE FROM \"suburb\" WHERE \"suburb_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from suburb")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for suburb")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q suburbQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no suburbQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suburb")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suburb")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SuburbSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Suburb slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(suburbBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suburbPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"suburb\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, suburbPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suburb slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suburb")
	}

	if len(suburbAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Suburb) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSuburb(ctx, exec, o.SuburbID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SuburbSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SuburbSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suburbPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"suburb\".* FROM \"suburb\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, suburbPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SuburbSlice")
	}

	*o = slice

	return nil
}

// SuburbExists checks if the Suburb row exists.
func SuburbExists(ctx context.Context, exec boil.ContextExecutor, suburbID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"suburb\" where \"suburb_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, suburbID)
	}

	row := exec.QueryRowContext(ctx, sql, suburbID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if suburb exists")
	}

	return exists, nil
}
