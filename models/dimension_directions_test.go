// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDimensionDirections(t *testing.T) {
	t.Parallel()

	query := DimensionDirections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDimensionDirectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDimensionDirectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DimensionDirections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDimensionDirectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DimensionDirectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDimensionDirectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DimensionDirectionExists(ctx, tx, o.DimensionDirectionID)
	if err != nil {
		t.Errorf("Unable to check if DimensionDirection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DimensionDirectionExists to return true, but got false.")
	}
}

func testDimensionDirectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dimensionDirectionFound, err := FindDimensionDirection(ctx, tx, o.DimensionDirectionID)
	if err != nil {
		t.Error(err)
	}

	if dimensionDirectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDimensionDirectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DimensionDirections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDimensionDirectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DimensionDirections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDimensionDirectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dimensionDirectionOne := &DimensionDirection{}
	dimensionDirectionTwo := &DimensionDirection{}
	if err = randomize.Struct(seed, dimensionDirectionOne, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}
	if err = randomize.Struct(seed, dimensionDirectionTwo, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dimensionDirectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dimensionDirectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DimensionDirections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDimensionDirectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dimensionDirectionOne := &DimensionDirection{}
	dimensionDirectionTwo := &DimensionDirection{}
	if err = randomize.Struct(seed, dimensionDirectionOne, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}
	if err = randomize.Struct(seed, dimensionDirectionTwo, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dimensionDirectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dimensionDirectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dimensionDirectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func dimensionDirectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DimensionDirection) error {
	*o = DimensionDirection{}
	return nil
}

func testDimensionDirectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DimensionDirection{}
	o := &DimensionDirection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DimensionDirection object: %s", err)
	}

	AddDimensionDirectionHook(boil.BeforeInsertHook, dimensionDirectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionBeforeInsertHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.AfterInsertHook, dimensionDirectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionAfterInsertHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.AfterSelectHook, dimensionDirectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionAfterSelectHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.BeforeUpdateHook, dimensionDirectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionBeforeUpdateHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.AfterUpdateHook, dimensionDirectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionAfterUpdateHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.BeforeDeleteHook, dimensionDirectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionBeforeDeleteHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.AfterDeleteHook, dimensionDirectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionAfterDeleteHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.BeforeUpsertHook, dimensionDirectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionBeforeUpsertHooks = []DimensionDirectionHook{}

	AddDimensionDirectionHook(boil.AfterUpsertHook, dimensionDirectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dimensionDirectionAfterUpsertHooks = []DimensionDirectionHook{}
}

func testDimensionDirectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDimensionDirectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dimensionDirectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDimensionDirectionToManyPollsDimensionsDirections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DimensionDirection
	var b, c PollsDimensionsDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsDimensionsDirectionDBTypes, false, pollsDimensionsDirectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DimensionDirectionID = a.DimensionDirectionID
	c.DimensionDirectionID = a.DimensionDirectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsDimensionsDirection, err := a.PollsDimensionsDirections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsDimensionsDirection {
		if v.DimensionDirectionID == b.DimensionDirectionID {
			bFound = true
		}
		if v.DimensionDirectionID == c.DimensionDirectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DimensionDirectionSlice{&a}
	if err = a.L.LoadPollsDimensionsDirections(ctx, tx, false, (*[]*DimensionDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsDimensionsDirections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsDimensionsDirections = nil
	if err = a.L.LoadPollsDimensionsDirections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsDimensionsDirections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsDimensionsDirection)
	}
}

func testDimensionDirectionToManyAddOpPollsDimensionsDirections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DimensionDirection
	var b, c, d, e PollsDimensionsDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsDimensionsDirection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsDimensionsDirectionDBTypes, false, strmangle.SetComplement(pollsDimensionsDirectionPrimaryKeyColumns, pollsDimensionsDirectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsDimensionsDirection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsDimensionsDirections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DimensionDirectionID != first.DimensionDirectionID {
			t.Error("foreign key was wrong value", a.DimensionDirectionID, first.DimensionDirectionID)
		}
		if a.DimensionDirectionID != second.DimensionDirectionID {
			t.Error("foreign key was wrong value", a.DimensionDirectionID, second.DimensionDirectionID)
		}

		if first.R.DimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DimensionDirection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsDimensionsDirections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsDimensionsDirections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsDimensionsDirections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDimensionDirectionToOneDirectionUsingDirection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DimensionDirection
	var foreign Direction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DirectionID = foreign.DirectionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Direction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DirectionID != foreign.DirectionID {
		t.Errorf("want: %v, got %v", foreign.DirectionID, check.DirectionID)
	}

	slice := DimensionDirectionSlice{&local}
	if err = local.L.LoadDirection(ctx, tx, false, (*[]*DimensionDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Direction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Direction = nil
	if err = local.L.LoadDirection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Direction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDimensionDirectionToOneDimensionUsingDimension(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DimensionDirection
	var foreign Dimension

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DimensionID = foreign.DimensionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dimension().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DimensionID != foreign.DimensionID {
		t.Errorf("want: %v, got %v", foreign.DimensionID, check.DimensionID)
	}

	slice := DimensionDirectionSlice{&local}
	if err = local.L.LoadDimension(ctx, tx, false, (*[]*DimensionDirection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dimension == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dimension = nil
	if err = local.L.LoadDimension(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dimension == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDimensionDirectionToOneSetOpDirectionUsingDirection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DimensionDirection
	var b, c Direction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Direction{&b, &c} {
		err = a.SetDirection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Direction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DimensionDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DirectionID != x.DirectionID {
			t.Error("foreign key was wrong value", a.DirectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DirectionID))
		reflect.Indirect(reflect.ValueOf(&a.DirectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DirectionID != x.DirectionID {
			t.Error("foreign key was wrong value", a.DirectionID, x.DirectionID)
		}
	}
}
func testDimensionDirectionToOneSetOpDimensionUsingDimension(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DimensionDirection
	var b, c Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dimension{&b, &c} {
		err = a.SetDimension(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dimension != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DimensionDirections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DimensionID != x.DimensionID {
			t.Error("foreign key was wrong value", a.DimensionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DimensionID))
		reflect.Indirect(reflect.ValueOf(&a.DimensionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DimensionID != x.DimensionID {
			t.Error("foreign key was wrong value", a.DimensionID, x.DimensionID)
		}
	}
}

func testDimensionDirectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDimensionDirectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DimensionDirectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDimensionDirectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DimensionDirections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dimensionDirectionDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `DimensionDirectionID`: `int8`, `DimensionID`: `int8`, `DirectionID`: `int8`, `UserAccountID`: `int8`}
	_                         = bytes.MinRead
)

func testDimensionDirectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dimensionDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dimensionDirectionColumns) == len(dimensionDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDimensionDirectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dimensionDirectionColumns) == len(dimensionDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DimensionDirection{}
	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dimensionDirectionDBTypes, true, dimensionDirectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dimensionDirectionColumns, dimensionDirectionPrimaryKeyColumns) {
		fields = dimensionDirectionColumns
	} else {
		fields = strmangle.SetComplement(
			dimensionDirectionColumns,
			dimensionDirectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DimensionDirectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDimensionDirectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(dimensionDirectionColumns) == len(dimensionDirectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DimensionDirection{}
	if err = randomize.Struct(seed, &o, dimensionDirectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DimensionDirection: %s", err)
	}

	count, err := DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dimensionDirectionDBTypes, false, dimensionDirectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DimensionDirection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DimensionDirection: %s", err)
	}

	count, err = DimensionDirections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
