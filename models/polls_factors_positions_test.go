// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsFactorsPositions(t *testing.T) {
	t.Parallel()

	query := PollsFactorsPositions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsFactorsPositionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsFactorsPositionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsFactorsPositions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsFactorsPositionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsFactorsPositionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsFactorsPositionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsFactorsPositionExists(ctx, tx, o.PollFactorPositionID)
	if err != nil {
		t.Errorf("Unable to check if PollsFactorsPosition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsFactorsPositionExists to return true, but got false.")
	}
}

func testPollsFactorsPositionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsFactorsPositionFound, err := FindPollsFactorsPosition(ctx, tx, o.PollFactorPositionID)
	if err != nil {
		t.Error(err)
	}

	if pollsFactorsPositionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsFactorsPositionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsFactorsPositions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsFactorsPositionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsFactorsPositions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsFactorsPositionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsFactorsPositionOne := &PollsFactorsPosition{}
	pollsFactorsPositionTwo := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, pollsFactorsPositionOne, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsFactorsPositionTwo, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsFactorsPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsFactorsPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsFactorsPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsFactorsPositionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsFactorsPositionOne := &PollsFactorsPosition{}
	pollsFactorsPositionTwo := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, pollsFactorsPositionOne, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsFactorsPositionTwo, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsFactorsPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsFactorsPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsFactorsPositionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func pollsFactorsPositionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsFactorsPosition) error {
	*o = PollsFactorsPosition{}
	return nil
}

func testPollsFactorsPositionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsFactorsPosition{}
	o := &PollsFactorsPosition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition object: %s", err)
	}

	AddPollsFactorsPositionHook(boil.BeforeInsertHook, pollsFactorsPositionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionBeforeInsertHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.AfterInsertHook, pollsFactorsPositionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionAfterInsertHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.AfterSelectHook, pollsFactorsPositionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionAfterSelectHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.BeforeUpdateHook, pollsFactorsPositionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionBeforeUpdateHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.AfterUpdateHook, pollsFactorsPositionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionAfterUpdateHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.BeforeDeleteHook, pollsFactorsPositionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionBeforeDeleteHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.AfterDeleteHook, pollsFactorsPositionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionAfterDeleteHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.BeforeUpsertHook, pollsFactorsPositionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionBeforeUpsertHooks = []PollsFactorsPositionHook{}

	AddPollsFactorsPositionHook(boil.AfterUpsertHook, pollsFactorsPositionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsFactorsPositionAfterUpsertHooks = []PollsFactorsPositionHook{}
}

func testPollsFactorsPositionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsFactorsPositionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsFactorsPositionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsFactorsPositionToManyZPollFactorPositionVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ZPollFactorPositionID = a.PollFactorPositionID
	c.ZPollFactorPositionID = a.PollFactorPositionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.ZPollFactorPositionVotes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.ZPollFactorPositionID == b.ZPollFactorPositionID {
			bFound = true
		}
		if v.ZPollFactorPositionID == c.ZPollFactorPositionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsFactorsPositionSlice{&a}
	if err = a.L.LoadZPollFactorPositionVotes(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ZPollFactorPositionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ZPollFactorPositionVotes = nil
	if err = a.L.LoadZPollFactorPositionVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ZPollFactorPositionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollsFactorsPositionToManyYPollFactorPositionVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.YPollFactorPositionID = a.PollFactorPositionID
	c.YPollFactorPositionID = a.PollFactorPositionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.YPollFactorPositionVotes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.YPollFactorPositionID == b.YPollFactorPositionID {
			bFound = true
		}
		if v.YPollFactorPositionID == c.YPollFactorPositionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsFactorsPositionSlice{&a}
	if err = a.L.LoadYPollFactorPositionVotes(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.YPollFactorPositionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.YPollFactorPositionVotes = nil
	if err = a.L.LoadYPollFactorPositionVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.YPollFactorPositionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollsFactorsPositionToManyXPollFactorPositionVotes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.XPollFactorPositionID = a.PollFactorPositionID
	c.XPollFactorPositionID = a.PollFactorPositionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	vote, err := a.XPollFactorPositionVotes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range vote {
		if v.XPollFactorPositionID == b.XPollFactorPositionID {
			bFound = true
		}
		if v.XPollFactorPositionID == c.XPollFactorPositionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PollsFactorsPositionSlice{&a}
	if err = a.L.LoadXPollFactorPositionVotes(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XPollFactorPositionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XPollFactorPositionVotes = nil
	if err = a.L.LoadXPollFactorPositionVotes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XPollFactorPositionVotes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", vote)
	}
}

func testPollsFactorsPositionToManyAddOpZPollFactorPositionVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddZPollFactorPositionVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollFactorPositionID != first.ZPollFactorPositionID {
			t.Error("foreign key was wrong value", a.PollFactorPositionID, first.ZPollFactorPositionID)
		}
		if a.PollFactorPositionID != second.ZPollFactorPositionID {
			t.Error("foreign key was wrong value", a.PollFactorPositionID, second.ZPollFactorPositionID)
		}

		if first.R.ZPollFactorPosition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ZPollFactorPosition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ZPollFactorPositionVotes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ZPollFactorPositionVotes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ZPollFactorPositionVotes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsFactorsPositionToManyAddOpYPollFactorPositionVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddYPollFactorPositionVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollFactorPositionID != first.YPollFactorPositionID {
			t.Error("foreign key was wrong value", a.PollFactorPositionID, first.YPollFactorPositionID)
		}
		if a.PollFactorPositionID != second.YPollFactorPositionID {
			t.Error("foreign key was wrong value", a.PollFactorPositionID, second.YPollFactorPositionID)
		}

		if first.R.YPollFactorPosition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.YPollFactorPosition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.YPollFactorPositionVotes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.YPollFactorPositionVotes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.YPollFactorPositionVotes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsFactorsPositionToManyAddOpXPollFactorPositionVotes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c, d, e Vote

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Vote{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Vote{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXPollFactorPositionVotes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PollFactorPositionID != first.XPollFactorPositionID {
			t.Error("foreign key was wrong value", a.PollFactorPositionID, first.XPollFactorPositionID)
		}
		if a.PollFactorPositionID != second.XPollFactorPositionID {
			t.Error("foreign key was wrong value", a.PollFactorPositionID, second.XPollFactorPositionID)
		}

		if first.R.XPollFactorPosition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.XPollFactorPosition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XPollFactorPositionVotes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XPollFactorPositionVotes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XPollFactorPositionVotes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPollsFactorsPositionToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsFactorsPosition
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.ParentPollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ParentPollID != foreign.ParentPollID {
		t.Errorf("want: %v, got %v", foreign.ParentPollID, check.ParentPollID)
	}

	slice := PollsFactorsPositionSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsFactorsPositionToOneFactorPositionUsingFactorPosition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsFactorsPosition
	var foreign FactorPosition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, factorPositionDBTypes, false, factorPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorPosition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FactorPositionID = foreign.FactorPositionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FactorPosition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FactorPositionID != foreign.FactorPositionID {
		t.Errorf("want: %v, got %v", foreign.FactorPositionID, check.FactorPositionID)
	}

	slice := PollsFactorsPositionSlice{&local}
	if err = local.L.LoadFactorPosition(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FactorPosition = nil
	if err = local.L.LoadFactorPosition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsFactorsPositionToOneEmojiUsingEmoji(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsFactorsPosition
	var foreign Emoji

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, emojiDBTypes, false, emojiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Emoji struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.EmojiID, foreign.EmojiID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Emoji().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.EmojiID, foreign.EmojiID) {
		t.Errorf("want: %v, got %v", foreign.EmojiID, check.EmojiID)
	}

	slice := PollsFactorsPositionSlice{&local}
	if err = local.L.LoadEmoji(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Emoji == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Emoji = nil
	if err = local.L.LoadEmoji(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Emoji == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsFactorsPositionToOneDesignPatternUsingDesignPattern(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsFactorsPosition
	var foreign DesignPattern

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, designPatternDBTypes, false, designPatternColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DesignPattern struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DesignPatternID, foreign.DesignPatternID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DesignPattern().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.DesignPatternID, foreign.DesignPatternID) {
		t.Errorf("want: %v, got %v", foreign.DesignPatternID, check.DesignPatternID)
	}

	slice := PollsFactorsPositionSlice{&local}
	if err = local.L.LoadDesignPattern(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DesignPattern == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DesignPattern = nil
	if err = local.L.LoadDesignPattern(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DesignPattern == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsFactorsPositionToOneColorUsingColor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsFactorsPosition
	var foreign Color

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, colorDBTypes, false, colorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Color struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ColorID = foreign.ColorID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Color().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ColorID != foreign.ColorID {
		t.Errorf("want: %v, got %v", foreign.ColorID, check.ColorID)
	}

	slice := PollsFactorsPositionSlice{&local}
	if err = local.L.LoadColor(ctx, tx, false, (*[]*PollsFactorsPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Color == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Color = nil
	if err = local.L.LoadColor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Color == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsFactorsPositionToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsFactorsPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID, x.ParentPollID)
		}
	}
}
func testPollsFactorsPositionToOneSetOpFactorPositionUsingFactorPosition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c FactorPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, factorPositionDBTypes, false, strmangle.SetComplement(factorPositionPrimaryKeyColumns, factorPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, factorPositionDBTypes, false, strmangle.SetComplement(factorPositionPrimaryKeyColumns, factorPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*FactorPosition{&b, &c} {
		err = a.SetFactorPosition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FactorPosition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsFactorsPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FactorPositionID != x.FactorPositionID {
			t.Error("foreign key was wrong value", a.FactorPositionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FactorPositionID))
		reflect.Indirect(reflect.ValueOf(&a.FactorPositionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FactorPositionID != x.FactorPositionID {
			t.Error("foreign key was wrong value", a.FactorPositionID, x.FactorPositionID)
		}
	}
}
func testPollsFactorsPositionToOneSetOpEmojiUsingEmoji(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c Emoji

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Emoji{&b, &c} {
		err = a.SetEmoji(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Emoji != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsFactorsPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.EmojiID, x.EmojiID) {
			t.Error("foreign key was wrong value", a.EmojiID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EmojiID))
		reflect.Indirect(reflect.ValueOf(&a.EmojiID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.EmojiID, x.EmojiID) {
			t.Error("foreign key was wrong value", a.EmojiID, x.EmojiID)
		}
	}
}

func testPollsFactorsPositionToOneRemoveOpEmojiUsingEmoji(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b Emoji

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetEmoji(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveEmoji(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Emoji().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Emoji != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.EmojiID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PollsFactorsPositions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPollsFactorsPositionToOneSetOpDesignPatternUsingDesignPattern(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c DesignPattern

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DesignPattern{&b, &c} {
		err = a.SetDesignPattern(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DesignPattern != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsFactorsPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DesignPatternID, x.DesignPatternID) {
			t.Error("foreign key was wrong value", a.DesignPatternID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DesignPatternID))
		reflect.Indirect(reflect.ValueOf(&a.DesignPatternID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DesignPatternID, x.DesignPatternID) {
			t.Error("foreign key was wrong value", a.DesignPatternID, x.DesignPatternID)
		}
	}
}

func testPollsFactorsPositionToOneRemoveOpDesignPatternUsingDesignPattern(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b DesignPattern

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDesignPattern(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDesignPattern(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DesignPattern().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DesignPattern != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DesignPatternID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PollsFactorsPositions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPollsFactorsPositionToOneSetOpColorUsingColor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsFactorsPosition
	var b, c Color

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, colorDBTypes, false, strmangle.SetComplement(colorPrimaryKeyColumns, colorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, colorDBTypes, false, strmangle.SetComplement(colorPrimaryKeyColumns, colorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Color{&b, &c} {
		err = a.SetColor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Color != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsFactorsPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ColorID != x.ColorID {
			t.Error("foreign key was wrong value", a.ColorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ColorID))
		reflect.Indirect(reflect.ValueOf(&a.ColorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ColorID != x.ColorID {
			t.Error("foreign key was wrong value", a.ColorID, x.ColorID)
		}
	}
}

func testPollsFactorsPositionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsFactorsPositionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsFactorsPositionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsFactorsPositionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsFactorsPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsFactorsPositionDBTypes = map[string]string{`ColorID`: `int8`, `DesignPatternID`: `int8`, `EmojiID`: `int8`, `FactorCoordinateAxis`: `varchar`, `FactorPositionID`: `int8`, `PollFactorPositionID`: `int8`, `PollID`: `int8`, `PositionOrientation`: `bool`}
	_                           = bytes.MinRead
)

func testPollsFactorsPositionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsFactorsPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsFactorsPositionColumns) == len(pollsFactorsPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsFactorsPositionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsFactorsPositionColumns) == len(pollsFactorsPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsFactorsPosition{}
	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsFactorsPositionDBTypes, true, pollsFactorsPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsFactorsPositionColumns, pollsFactorsPositionPrimaryKeyColumns) {
		fields = pollsFactorsPositionColumns
	} else {
		fields = strmangle.SetComplement(
			pollsFactorsPositionColumns,
			pollsFactorsPositionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsFactorsPositionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsFactorsPositionsUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsFactorsPositionColumns) == len(pollsFactorsPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsFactorsPosition{}
	if err = randomize.Struct(seed, &o, pollsFactorsPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsFactorsPosition: %s", err)
	}

	count, err := PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsFactorsPositionDBTypes, false, pollsFactorsPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsFactorsPosition: %s", err)
	}

	count, err = PollsFactorsPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
