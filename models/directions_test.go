// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDirections(t *testing.T) {
	t.Parallel()

	query := Directions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDirectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDirectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Directions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDirectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DirectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDirectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DirectionExists(ctx, tx, o.DirectionID)
	if err != nil {
		t.Errorf("Unable to check if Direction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DirectionExists to return true, but got false.")
	}
}

func testDirectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	directionFound, err := FindDirection(ctx, tx, o.DirectionID)
	if err != nil {
		t.Error(err)
	}

	if directionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDirectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Directions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDirectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Directions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDirectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	directionOne := &Direction{}
	directionTwo := &Direction{}
	if err = randomize.Struct(seed, directionOne, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}
	if err = randomize.Struct(seed, directionTwo, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = directionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = directionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Directions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDirectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	directionOne := &Direction{}
	directionTwo := &Direction{}
	if err = randomize.Struct(seed, directionOne, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}
	if err = randomize.Struct(seed, directionTwo, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = directionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = directionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func directionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func directionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Direction) error {
	*o = Direction{}
	return nil
}

func testDirectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Direction{}
	o := &Direction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, directionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Direction object: %s", err)
	}

	AddDirectionHook(boil.BeforeInsertHook, directionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	directionBeforeInsertHooks = []DirectionHook{}

	AddDirectionHook(boil.AfterInsertHook, directionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	directionAfterInsertHooks = []DirectionHook{}

	AddDirectionHook(boil.AfterSelectHook, directionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	directionAfterSelectHooks = []DirectionHook{}

	AddDirectionHook(boil.BeforeUpdateHook, directionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	directionBeforeUpdateHooks = []DirectionHook{}

	AddDirectionHook(boil.AfterUpdateHook, directionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	directionAfterUpdateHooks = []DirectionHook{}

	AddDirectionHook(boil.BeforeDeleteHook, directionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	directionBeforeDeleteHooks = []DirectionHook{}

	AddDirectionHook(boil.AfterDeleteHook, directionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	directionAfterDeleteHooks = []DirectionHook{}

	AddDirectionHook(boil.BeforeUpsertHook, directionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	directionBeforeUpsertHooks = []DirectionHook{}

	AddDirectionHook(boil.AfterUpsertHook, directionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	directionAfterUpsertHooks = []DirectionHook{}
}

func testDirectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDirectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(directionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDirectionToManyDimensionDirections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Direction
	var b, c DimensionDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DirectionID = a.DirectionID
	c.DirectionID = a.DirectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dimensionDirection, err := a.DimensionDirections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dimensionDirection {
		if v.DirectionID == b.DirectionID {
			bFound = true
		}
		if v.DirectionID == c.DirectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DirectionSlice{&a}
	if err = a.L.LoadDimensionDirections(ctx, tx, false, (*[]*Direction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionDirections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DimensionDirections = nil
	if err = a.L.LoadDimensionDirections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionDirections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dimensionDirection)
	}
}

func testDirectionToManyAddOpDimensionDirections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Direction
	var b, c, d, e DimensionDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DimensionDirection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DimensionDirection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDimensionDirections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DirectionID != first.DirectionID {
			t.Error("foreign key was wrong value", a.DirectionID, first.DirectionID)
		}
		if a.DirectionID != second.DirectionID {
			t.Error("foreign key was wrong value", a.DirectionID, second.DirectionID)
		}

		if first.R.Direction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Direction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DimensionDirections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DimensionDirections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DimensionDirections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDirectionToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Direction
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := DirectionSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*Direction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDirectionToOneEmojiUsingEmoji(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Direction
	var foreign Emoji

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, emojiDBTypes, false, emojiColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Emoji struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EmojiID = foreign.EmojiID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Emoji().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.EmojiID != foreign.EmojiID {
		t.Errorf("want: %v, got %v", foreign.EmojiID, check.EmojiID)
	}

	slice := DirectionSlice{&local}
	if err = local.L.LoadEmoji(ctx, tx, false, (*[]*Direction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Emoji == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Emoji = nil
	if err = local.L.LoadEmoji(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Emoji == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDirectionToOneDesignPatternUsingDesignPattern(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Direction
	var foreign DesignPattern

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, directionDBTypes, false, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, designPatternDBTypes, false, designPatternColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DesignPattern struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DesignPatternID = foreign.DesignPatternID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DesignPattern().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DesignPatternID != foreign.DesignPatternID {
		t.Errorf("want: %v, got %v", foreign.DesignPatternID, check.DesignPatternID)
	}

	slice := DirectionSlice{&local}
	if err = local.L.LoadDesignPattern(ctx, tx, false, (*[]*Direction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DesignPattern == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DesignPattern = nil
	if err = local.L.LoadDesignPattern(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DesignPattern == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDirectionToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Direction
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Directions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testDirectionToOneSetOpEmojiUsingEmoji(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Direction
	var b, c Emoji

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, emojiDBTypes, false, strmangle.SetComplement(emojiPrimaryKeyColumns, emojiColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Emoji{&b, &c} {
		err = a.SetEmoji(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Emoji != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Directions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EmojiID != x.EmojiID {
			t.Error("foreign key was wrong value", a.EmojiID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EmojiID))
		reflect.Indirect(reflect.ValueOf(&a.EmojiID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EmojiID != x.EmojiID {
			t.Error("foreign key was wrong value", a.EmojiID, x.EmojiID)
		}
	}
}
func testDirectionToOneSetOpDesignPatternUsingDesignPattern(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Direction
	var b, c DesignPattern

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, directionDBTypes, false, strmangle.SetComplement(directionPrimaryKeyColumns, directionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, designPatternDBTypes, false, strmangle.SetComplement(designPatternPrimaryKeyColumns, designPatternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DesignPattern{&b, &c} {
		err = a.SetDesignPattern(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DesignPattern != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Directions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DesignPatternID != x.DesignPatternID {
			t.Error("foreign key was wrong value", a.DesignPatternID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DesignPatternID))
		reflect.Indirect(reflect.ValueOf(&a.DesignPatternID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DesignPatternID != x.DesignPatternID {
			t.Error("foreign key was wrong value", a.DesignPatternID, x.DesignPatternID)
		}
	}
}

func testDirectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDirectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DirectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDirectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Directions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	directionDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `DesignPatternID`: `int8`, `DirectionDescription`: `varchar`, `DirectionID`: `int8`, `EmojiID`: `int8`, `ParentDirectionID`: `int8`, `UserAccountID`: `int8`}
	_                = bytes.MinRead
)

func testDirectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(directionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(directionColumns) == len(directionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, directionDBTypes, true, directionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDirectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(directionColumns) == len(directionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Direction{}
	if err = randomize.Struct(seed, o, directionDBTypes, true, directionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, directionDBTypes, true, directionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(directionColumns, directionPrimaryKeyColumns) {
		fields = directionColumns
	} else {
		fields = strmangle.SetComplement(
			directionColumns,
			directionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DirectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDirectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(directionColumns) == len(directionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Direction{}
	if err = randomize.Struct(seed, &o, directionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Direction: %s", err)
	}

	count, err := Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, directionDBTypes, false, directionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Direction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Direction: %s", err)
	}

	count, err = Directions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
