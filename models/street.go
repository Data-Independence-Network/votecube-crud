// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Street is an object representing the database table.
type Street struct {
	StreetID     int64 `boil:"street_id" json:"street_id" toml:"street_id" yaml:"street_id"`
	StreetNameID int64 `boil:"street_name_id" json:"street_name_id" toml:"street_name_id" yaml:"street_name_id"`
	StreetTypeID int64 `boil:"street_type_id" json:"street_type_id" toml:"street_type_id" yaml:"street_type_id"`
	SuburbID     int64 `boil:"suburb_id" json:"suburb_id" toml:"suburb_id" yaml:"suburb_id"`

	R *streetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L streetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StreetColumns = struct {
	StreetID     string
	StreetNameID string
	StreetTypeID string
	SuburbID     string
}{
	StreetID:     "street_id",
	StreetNameID: "street_name_id",
	StreetTypeID: "street_type_id",
	SuburbID:     "suburb_id",
}

// StreetRels is where relationship names are stored.
var StreetRels = struct {
	Suburb     string
	StreetType string
	StreetName string
	Addresses  string
}{
	Suburb:     "Suburb",
	StreetType: "StreetType",
	StreetName: "StreetName",
	Addresses:  "Addresses",
}

// streetR is where relationships are stored.
type streetR struct {
	Suburb     *Suburb
	StreetType *StreetType
	StreetName *StreetName
	Addresses  AddressSlice
}

// NewStruct creates a new relationship struct
func (*streetR) NewStruct() *streetR {
	return &streetR{}
}

// streetL is where Load methods for each relationship are stored.
type streetL struct{}

var (
	streetColumns               = []string{"street_id", "street_name_id", "street_type_id", "suburb_id"}
	streetColumnsWithoutDefault = []string{"street_id", "street_name_id", "street_type_id", "suburb_id"}
	streetColumnsWithDefault    = []string{}
	streetPrimaryKeyColumns     = []string{"street_id"}
)

type (
	// StreetSlice is an alias for a slice of pointers to Street.
	// This should generally be used opposed to []Street.
	StreetSlice []*Street
	// StreetHook is the signature for custom Street hook methods
	StreetHook func(context.Context, boil.ContextExecutor, *Street) error

	streetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	streetType                 = reflect.TypeOf(&Street{})
	streetMapping              = queries.MakeStructMapping(streetType)
	streetPrimaryKeyMapping, _ = queries.BindMapping(streetType, streetMapping, streetPrimaryKeyColumns)
	streetInsertCacheMut       sync.RWMutex
	streetInsertCache          = make(map[string]insertCache)
	streetUpdateCacheMut       sync.RWMutex
	streetUpdateCache          = make(map[string]updateCache)
	streetUpsertCacheMut       sync.RWMutex
	streetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var streetBeforeInsertHooks []StreetHook
var streetBeforeUpdateHooks []StreetHook
var streetBeforeDeleteHooks []StreetHook
var streetBeforeUpsertHooks []StreetHook

var streetAfterInsertHooks []StreetHook
var streetAfterSelectHooks []StreetHook
var streetAfterUpdateHooks []StreetHook
var streetAfterDeleteHooks []StreetHook
var streetAfterUpsertHooks []StreetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Street) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Street) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Street) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Street) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Street) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Street) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Street) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Street) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Street) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range streetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStreetHook registers your hook function for all future operations.
func AddStreetHook(hookPoint boil.HookPoint, streetHook StreetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		streetBeforeInsertHooks = append(streetBeforeInsertHooks, streetHook)
	case boil.BeforeUpdateHook:
		streetBeforeUpdateHooks = append(streetBeforeUpdateHooks, streetHook)
	case boil.BeforeDeleteHook:
		streetBeforeDeleteHooks = append(streetBeforeDeleteHooks, streetHook)
	case boil.BeforeUpsertHook:
		streetBeforeUpsertHooks = append(streetBeforeUpsertHooks, streetHook)
	case boil.AfterInsertHook:
		streetAfterInsertHooks = append(streetAfterInsertHooks, streetHook)
	case boil.AfterSelectHook:
		streetAfterSelectHooks = append(streetAfterSelectHooks, streetHook)
	case boil.AfterUpdateHook:
		streetAfterUpdateHooks = append(streetAfterUpdateHooks, streetHook)
	case boil.AfterDeleteHook:
		streetAfterDeleteHooks = append(streetAfterDeleteHooks, streetHook)
	case boil.AfterUpsertHook:
		streetAfterUpsertHooks = append(streetAfterUpsertHooks, streetHook)
	}
}

// One returns a single street record from the query.
func (q streetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Street, error) {
	o := &Street{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for street")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Street records from the query.
func (q streetQuery) All(ctx context.Context, exec boil.ContextExecutor) (StreetSlice, error) {
	var o []*Street

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Street slice")
	}

	if len(streetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Street records in the query.
func (q streetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count street rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q streetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if street exists")
	}

	return count > 0, nil
}

// Suburb pointed to by the foreign key.
func (o *Street) Suburb(mods ...qm.QueryMod) suburbQuery {
	queryMods := []qm.QueryMod{
		qm.Where("suburb_id=?", o.SuburbID),
	}

	queryMods = append(queryMods, mods...)

	query := Suburbs(queryMods...)
	queries.SetFrom(query.Query, "\"suburb\"")

	return query
}

// StreetType pointed to by the foreign key.
func (o *Street) StreetType(mods ...qm.QueryMod) streetTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("street_type_id=?", o.StreetTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := StreetTypes(queryMods...)
	queries.SetFrom(query.Query, "\"street_type\"")

	return query
}

// StreetName pointed to by the foreign key.
func (o *Street) StreetName(mods ...qm.QueryMod) streetNameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("street_name_id=?", o.StreetNameID),
	}

	queryMods = append(queryMods, mods...)

	query := StreetNames(queryMods...)
	queries.SetFrom(query.Query, "\"street_name\"")

	return query
}

// Addresses retrieves all the address's Addresses with an executor.
func (o *Street) Addresses(mods ...qm.QueryMod) addressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"address\".\"street_id\"=?", o.StreetID),
	)

	query := Addresses(queryMods...)
	queries.SetFrom(query.Query, "\"address\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"address\".*"})
	}

	return query
}

// LoadSuburb allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (streetL) LoadSuburb(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStreet interface{}, mods queries.Applicator) error {
	var slice []*Street
	var object *Street

	if singular {
		object = maybeStreet.(*Street)
	} else {
		slice = *maybeStreet.(*[]*Street)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &streetR{}
		}
		args = append(args, object.SuburbID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &streetR{}
			}

			for _, a := range args {
				if a == obj.SuburbID {
					continue Outer
				}
			}

			args = append(args, obj.SuburbID)
		}
	}

	query := NewQuery(qm.From(`suburb`), qm.WhereIn(`suburb_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Suburb")
	}

	var resultSlice []*Suburb
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Suburb")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for suburb")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for suburb")
	}

	if len(streetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Suburb = foreign
		if foreign.R == nil {
			foreign.R = &suburbR{}
		}
		foreign.R.Streets = append(foreign.R.Streets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SuburbID == foreign.SuburbID {
				local.R.Suburb = foreign
				if foreign.R == nil {
					foreign.R = &suburbR{}
				}
				foreign.R.Streets = append(foreign.R.Streets, local)
				break
			}
		}
	}

	return nil
}

// LoadStreetType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (streetL) LoadStreetType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStreet interface{}, mods queries.Applicator) error {
	var slice []*Street
	var object *Street

	if singular {
		object = maybeStreet.(*Street)
	} else {
		slice = *maybeStreet.(*[]*Street)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &streetR{}
		}
		args = append(args, object.StreetTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &streetR{}
			}

			for _, a := range args {
				if a == obj.StreetTypeID {
					continue Outer
				}
			}

			args = append(args, obj.StreetTypeID)
		}
	}

	query := NewQuery(qm.From(`street_type`), qm.WhereIn(`street_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StreetType")
	}

	var resultSlice []*StreetType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StreetType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for street_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for street_type")
	}

	if len(streetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StreetType = foreign
		if foreign.R == nil {
			foreign.R = &streetTypeR{}
		}
		foreign.R.Streets = append(foreign.R.Streets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StreetTypeID == foreign.StreetTypeID {
				local.R.StreetType = foreign
				if foreign.R == nil {
					foreign.R = &streetTypeR{}
				}
				foreign.R.Streets = append(foreign.R.Streets, local)
				break
			}
		}
	}

	return nil
}

// LoadStreetName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (streetL) LoadStreetName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStreet interface{}, mods queries.Applicator) error {
	var slice []*Street
	var object *Street

	if singular {
		object = maybeStreet.(*Street)
	} else {
		slice = *maybeStreet.(*[]*Street)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &streetR{}
		}
		args = append(args, object.StreetNameID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &streetR{}
			}

			for _, a := range args {
				if a == obj.StreetNameID {
					continue Outer
				}
			}

			args = append(args, obj.StreetNameID)
		}
	}

	query := NewQuery(qm.From(`street_name`), qm.WhereIn(`street_name_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StreetName")
	}

	var resultSlice []*StreetName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StreetName")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for street_name")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for street_name")
	}

	if len(streetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StreetName = foreign
		if foreign.R == nil {
			foreign.R = &streetNameR{}
		}
		foreign.R.Streets = append(foreign.R.Streets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StreetNameID == foreign.StreetNameID {
				local.R.StreetName = foreign
				if foreign.R == nil {
					foreign.R = &streetNameR{}
				}
				foreign.R.Streets = append(foreign.R.Streets, local)
				break
			}
		}
	}

	return nil
}

// LoadAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (streetL) LoadAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStreet interface{}, mods queries.Applicator) error {
	var slice []*Street
	var object *Street

	if singular {
		object = maybeStreet.(*Street)
	} else {
		slice = *maybeStreet.(*[]*Street)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &streetR{}
		}
		args = append(args, object.StreetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &streetR{}
			}

			for _, a := range args {
				if a == obj.StreetID {
					continue Outer
				}
			}

			args = append(args, obj.StreetID)
		}
	}

	query := NewQuery(qm.From(`address`), qm.WhereIn(`street_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for address")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Addresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &addressR{}
			}
			foreign.R.Street = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StreetID == foreign.StreetID {
				local.R.Addresses = append(local.R.Addresses, foreign)
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.Street = local
				break
			}
		}
	}

	return nil
}

// SetSuburb of the street to the related item.
// Sets o.R.Suburb to related.
// Adds o to related.R.Streets.
func (o *Street) SetSuburb(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Suburb) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"street\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"suburb_id"}),
		strmangle.WhereClause("\"", "\"", 2, streetPrimaryKeyColumns),
	)
	values := []interface{}{related.SuburbID, o.StreetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SuburbID = related.SuburbID
	if o.R == nil {
		o.R = &streetR{
			Suburb: related,
		}
	} else {
		o.R.Suburb = related
	}

	if related.R == nil {
		related.R = &suburbR{
			Streets: StreetSlice{o},
		}
	} else {
		related.R.Streets = append(related.R.Streets, o)
	}

	return nil
}

// SetStreetType of the street to the related item.
// Sets o.R.StreetType to related.
// Adds o to related.R.Streets.
func (o *Street) SetStreetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StreetType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"street\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"street_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, streetPrimaryKeyColumns),
	)
	values := []interface{}{related.StreetTypeID, o.StreetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StreetTypeID = related.StreetTypeID
	if o.R == nil {
		o.R = &streetR{
			StreetType: related,
		}
	} else {
		o.R.StreetType = related
	}

	if related.R == nil {
		related.R = &streetTypeR{
			Streets: StreetSlice{o},
		}
	} else {
		related.R.Streets = append(related.R.Streets, o)
	}

	return nil
}

// SetStreetName of the street to the related item.
// Sets o.R.StreetName to related.
// Adds o to related.R.Streets.
func (o *Street) SetStreetName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StreetName) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"street\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"street_name_id"}),
		strmangle.WhereClause("\"", "\"", 2, streetPrimaryKeyColumns),
	)
	values := []interface{}{related.StreetNameID, o.StreetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StreetNameID = related.StreetNameID
	if o.R == nil {
		o.R = &streetR{
			StreetName: related,
		}
	} else {
		o.R.StreetName = related
	}

	if related.R == nil {
		related.R = &streetNameR{
			Streets: StreetSlice{o},
		}
	} else {
		related.R.Streets = append(related.R.Streets, o)
	}

	return nil
}

// AddAddresses adds the given related objects to the existing relationships
// of the street, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Street appropriately.
func (o *Street) AddAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Address) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StreetID = o.StreetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"address\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"street_id"}),
				strmangle.WhereClause("\"", "\"", 2, addressPrimaryKeyColumns),
			)
			values := []interface{}{o.StreetID, rel.AddressID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StreetID = o.StreetID
		}
	}

	if o.R == nil {
		o.R = &streetR{
			Addresses: related,
		}
	} else {
		o.R.Addresses = append(o.R.Addresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &addressR{
				Street: o,
			}
		} else {
			rel.R.Street = o
		}
	}
	return nil
}

// Streets retrieves all the records using an executor.
func Streets(mods ...qm.QueryMod) streetQuery {
	mods = append(mods, qm.From("\"street\""))
	return streetQuery{NewQuery(mods...)}
}

// FindStreet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStreet(ctx context.Context, exec boil.ContextExecutor, streetID int64, selectCols ...string) (*Street, error) {
	streetObj := &Street{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"street\" where \"street_id\"=$1", sel,
	)

	q := queries.Raw(query, streetID)

	err := q.Bind(ctx, exec, streetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from street")
	}

	return streetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Street) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no street provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(streetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	streetInsertCacheMut.RLock()
	cache, cached := streetInsertCache[key]
	streetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			streetColumns,
			streetColumnsWithDefault,
			streetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(streetType, streetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(streetType, streetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"street\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"street\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into street")
	}

	if !cached {
		streetInsertCacheMut.Lock()
		streetInsertCache[key] = cache
		streetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Street.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Street) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	streetUpdateCacheMut.RLock()
	cache, cached := streetUpdateCache[key]
	streetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			streetColumns,
			streetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update street, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"street\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, streetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(streetType, streetMapping, append(wl, streetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update street row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for street")
	}

	if !cached {
		streetUpdateCacheMut.Lock()
		streetUpdateCache[key] = cache
		streetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q streetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for street")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for street")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StreetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), streetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"street\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, streetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in street slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all street")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Street) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no street provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(streetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	streetUpsertCacheMut.RLock()
	cache, cached := streetUpsertCache[key]
	streetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			streetColumns,
			streetColumnsWithDefault,
			streetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			streetColumns,
			streetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert street, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(streetPrimaryKeyColumns))
			copy(conflict, streetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"street\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(streetType, streetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(streetType, streetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert street")
	}

	if !cached {
		streetUpsertCacheMut.Lock()
		streetUpsertCache[key] = cache
		streetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Street record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Street) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Street provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), streetPrimaryKeyMapping)
	sql := "DELETE FROM \"street\" WHERE \"street_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from street")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for street")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q streetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no streetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from street")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for street")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StreetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Street slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(streetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), streetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"street\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, streetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from street slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for street")
	}

	if len(streetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Street) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStreet(ctx, exec, o.StreetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StreetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StreetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), streetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"street\".* FROM \"street\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, streetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StreetSlice")
	}

	*o = slice

	return nil
}

// StreetExists checks if the Street row exists.
func StreetExists(ctx context.Context, exec boil.ContextExecutor, streetID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"street\" where \"street_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, streetID)
	}

	row := exec.QueryRowContext(ctx, sql, streetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if street exists")
	}

	return exists, nil
}
