// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserAccountSuffixes(t *testing.T) {
	t.Parallel()

	query := UserAccountSuffixes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserAccountSuffixesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountSuffixesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserAccountSuffixes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountSuffixesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountSuffixSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountSuffixesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserAccountSuffixExists(ctx, tx, o.UserAccountSuffixID)
	if err != nil {
		t.Errorf("Unable to check if UserAccountSuffix exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAccountSuffixExists to return true, but got false.")
	}
}

func testUserAccountSuffixesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userAccountSuffixFound, err := FindUserAccountSuffix(ctx, tx, o.UserAccountSuffixID)
	if err != nil {
		t.Error(err)
	}

	if userAccountSuffixFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserAccountSuffixesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserAccountSuffixes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserAccountSuffixesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserAccountSuffixes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAccountSuffixesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountSuffixOne := &UserAccountSuffix{}
	userAccountSuffixTwo := &UserAccountSuffix{}
	if err = randomize.Struct(seed, userAccountSuffixOne, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountSuffixTwo, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountSuffixOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountSuffixTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccountSuffixes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAccountSuffixesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAccountSuffixOne := &UserAccountSuffix{}
	userAccountSuffixTwo := &UserAccountSuffix{}
	if err = randomize.Struct(seed, userAccountSuffixOne, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountSuffixTwo, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountSuffixOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountSuffixTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userAccountSuffixBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func userAccountSuffixAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountSuffix) error {
	*o = UserAccountSuffix{}
	return nil
}

func testUserAccountSuffixesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserAccountSuffix{}
	o := &UserAccountSuffix{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix object: %s", err)
	}

	AddUserAccountSuffixHook(boil.BeforeInsertHook, userAccountSuffixBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixBeforeInsertHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.AfterInsertHook, userAccountSuffixAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixAfterInsertHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.AfterSelectHook, userAccountSuffixAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixAfterSelectHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.BeforeUpdateHook, userAccountSuffixBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixBeforeUpdateHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.AfterUpdateHook, userAccountSuffixAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixAfterUpdateHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.BeforeDeleteHook, userAccountSuffixBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixBeforeDeleteHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.AfterDeleteHook, userAccountSuffixAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixAfterDeleteHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.BeforeUpsertHook, userAccountSuffixBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixBeforeUpsertHooks = []UserAccountSuffixHook{}

	AddUserAccountSuffixHook(boil.AfterUpsertHook, userAccountSuffixAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountSuffixAfterUpsertHooks = []UserAccountSuffixHook{}
}

func testUserAccountSuffixesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountSuffixesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userAccountSuffixColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountSuffixToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAccountSuffix
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := UserAccountSuffixSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*UserAccountSuffix)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountSuffixToOneSuffixUsingSuffix(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAccountSuffix
	var foreign Suffix

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, suffixDBTypes, false, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SuffixID = foreign.SuffixID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Suffix().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.SuffixID != foreign.SuffixID {
		t.Errorf("want: %v, got %v", foreign.SuffixID, check.SuffixID)
	}

	slice := UserAccountSuffixSlice{&local}
	if err = local.L.LoadSuffix(ctx, tx, false, (*[]*UserAccountSuffix)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Suffix == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Suffix = nil
	if err = local.L.LoadSuffix(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Suffix == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountSuffixToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccountSuffix
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountSuffixDBTypes, false, strmangle.SetComplement(userAccountSuffixPrimaryKeyColumns, userAccountSuffixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccountSuffixes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testUserAccountSuffixToOneSetOpSuffixUsingSuffix(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccountSuffix
	var b, c Suffix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountSuffixDBTypes, false, strmangle.SetComplement(userAccountSuffixPrimaryKeyColumns, userAccountSuffixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, suffixDBTypes, false, strmangle.SetComplement(suffixPrimaryKeyColumns, suffixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, suffixDBTypes, false, strmangle.SetComplement(suffixPrimaryKeyColumns, suffixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Suffix{&b, &c} {
		err = a.SetSuffix(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Suffix != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccountSuffixes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SuffixID != x.SuffixID {
			t.Error("foreign key was wrong value", a.SuffixID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SuffixID))
		reflect.Indirect(reflect.ValueOf(&a.SuffixID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SuffixID != x.SuffixID {
			t.Error("foreign key was wrong value", a.SuffixID, x.SuffixID)
		}
	}
}

func testUserAccountSuffixesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountSuffixesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountSuffixSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountSuffixesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccountSuffixes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAccountSuffixDBTypes = map[string]string{`SuffixID`: `int8`, `SuffixPosition`: `int2`, `UserAccountID`: `int8`, `UserAccountSuffixID`: `int8`}
	_                        = bytes.MinRead
)

func testUserAccountSuffixesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userAccountSuffixPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAccountSuffixColumns) == len(userAccountSuffixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserAccountSuffixesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAccountSuffixColumns) == len(userAccountSuffixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountSuffix{}
	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountSuffixDBTypes, true, userAccountSuffixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAccountSuffixColumns, userAccountSuffixPrimaryKeyColumns) {
		fields = userAccountSuffixColumns
	} else {
		fields = strmangle.SetComplement(
			userAccountSuffixColumns,
			userAccountSuffixPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserAccountSuffixSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserAccountSuffixesUpsert(t *testing.T) {
	t.Parallel()

	if len(userAccountSuffixColumns) == len(userAccountSuffixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserAccountSuffix{}
	if err = randomize.Struct(seed, &o, userAccountSuffixDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccountSuffix: %s", err)
	}

	count, err := UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userAccountSuffixDBTypes, false, userAccountSuffixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountSuffix struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccountSuffix: %s", err)
	}

	count, err = UserAccountSuffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
