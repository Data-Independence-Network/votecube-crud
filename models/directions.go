// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Direction is an object representing the database table.
type Direction struct {
	DirectionID          int64     `boil:"direction_id" json:"direction_id" toml:"direction_id" yaml:"direction_id"`
	ParentDirectionID    int64     `boil:"parent_direction_id" json:"parent_direction_id" toml:"parent_direction_id" yaml:"parent_direction_id"`
	DirectionDescription string    `boil:"direction_description" json:"direction_description" toml:"direction_description" yaml:"direction_description"`
	UserAccountID        int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	DesignPatternID      int64     `boil:"design_pattern_id" json:"design_pattern_id" toml:"design_pattern_id" yaml:"design_pattern_id"`
	EmojiID              int64     `boil:"emoji_id" json:"emoji_id" toml:"emoji_id" yaml:"emoji_id"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *directionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L directionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DirectionColumns = struct {
	DirectionID          string
	ParentDirectionID    string
	DirectionDescription string
	UserAccountID        string
	DesignPatternID      string
	EmojiID              string
	CreatedAt            string
}{
	DirectionID:          "direction_id",
	ParentDirectionID:    "parent_direction_id",
	DirectionDescription: "direction_description",
	UserAccountID:        "user_account_id",
	DesignPatternID:      "design_pattern_id",
	EmojiID:              "emoji_id",
	CreatedAt:            "created_at",
}

// DirectionRels is where relationship names are stored.
var DirectionRels = struct {
	UserAccount         string
	Emoji               string
	DesignPattern       string
	DimensionDirections string
}{
	UserAccount:         "UserAccount",
	Emoji:               "Emoji",
	DesignPattern:       "DesignPattern",
	DimensionDirections: "DimensionDirections",
}

// directionR is where relationships are stored.
type directionR struct {
	UserAccount         *UserAccount
	Emoji               *Emoji
	DesignPattern       *DesignPattern
	DimensionDirections DimensionDirectionSlice
}

// NewStruct creates a new relationship struct
func (*directionR) NewStruct() *directionR {
	return &directionR{}
}

// directionL is where Load methods for each relationship are stored.
type directionL struct{}

var (
	directionColumns               = []string{"direction_id", "parent_direction_id", "direction_description", "user_account_id", "design_pattern_id", "emoji_id", "created_at"}
	directionColumnsWithoutDefault = []string{"direction_id", "parent_direction_id", "direction_description", "user_account_id", "design_pattern_id", "emoji_id", "created_at"}
	directionColumnsWithDefault    = []string{}
	directionPrimaryKeyColumns     = []string{"direction_id"}
)

type (
	// DirectionSlice is an alias for a slice of pointers to Direction.
	// This should generally be used opposed to []Direction.
	DirectionSlice []*Direction
	// DirectionHook is the signature for custom Direction hook methods
	DirectionHook func(context.Context, boil.ContextExecutor, *Direction) error

	directionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	directionType                 = reflect.TypeOf(&Direction{})
	directionMapping              = queries.MakeStructMapping(directionType)
	directionPrimaryKeyMapping, _ = queries.BindMapping(directionType, directionMapping, directionPrimaryKeyColumns)
	directionInsertCacheMut       sync.RWMutex
	directionInsertCache          = make(map[string]insertCache)
	directionUpdateCacheMut       sync.RWMutex
	directionUpdateCache          = make(map[string]updateCache)
	directionUpsertCacheMut       sync.RWMutex
	directionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var directionBeforeInsertHooks []DirectionHook
var directionBeforeUpdateHooks []DirectionHook
var directionBeforeDeleteHooks []DirectionHook
var directionBeforeUpsertHooks []DirectionHook

var directionAfterInsertHooks []DirectionHook
var directionAfterSelectHooks []DirectionHook
var directionAfterUpdateHooks []DirectionHook
var directionAfterDeleteHooks []DirectionHook
var directionAfterUpsertHooks []DirectionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Direction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Direction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Direction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Direction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Direction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Direction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Direction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Direction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Direction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range directionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDirectionHook registers your hook function for all future operations.
func AddDirectionHook(hookPoint boil.HookPoint, directionHook DirectionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		directionBeforeInsertHooks = append(directionBeforeInsertHooks, directionHook)
	case boil.BeforeUpdateHook:
		directionBeforeUpdateHooks = append(directionBeforeUpdateHooks, directionHook)
	case boil.BeforeDeleteHook:
		directionBeforeDeleteHooks = append(directionBeforeDeleteHooks, directionHook)
	case boil.BeforeUpsertHook:
		directionBeforeUpsertHooks = append(directionBeforeUpsertHooks, directionHook)
	case boil.AfterInsertHook:
		directionAfterInsertHooks = append(directionAfterInsertHooks, directionHook)
	case boil.AfterSelectHook:
		directionAfterSelectHooks = append(directionAfterSelectHooks, directionHook)
	case boil.AfterUpdateHook:
		directionAfterUpdateHooks = append(directionAfterUpdateHooks, directionHook)
	case boil.AfterDeleteHook:
		directionAfterDeleteHooks = append(directionAfterDeleteHooks, directionHook)
	case boil.AfterUpsertHook:
		directionAfterUpsertHooks = append(directionAfterUpsertHooks, directionHook)
	}
}

// OneG returns a single direction record from the query using the global executor.
func (q directionQuery) OneG(ctx context.Context) (*Direction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single direction record from the query.
func (q directionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Direction, error) {
	o := &Direction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for directions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Direction records from the query using the global executor.
func (q directionQuery) AllG(ctx context.Context) (DirectionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Direction records from the query.
func (q directionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DirectionSlice, error) {
	var o []*Direction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Direction slice")
	}

	if len(directionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Direction records in the query, and panics on error.
func (q directionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Direction records in the query.
func (q directionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count directions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q directionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q directionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if directions exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *Direction) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Emoji pointed to by the foreign key.
func (o *Direction) Emoji(mods ...qm.QueryMod) emojiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("emoji_id=?", o.EmojiID),
	}

	queryMods = append(queryMods, mods...)

	query := Emojis(queryMods...)
	queries.SetFrom(query.Query, "\"emoji\"")

	return query
}

// DesignPattern pointed to by the foreign key.
func (o *Direction) DesignPattern(mods ...qm.QueryMod) designPatternQuery {
	queryMods := []qm.QueryMod{
		qm.Where("design_pattern_id=?", o.DesignPatternID),
	}

	queryMods = append(queryMods, mods...)

	query := DesignPatterns(queryMods...)
	queries.SetFrom(query.Query, "\"design_patterns\"")

	return query
}

// DimensionDirections retrieves all the dimension_direction's DimensionDirections with an executor.
func (o *Direction) DimensionDirections(mods ...qm.QueryMod) dimensionDirectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dimension_directions\".\"direction_id\"=?", o.DirectionID),
	)

	query := DimensionDirections(queryMods...)
	queries.SetFrom(query.Query, "\"dimension_directions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dimension_directions\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (directionL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDirection interface{}, mods queries.Applicator) error {
	var slice []*Direction
	var object *Direction

	if singular {
		object = maybeDirection.(*Direction)
	} else {
		slice = *maybeDirection.(*[]*Direction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &directionR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &directionR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(directionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Directions = append(foreign.R.Directions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Directions = append(foreign.R.Directions, local)
				break
			}
		}
	}

	return nil
}

// LoadEmoji allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (directionL) LoadEmoji(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDirection interface{}, mods queries.Applicator) error {
	var slice []*Direction
	var object *Direction

	if singular {
		object = maybeDirection.(*Direction)
	} else {
		slice = *maybeDirection.(*[]*Direction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &directionR{}
		}
		args = append(args, object.EmojiID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &directionR{}
			}

			for _, a := range args {
				if a == obj.EmojiID {
					continue Outer
				}
			}

			args = append(args, obj.EmojiID)
		}
	}

	query := NewQuery(qm.From(`emoji`), qm.WhereIn(`emoji_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Emoji")
	}

	var resultSlice []*Emoji
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Emoji")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for emoji")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for emoji")
	}

	if len(directionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Emoji = foreign
		if foreign.R == nil {
			foreign.R = &emojiR{}
		}
		foreign.R.Directions = append(foreign.R.Directions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmojiID == foreign.EmojiID {
				local.R.Emoji = foreign
				if foreign.R == nil {
					foreign.R = &emojiR{}
				}
				foreign.R.Directions = append(foreign.R.Directions, local)
				break
			}
		}
	}

	return nil
}

// LoadDesignPattern allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (directionL) LoadDesignPattern(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDirection interface{}, mods queries.Applicator) error {
	var slice []*Direction
	var object *Direction

	if singular {
		object = maybeDirection.(*Direction)
	} else {
		slice = *maybeDirection.(*[]*Direction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &directionR{}
		}
		args = append(args, object.DesignPatternID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &directionR{}
			}

			for _, a := range args {
				if a == obj.DesignPatternID {
					continue Outer
				}
			}

			args = append(args, obj.DesignPatternID)
		}
	}

	query := NewQuery(qm.From(`design_patterns`), qm.WhereIn(`design_pattern_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DesignPattern")
	}

	var resultSlice []*DesignPattern
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DesignPattern")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for design_patterns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for design_patterns")
	}

	if len(directionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DesignPattern = foreign
		if foreign.R == nil {
			foreign.R = &designPatternR{}
		}
		foreign.R.Directions = append(foreign.R.Directions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DesignPatternID == foreign.DesignPatternID {
				local.R.DesignPattern = foreign
				if foreign.R == nil {
					foreign.R = &designPatternR{}
				}
				foreign.R.Directions = append(foreign.R.Directions, local)
				break
			}
		}
	}

	return nil
}

// LoadDimensionDirections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (directionL) LoadDimensionDirections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDirection interface{}, mods queries.Applicator) error {
	var slice []*Direction
	var object *Direction

	if singular {
		object = maybeDirection.(*Direction)
	} else {
		slice = *maybeDirection.(*[]*Direction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &directionR{}
		}
		args = append(args, object.DirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &directionR{}
			}

			for _, a := range args {
				if a == obj.DirectionID {
					continue Outer
				}
			}

			args = append(args, obj.DirectionID)
		}
	}

	query := NewQuery(qm.From(`dimension_directions`), qm.WhereIn(`direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dimension_directions")
	}

	var resultSlice []*DimensionDirection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dimension_directions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dimension_directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimension_directions")
	}

	if len(dimensionDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DimensionDirections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dimensionDirectionR{}
			}
			foreign.R.Direction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DirectionID == foreign.DirectionID {
				local.R.DimensionDirections = append(local.R.DimensionDirections, foreign)
				if foreign.R == nil {
					foreign.R = &dimensionDirectionR{}
				}
				foreign.R.Direction = local
				break
			}
		}
	}

	return nil
}

// SetUserAccountG of the direction to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Directions.
// Uses the global database handle.
func (o *Direction) SetUserAccountG(ctx context.Context, insert bool, related *UserAccount) error {
	return o.SetUserAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetUserAccount of the direction to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Directions.
func (o *Direction) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, directionPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.DirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &directionR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Directions: DirectionSlice{o},
		}
	} else {
		related.R.Directions = append(related.R.Directions, o)
	}

	return nil
}

// SetEmojiG of the direction to the related item.
// Sets o.R.Emoji to related.
// Adds o to related.R.Directions.
// Uses the global database handle.
func (o *Direction) SetEmojiG(ctx context.Context, insert bool, related *Emoji) error {
	return o.SetEmoji(ctx, boil.GetContextDB(), insert, related)
}

// SetEmoji of the direction to the related item.
// Sets o.R.Emoji to related.
// Adds o to related.R.Directions.
func (o *Direction) SetEmoji(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Emoji) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"emoji_id"}),
		strmangle.WhereClause("\"", "\"", 2, directionPrimaryKeyColumns),
	)
	values := []interface{}{related.EmojiID, o.DirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmojiID = related.EmojiID
	if o.R == nil {
		o.R = &directionR{
			Emoji: related,
		}
	} else {
		o.R.Emoji = related
	}

	if related.R == nil {
		related.R = &emojiR{
			Directions: DirectionSlice{o},
		}
	} else {
		related.R.Directions = append(related.R.Directions, o)
	}

	return nil
}

// SetDesignPatternG of the direction to the related item.
// Sets o.R.DesignPattern to related.
// Adds o to related.R.Directions.
// Uses the global database handle.
func (o *Direction) SetDesignPatternG(ctx context.Context, insert bool, related *DesignPattern) error {
	return o.SetDesignPattern(ctx, boil.GetContextDB(), insert, related)
}

// SetDesignPattern of the direction to the related item.
// Sets o.R.DesignPattern to related.
// Adds o to related.R.Directions.
func (o *Direction) SetDesignPattern(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DesignPattern) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"design_pattern_id"}),
		strmangle.WhereClause("\"", "\"", 2, directionPrimaryKeyColumns),
	)
	values := []interface{}{related.DesignPatternID, o.DirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DesignPatternID = related.DesignPatternID
	if o.R == nil {
		o.R = &directionR{
			DesignPattern: related,
		}
	} else {
		o.R.DesignPattern = related
	}

	if related.R == nil {
		related.R = &designPatternR{
			Directions: DirectionSlice{o},
		}
	} else {
		related.R.Directions = append(related.R.Directions, o)
	}

	return nil
}

// AddDimensionDirectionsG adds the given related objects to the existing relationships
// of the direction, optionally inserting them as new records.
// Appends related to o.R.DimensionDirections.
// Sets related.R.Direction appropriately.
// Uses the global database handle.
func (o *Direction) AddDimensionDirectionsG(ctx context.Context, insert bool, related ...*DimensionDirection) error {
	return o.AddDimensionDirections(ctx, boil.GetContextDB(), insert, related...)
}

// AddDimensionDirections adds the given related objects to the existing relationships
// of the direction, optionally inserting them as new records.
// Appends related to o.R.DimensionDirections.
// Sets related.R.Direction appropriately.
func (o *Direction) AddDimensionDirections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DimensionDirection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DirectionID = o.DirectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dimension_directions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"direction_id"}),
				strmangle.WhereClause("\"", "\"", 2, dimensionDirectionPrimaryKeyColumns),
			)
			values := []interface{}{o.DirectionID, rel.DimensionDirectionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DirectionID = o.DirectionID
		}
	}

	if o.R == nil {
		o.R = &directionR{
			DimensionDirections: related,
		}
	} else {
		o.R.DimensionDirections = append(o.R.DimensionDirections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dimensionDirectionR{
				Direction: o,
			}
		} else {
			rel.R.Direction = o
		}
	}
	return nil
}

// Directions retrieves all the records using an executor.
func Directions(mods ...qm.QueryMod) directionQuery {
	mods = append(mods, qm.From("\"directions\""))
	return directionQuery{NewQuery(mods...)}
}

// FindDirectionG retrieves a single record by ID.
func FindDirectionG(ctx context.Context, directionID int64, selectCols ...string) (*Direction, error) {
	return FindDirection(ctx, boil.GetContextDB(), directionID, selectCols...)
}

// FindDirection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDirection(ctx context.Context, exec boil.ContextExecutor, directionID int64, selectCols ...string) (*Direction, error) {
	directionObj := &Direction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"directions\" where \"direction_id\"=$1", sel,
	)

	q := queries.Raw(query, directionID)

	err := q.Bind(ctx, exec, directionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from directions")
	}

	return directionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Direction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Direction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no directions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(directionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	directionInsertCacheMut.RLock()
	cache, cached := directionInsertCache[key]
	directionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			directionColumns,
			directionColumnsWithDefault,
			directionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(directionType, directionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(directionType, directionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"directions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"directions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into directions")
	}

	if !cached {
		directionInsertCacheMut.Lock()
		directionInsertCache[key] = cache
		directionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Direction record using the global executor.
// See Update for more documentation.
func (o *Direction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Direction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Direction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	directionUpdateCacheMut.RLock()
	cache, cached := directionUpdateCache[key]
	directionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			directionColumns,
			directionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update directions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"directions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, directionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(directionType, directionMapping, append(wl, directionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update directions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for directions")
	}

	if !cached {
		directionUpdateCacheMut.Lock()
		directionUpdateCache[key] = cache
		directionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q directionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for directions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DirectionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DirectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), directionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, directionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in direction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all direction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Direction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Direction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no directions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(directionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	directionUpsertCacheMut.RLock()
	cache, cached := directionUpsertCache[key]
	directionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			directionColumns,
			directionColumnsWithDefault,
			directionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			directionColumns,
			directionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert directions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(directionPrimaryKeyColumns))
			copy(conflict, directionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"directions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(directionType, directionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(directionType, directionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert directions")
	}

	if !cached {
		directionUpsertCacheMut.Lock()
		directionUpsertCache[key] = cache
		directionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Direction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Direction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Direction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Direction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Direction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), directionPrimaryKeyMapping)
	sql := "DELETE FROM \"directions\" WHERE \"direction_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for directions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q directionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no directionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for directions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DirectionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DirectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Direction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(directionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), directionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"directions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, directionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from direction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for directions")
	}

	if len(directionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Direction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Direction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Direction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDirection(ctx, exec, o.DirectionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DirectionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DirectionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DirectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DirectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), directionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"directions\".* FROM \"directions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, directionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DirectionSlice")
	}

	*o = slice

	return nil
}

// DirectionExistsG checks if the Direction row exists.
func DirectionExistsG(ctx context.Context, directionID int64) (bool, error) {
	return DirectionExists(ctx, boil.GetContextDB(), directionID)
}

// DirectionExists checks if the Direction row exists.
func DirectionExists(ctx context.Context, exec boil.ContextExecutor, directionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"directions\" where \"direction_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, directionID)
	}

	row := exec.QueryRowContext(ctx, sql, directionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if directions exists")
	}

	return exists, nil
}
