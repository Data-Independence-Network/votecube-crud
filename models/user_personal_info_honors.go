// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserPersonalInfoHonor is an object representing the database table.
type UserPersonalInfoHonor struct {
	UserPersonalInfoHonorID int64 `boil:"user_personal_info_honor_id" json:"user_personal_info_honor_id" toml:"user_personal_info_honor_id" yaml:"user_personal_info_honor_id"`
	HonorID                 int64 `boil:"honor_id" json:"honor_id" toml:"honor_id" yaml:"honor_id"`
	UserPersonalInfoID      int64 `boil:"user_personal_info_id" json:"user_personal_info_id" toml:"user_personal_info_id" yaml:"user_personal_info_id"`
	HonorsPosition          int16 `boil:"honors_position" json:"honors_position" toml:"honors_position" yaml:"honors_position"`

	R *userPersonalInfoHonorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPersonalInfoHonorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPersonalInfoHonorColumns = struct {
	UserPersonalInfoHonorID string
	HonorID                 string
	UserPersonalInfoID      string
	HonorsPosition          string
}{
	UserPersonalInfoHonorID: "user_personal_info_honor_id",
	HonorID:                 "honor_id",
	UserPersonalInfoID:      "user_personal_info_id",
	HonorsPosition:          "honors_position",
}

// UserPersonalInfoHonorRels is where relationship names are stored.
var UserPersonalInfoHonorRels = struct {
	UserPersonalInfo string
	Honor            string
}{
	UserPersonalInfo: "UserPersonalInfo",
	Honor:            "Honor",
}

// userPersonalInfoHonorR is where relationships are stored.
type userPersonalInfoHonorR struct {
	UserPersonalInfo *UserPersonalInfo
	Honor            *Honor
}

// NewStruct creates a new relationship struct
func (*userPersonalInfoHonorR) NewStruct() *userPersonalInfoHonorR {
	return &userPersonalInfoHonorR{}
}

// userPersonalInfoHonorL is where Load methods for each relationship are stored.
type userPersonalInfoHonorL struct{}

var (
	userPersonalInfoHonorColumns               = []string{"user_personal_info_honor_id", "honor_id", "user_personal_info_id", "honors_position"}
	userPersonalInfoHonorColumnsWithoutDefault = []string{"user_personal_info_honor_id", "honor_id", "user_personal_info_id", "honors_position"}
	userPersonalInfoHonorColumnsWithDefault    = []string{}
	userPersonalInfoHonorPrimaryKeyColumns     = []string{"user_personal_info_honor_id"}
)

type (
	// UserPersonalInfoHonorSlice is an alias for a slice of pointers to UserPersonalInfoHonor.
	// This should generally be used opposed to []UserPersonalInfoHonor.
	UserPersonalInfoHonorSlice []*UserPersonalInfoHonor
	// UserPersonalInfoHonorHook is the signature for custom UserPersonalInfoHonor hook methods
	UserPersonalInfoHonorHook func(context.Context, boil.ContextExecutor, *UserPersonalInfoHonor) error

	userPersonalInfoHonorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPersonalInfoHonorType                 = reflect.TypeOf(&UserPersonalInfoHonor{})
	userPersonalInfoHonorMapping              = queries.MakeStructMapping(userPersonalInfoHonorType)
	userPersonalInfoHonorPrimaryKeyMapping, _ = queries.BindMapping(userPersonalInfoHonorType, userPersonalInfoHonorMapping, userPersonalInfoHonorPrimaryKeyColumns)
	userPersonalInfoHonorInsertCacheMut       sync.RWMutex
	userPersonalInfoHonorInsertCache          = make(map[string]insertCache)
	userPersonalInfoHonorUpdateCacheMut       sync.RWMutex
	userPersonalInfoHonorUpdateCache          = make(map[string]updateCache)
	userPersonalInfoHonorUpsertCacheMut       sync.RWMutex
	userPersonalInfoHonorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userPersonalInfoHonorBeforeInsertHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorBeforeUpdateHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorBeforeDeleteHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorBeforeUpsertHooks []UserPersonalInfoHonorHook

var userPersonalInfoHonorAfterInsertHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorAfterSelectHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorAfterUpdateHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorAfterDeleteHooks []UserPersonalInfoHonorHook
var userPersonalInfoHonorAfterUpsertHooks []UserPersonalInfoHonorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPersonalInfoHonor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPersonalInfoHonor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPersonalInfoHonor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPersonalInfoHonor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPersonalInfoHonor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPersonalInfoHonor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPersonalInfoHonor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPersonalInfoHonor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPersonalInfoHonor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoHonorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPersonalInfoHonorHook registers your hook function for all future operations.
func AddUserPersonalInfoHonorHook(hookPoint boil.HookPoint, userPersonalInfoHonorHook UserPersonalInfoHonorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userPersonalInfoHonorBeforeInsertHooks = append(userPersonalInfoHonorBeforeInsertHooks, userPersonalInfoHonorHook)
	case boil.BeforeUpdateHook:
		userPersonalInfoHonorBeforeUpdateHooks = append(userPersonalInfoHonorBeforeUpdateHooks, userPersonalInfoHonorHook)
	case boil.BeforeDeleteHook:
		userPersonalInfoHonorBeforeDeleteHooks = append(userPersonalInfoHonorBeforeDeleteHooks, userPersonalInfoHonorHook)
	case boil.BeforeUpsertHook:
		userPersonalInfoHonorBeforeUpsertHooks = append(userPersonalInfoHonorBeforeUpsertHooks, userPersonalInfoHonorHook)
	case boil.AfterInsertHook:
		userPersonalInfoHonorAfterInsertHooks = append(userPersonalInfoHonorAfterInsertHooks, userPersonalInfoHonorHook)
	case boil.AfterSelectHook:
		userPersonalInfoHonorAfterSelectHooks = append(userPersonalInfoHonorAfterSelectHooks, userPersonalInfoHonorHook)
	case boil.AfterUpdateHook:
		userPersonalInfoHonorAfterUpdateHooks = append(userPersonalInfoHonorAfterUpdateHooks, userPersonalInfoHonorHook)
	case boil.AfterDeleteHook:
		userPersonalInfoHonorAfterDeleteHooks = append(userPersonalInfoHonorAfterDeleteHooks, userPersonalInfoHonorHook)
	case boil.AfterUpsertHook:
		userPersonalInfoHonorAfterUpsertHooks = append(userPersonalInfoHonorAfterUpsertHooks, userPersonalInfoHonorHook)
	}
}

// One returns a single userPersonalInfoHonor record from the query.
func (q userPersonalInfoHonorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPersonalInfoHonor, error) {
	o := &UserPersonalInfoHonor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_personal_info_honors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserPersonalInfoHonor records from the query.
func (q userPersonalInfoHonorQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPersonalInfoHonorSlice, error) {
	var o []*UserPersonalInfoHonor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserPersonalInfoHonor slice")
	}

	if len(userPersonalInfoHonorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserPersonalInfoHonor records in the query.
func (q userPersonalInfoHonorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_personal_info_honors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userPersonalInfoHonorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_personal_info_honors exists")
	}

	return count > 0, nil
}

// UserPersonalInfo pointed to by the foreign key.
func (o *UserPersonalInfoHonor) UserPersonalInfo(mods ...qm.QueryMod) userPersonalInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_personal_info_id=?", o.UserPersonalInfoID),
	}

	queryMods = append(queryMods, mods...)

	query := UserPersonalInfos(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info\"")

	return query
}

// Honor pointed to by the foreign key.
func (o *UserPersonalInfoHonor) Honor(mods ...qm.QueryMod) honorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("honor_id=?", o.HonorID),
	}

	queryMods = append(queryMods, mods...)

	query := Honors(queryMods...)
	queries.SetFrom(query.Query, "\"honors\"")

	return query
}

// LoadUserPersonalInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoHonorL) LoadUserPersonalInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfoHonor interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfoHonor
	var object *UserPersonalInfoHonor

	if singular {
		object = maybeUserPersonalInfoHonor.(*UserPersonalInfoHonor)
	} else {
		slice = *maybeUserPersonalInfoHonor.(*[]*UserPersonalInfoHonor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoHonorR{}
		}
		args = append(args, object.UserPersonalInfoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoHonorR{}
			}

			for _, a := range args {
				if a == obj.UserPersonalInfoID {
					continue Outer
				}
			}

			args = append(args, obj.UserPersonalInfoID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info`), qm.WhereIn(`user_personal_info_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserPersonalInfo")
	}

	var resultSlice []*UserPersonalInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserPersonalInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_personal_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info")
	}

	if len(userPersonalInfoHonorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserPersonalInfo = foreign
		if foreign.R == nil {
			foreign.R = &userPersonalInfoR{}
		}
		foreign.R.UserPersonalInfoHonors = append(foreign.R.UserPersonalInfoHonors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserPersonalInfoID == foreign.UserPersonalInfoID {
				local.R.UserPersonalInfo = foreign
				if foreign.R == nil {
					foreign.R = &userPersonalInfoR{}
				}
				foreign.R.UserPersonalInfoHonors = append(foreign.R.UserPersonalInfoHonors, local)
				break
			}
		}
	}

	return nil
}

// LoadHonor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoHonorL) LoadHonor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfoHonor interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfoHonor
	var object *UserPersonalInfoHonor

	if singular {
		object = maybeUserPersonalInfoHonor.(*UserPersonalInfoHonor)
	} else {
		slice = *maybeUserPersonalInfoHonor.(*[]*UserPersonalInfoHonor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoHonorR{}
		}
		args = append(args, object.HonorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoHonorR{}
			}

			for _, a := range args {
				if a == obj.HonorID {
					continue Outer
				}
			}

			args = append(args, obj.HonorID)
		}
	}

	query := NewQuery(qm.From(`honors`), qm.WhereIn(`honor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Honor")
	}

	var resultSlice []*Honor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Honor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for honors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for honors")
	}

	if len(userPersonalInfoHonorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Honor = foreign
		if foreign.R == nil {
			foreign.R = &honorR{}
		}
		foreign.R.UserPersonalInfoHonors = append(foreign.R.UserPersonalInfoHonors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HonorID == foreign.HonorID {
				local.R.Honor = foreign
				if foreign.R == nil {
					foreign.R = &honorR{}
				}
				foreign.R.UserPersonalInfoHonors = append(foreign.R.UserPersonalInfoHonors, local)
				break
			}
		}
	}

	return nil
}

// SetUserPersonalInfo of the userPersonalInfoHonor to the related item.
// Sets o.R.UserPersonalInfo to related.
// Adds o to related.R.UserPersonalInfoHonors.
func (o *UserPersonalInfoHonor) SetUserPersonalInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserPersonalInfo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info_honors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_personal_info_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoHonorPrimaryKeyColumns),
	)
	values := []interface{}{related.UserPersonalInfoID, o.UserPersonalInfoHonorID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserPersonalInfoID = related.UserPersonalInfoID
	if o.R == nil {
		o.R = &userPersonalInfoHonorR{
			UserPersonalInfo: related,
		}
	} else {
		o.R.UserPersonalInfo = related
	}

	if related.R == nil {
		related.R = &userPersonalInfoR{
			UserPersonalInfoHonors: UserPersonalInfoHonorSlice{o},
		}
	} else {
		related.R.UserPersonalInfoHonors = append(related.R.UserPersonalInfoHonors, o)
	}

	return nil
}

// SetHonor of the userPersonalInfoHonor to the related item.
// Sets o.R.Honor to related.
// Adds o to related.R.UserPersonalInfoHonors.
func (o *UserPersonalInfoHonor) SetHonor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Honor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info_honors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"honor_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoHonorPrimaryKeyColumns),
	)
	values := []interface{}{related.HonorID, o.UserPersonalInfoHonorID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HonorID = related.HonorID
	if o.R == nil {
		o.R = &userPersonalInfoHonorR{
			Honor: related,
		}
	} else {
		o.R.Honor = related
	}

	if related.R == nil {
		related.R = &honorR{
			UserPersonalInfoHonors: UserPersonalInfoHonorSlice{o},
		}
	} else {
		related.R.UserPersonalInfoHonors = append(related.R.UserPersonalInfoHonors, o)
	}

	return nil
}

// UserPersonalInfoHonors retrieves all the records using an executor.
func UserPersonalInfoHonors(mods ...qm.QueryMod) userPersonalInfoHonorQuery {
	mods = append(mods, qm.From("\"user_personal_info_honors\""))
	return userPersonalInfoHonorQuery{NewQuery(mods...)}
}

// FindUserPersonalInfoHonor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPersonalInfoHonor(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoHonorID int64, selectCols ...string) (*UserPersonalInfoHonor, error) {
	userPersonalInfoHonorObj := &UserPersonalInfoHonor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_personal_info_honors\" where \"user_personal_info_honor_id\"=$1", sel,
	)

	q := queries.Raw(query, userPersonalInfoHonorID)

	err := q.Bind(ctx, exec, userPersonalInfoHonorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_personal_info_honors")
	}

	return userPersonalInfoHonorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPersonalInfoHonor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info_honors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoHonorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPersonalInfoHonorInsertCacheMut.RLock()
	cache, cached := userPersonalInfoHonorInsertCache[key]
	userPersonalInfoHonorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPersonalInfoHonorColumns,
			userPersonalInfoHonorColumnsWithDefault,
			userPersonalInfoHonorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoHonorType, userPersonalInfoHonorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPersonalInfoHonorType, userPersonalInfoHonorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_personal_info_honors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_personal_info_honors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_personal_info_honors")
	}

	if !cached {
		userPersonalInfoHonorInsertCacheMut.Lock()
		userPersonalInfoHonorInsertCache[key] = cache
		userPersonalInfoHonorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserPersonalInfoHonor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPersonalInfoHonor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPersonalInfoHonorUpdateCacheMut.RLock()
	cache, cached := userPersonalInfoHonorUpdateCache[key]
	userPersonalInfoHonorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPersonalInfoHonorColumns,
			userPersonalInfoHonorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_personal_info_honors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_personal_info_honors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPersonalInfoHonorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPersonalInfoHonorType, userPersonalInfoHonorMapping, append(wl, userPersonalInfoHonorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_personal_info_honors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_personal_info_honors")
	}

	if !cached {
		userPersonalInfoHonorUpdateCacheMut.Lock()
		userPersonalInfoHonorUpdateCache[key] = cache
		userPersonalInfoHonorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPersonalInfoHonorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_personal_info_honors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_personal_info_honors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPersonalInfoHonorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoHonorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_personal_info_honors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPersonalInfoHonorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userPersonalInfoHonor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userPersonalInfoHonor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPersonalInfoHonor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info_honors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoHonorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPersonalInfoHonorUpsertCacheMut.RLock()
	cache, cached := userPersonalInfoHonorUpsertCache[key]
	userPersonalInfoHonorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userPersonalInfoHonorColumns,
			userPersonalInfoHonorColumnsWithDefault,
			userPersonalInfoHonorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userPersonalInfoHonorColumns,
			userPersonalInfoHonorPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_personal_info_honors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPersonalInfoHonorPrimaryKeyColumns))
			copy(conflict, userPersonalInfoHonorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"user_personal_info_honors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoHonorType, userPersonalInfoHonorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPersonalInfoHonorType, userPersonalInfoHonorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_personal_info_honors")
	}

	if !cached {
		userPersonalInfoHonorUpsertCacheMut.Lock()
		userPersonalInfoHonorUpsertCache[key] = cache
		userPersonalInfoHonorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserPersonalInfoHonor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPersonalInfoHonor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfoHonor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPersonalInfoHonorPrimaryKeyMapping)
	sql := "DELETE FROM \"user_personal_info_honors\" WHERE \"user_personal_info_honor_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_personal_info_honors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_personal_info_honors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPersonalInfoHonorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userPersonalInfoHonorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_personal_info_honors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info_honors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPersonalInfoHonorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfoHonor slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userPersonalInfoHonorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoHonorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_personal_info_honors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoHonorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userPersonalInfoHonor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info_honors")
	}

	if len(userPersonalInfoHonorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPersonalInfoHonor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPersonalInfoHonor(ctx, exec, o.UserPersonalInfoHonorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPersonalInfoHonorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPersonalInfoHonorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoHonorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_personal_info_honors\".* FROM \"user_personal_info_honors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoHonorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserPersonalInfoHonorSlice")
	}

	*o = slice

	return nil
}

// UserPersonalInfoHonorExists checks if the UserPersonalInfoHonor row exists.
func UserPersonalInfoHonorExists(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoHonorID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_personal_info_honors\" where \"user_personal_info_honor_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userPersonalInfoHonorID)
	}

	row := exec.QueryRowContext(ctx, sql, userPersonalInfoHonorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_personal_info_honors exists")
	}

	return exists, nil
}
