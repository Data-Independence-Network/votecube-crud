// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsLabel is an object representing the database table.
type PollsLabel struct {
	PollLabelID   int64     `boil:"poll_label_id" json:"poll_label_id" toml:"poll_label_id" yaml:"poll_label_id"`
	PollID        int64     `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	LabelID       int64     `boil:"label_id" json:"label_id" toml:"label_id" yaml:"label_id"`
	UserAccountID int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *pollsLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsLabelColumns = struct {
	PollLabelID   string
	PollID        string
	LabelID       string
	UserAccountID string
	CreatedAt     string
}{
	PollLabelID:   "poll_label_id",
	PollID:        "poll_id",
	LabelID:       "label_id",
	UserAccountID: "user_account_id",
	CreatedAt:     "created_at",
}

// PollsLabelRels is where relationship names are stored.
var PollsLabelRels = struct {
	UserAccount string
	Poll        string
	Label       string
}{
	UserAccount: "UserAccount",
	Poll:        "Poll",
	Label:       "Label",
}

// pollsLabelR is where relationships are stored.
type pollsLabelR struct {
	UserAccount *UserAccount
	Poll        *Poll
	Label       *Label
}

// NewStruct creates a new relationship struct
func (*pollsLabelR) NewStruct() *pollsLabelR {
	return &pollsLabelR{}
}

// pollsLabelL is where Load methods for each relationship are stored.
type pollsLabelL struct{}

var (
	pollsLabelColumns               = []string{"poll_label_id", "poll_id", "label_id", "user_account_id", "created_at"}
	pollsLabelColumnsWithoutDefault = []string{"poll_label_id", "poll_id", "label_id", "user_account_id", "created_at"}
	pollsLabelColumnsWithDefault    = []string{}
	pollsLabelPrimaryKeyColumns     = []string{"poll_label_id"}
)

type (
	// PollsLabelSlice is an alias for a slice of pointers to PollsLabel.
	// This should generally be used opposed to []PollsLabel.
	PollsLabelSlice []*PollsLabel
	// PollsLabelHook is the signature for custom PollsLabel hook methods
	PollsLabelHook func(context.Context, boil.ContextExecutor, *PollsLabel) error

	pollsLabelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsLabelType                 = reflect.TypeOf(&PollsLabel{})
	pollsLabelMapping              = queries.MakeStructMapping(pollsLabelType)
	pollsLabelPrimaryKeyMapping, _ = queries.BindMapping(pollsLabelType, pollsLabelMapping, pollsLabelPrimaryKeyColumns)
	pollsLabelInsertCacheMut       sync.RWMutex
	pollsLabelInsertCache          = make(map[string]insertCache)
	pollsLabelUpdateCacheMut       sync.RWMutex
	pollsLabelUpdateCache          = make(map[string]updateCache)
	pollsLabelUpsertCacheMut       sync.RWMutex
	pollsLabelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsLabelBeforeInsertHooks []PollsLabelHook
var pollsLabelBeforeUpdateHooks []PollsLabelHook
var pollsLabelBeforeDeleteHooks []PollsLabelHook
var pollsLabelBeforeUpsertHooks []PollsLabelHook

var pollsLabelAfterInsertHooks []PollsLabelHook
var pollsLabelAfterSelectHooks []PollsLabelHook
var pollsLabelAfterUpdateHooks []PollsLabelHook
var pollsLabelAfterDeleteHooks []PollsLabelHook
var pollsLabelAfterUpsertHooks []PollsLabelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsLabel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsLabel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsLabel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsLabel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsLabel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsLabel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsLabel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsLabel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsLabel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsLabelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsLabelHook registers your hook function for all future operations.
func AddPollsLabelHook(hookPoint boil.HookPoint, pollsLabelHook PollsLabelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsLabelBeforeInsertHooks = append(pollsLabelBeforeInsertHooks, pollsLabelHook)
	case boil.BeforeUpdateHook:
		pollsLabelBeforeUpdateHooks = append(pollsLabelBeforeUpdateHooks, pollsLabelHook)
	case boil.BeforeDeleteHook:
		pollsLabelBeforeDeleteHooks = append(pollsLabelBeforeDeleteHooks, pollsLabelHook)
	case boil.BeforeUpsertHook:
		pollsLabelBeforeUpsertHooks = append(pollsLabelBeforeUpsertHooks, pollsLabelHook)
	case boil.AfterInsertHook:
		pollsLabelAfterInsertHooks = append(pollsLabelAfterInsertHooks, pollsLabelHook)
	case boil.AfterSelectHook:
		pollsLabelAfterSelectHooks = append(pollsLabelAfterSelectHooks, pollsLabelHook)
	case boil.AfterUpdateHook:
		pollsLabelAfterUpdateHooks = append(pollsLabelAfterUpdateHooks, pollsLabelHook)
	case boil.AfterDeleteHook:
		pollsLabelAfterDeleteHooks = append(pollsLabelAfterDeleteHooks, pollsLabelHook)
	case boil.AfterUpsertHook:
		pollsLabelAfterUpsertHooks = append(pollsLabelAfterUpsertHooks, pollsLabelHook)
	}
}

// OneG returns a single pollsLabel record from the query using the global executor.
func (q pollsLabelQuery) OneG(ctx context.Context) (*PollsLabel, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pollsLabel record from the query.
func (q pollsLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsLabel, error) {
	o := &PollsLabel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_labels")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PollsLabel records from the query using the global executor.
func (q pollsLabelQuery) AllG(ctx context.Context) (PollsLabelSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PollsLabel records from the query.
func (q pollsLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsLabelSlice, error) {
	var o []*PollsLabel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsLabel slice")
	}

	if len(pollsLabelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PollsLabel records in the query, and panics on error.
func (q pollsLabelQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PollsLabel records in the query.
func (q pollsLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_labels rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q pollsLabelQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pollsLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_labels exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *PollsLabel) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Poll pointed to by the foreign key.
func (o *PollsLabel) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// Label pointed to by the foreign key.
func (o *PollsLabel) Label(mods ...qm.QueryMod) labelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("label_id=?", o.LabelID),
	}

	queryMods = append(queryMods, mods...)

	query := Labels(queryMods...)
	queries.SetFrom(query.Query, "\"labels\"")

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsLabelL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsLabel interface{}, mods queries.Applicator) error {
	var slice []*PollsLabel
	var object *PollsLabel

	if singular {
		object = maybePollsLabel.(*PollsLabel)
	} else {
		slice = *maybePollsLabel.(*[]*PollsLabel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsLabelR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsLabelR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(pollsLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.PollsLabels = append(foreign.R.PollsLabels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.PollsLabels = append(foreign.R.PollsLabels, local)
				break
			}
		}
	}

	return nil
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsLabelL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsLabel interface{}, mods queries.Applicator) error {
	var slice []*PollsLabel
	var object *PollsLabel

	if singular {
		object = maybePollsLabel.(*PollsLabel)
	} else {
		slice = *maybePollsLabel.(*[]*PollsLabel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsLabelR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsLabelR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsLabels = append(foreign.R.PollsLabels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.PollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsLabels = append(foreign.R.PollsLabels, local)
				break
			}
		}
	}

	return nil
}

// LoadLabel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsLabelL) LoadLabel(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsLabel interface{}, mods queries.Applicator) error {
	var slice []*PollsLabel
	var object *PollsLabel

	if singular {
		object = maybePollsLabel.(*PollsLabel)
	} else {
		slice = *maybePollsLabel.(*[]*PollsLabel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsLabelR{}
		}
		args = append(args, object.LabelID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsLabelR{}
			}

			for _, a := range args {
				if a == obj.LabelID {
					continue Outer
				}
			}

			args = append(args, obj.LabelID)
		}
	}

	query := NewQuery(qm.From(`labels`), qm.WhereIn(`label_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Label")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Label")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(pollsLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Label = foreign
		if foreign.R == nil {
			foreign.R = &labelR{}
		}
		foreign.R.PollsLabels = append(foreign.R.PollsLabels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LabelID == foreign.LabelID {
				local.R.Label = foreign
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.PollsLabels = append(foreign.R.PollsLabels, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccountG of the pollsLabel to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.PollsLabels.
// Uses the global database handle.
func (o *PollsLabel) SetUserAccountG(ctx context.Context, insert bool, related *UserAccount) error {
	return o.SetUserAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetUserAccount of the pollsLabel to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.PollsLabels.
func (o *PollsLabel) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_labels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsLabelPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.PollLabelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &pollsLabelR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			PollsLabels: PollsLabelSlice{o},
		}
	} else {
		related.R.PollsLabels = append(related.R.PollsLabels, o)
	}

	return nil
}

// SetPollG of the pollsLabel to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsLabels.
// Uses the global database handle.
func (o *PollsLabel) SetPollG(ctx context.Context, insert bool, related *Poll) error {
	return o.SetPoll(ctx, boil.GetContextDB(), insert, related)
}

// SetPoll of the pollsLabel to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsLabels.
func (o *PollsLabel) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_labels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsLabelPrimaryKeyColumns),
	)
	values := []interface{}{related.PollID, o.PollLabelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.PollID
	if o.R == nil {
		o.R = &pollsLabelR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsLabels: PollsLabelSlice{o},
		}
	} else {
		related.R.PollsLabels = append(related.R.PollsLabels, o)
	}

	return nil
}

// SetLabelG of the pollsLabel to the related item.
// Sets o.R.Label to related.
// Adds o to related.R.PollsLabels.
// Uses the global database handle.
func (o *PollsLabel) SetLabelG(ctx context.Context, insert bool, related *Label) error {
	return o.SetLabel(ctx, boil.GetContextDB(), insert, related)
}

// SetLabel of the pollsLabel to the related item.
// Sets o.R.Label to related.
// Adds o to related.R.PollsLabels.
func (o *PollsLabel) SetLabel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Label) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_labels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"label_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsLabelPrimaryKeyColumns),
	)
	values := []interface{}{related.LabelID, o.PollLabelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LabelID = related.LabelID
	if o.R == nil {
		o.R = &pollsLabelR{
			Label: related,
		}
	} else {
		o.R.Label = related
	}

	if related.R == nil {
		related.R = &labelR{
			PollsLabels: PollsLabelSlice{o},
		}
	} else {
		related.R.PollsLabels = append(related.R.PollsLabels, o)
	}

	return nil
}

// PollsLabels retrieves all the records using an executor.
func PollsLabels(mods ...qm.QueryMod) pollsLabelQuery {
	mods = append(mods, qm.From("\"polls_labels\""))
	return pollsLabelQuery{NewQuery(mods...)}
}

// FindPollsLabelG retrieves a single record by ID.
func FindPollsLabelG(ctx context.Context, pollLabelID int64, selectCols ...string) (*PollsLabel, error) {
	return FindPollsLabel(ctx, boil.GetContextDB(), pollLabelID, selectCols...)
}

// FindPollsLabel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsLabel(ctx context.Context, exec boil.ContextExecutor, pollLabelID int64, selectCols ...string) (*PollsLabel, error) {
	pollsLabelObj := &PollsLabel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_labels\" where \"poll_label_id\"=$1", sel,
	)

	q := queries.Raw(query, pollLabelID)

	err := q.Bind(ctx, exec, pollsLabelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_labels")
	}

	return pollsLabelObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PollsLabel) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsLabel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_labels provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsLabelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsLabelInsertCacheMut.RLock()
	cache, cached := pollsLabelInsertCache[key]
	pollsLabelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsLabelColumns,
			pollsLabelColumnsWithDefault,
			pollsLabelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsLabelType, pollsLabelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsLabelType, pollsLabelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_labels\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_labels\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_labels")
	}

	if !cached {
		pollsLabelInsertCacheMut.Lock()
		pollsLabelInsertCache[key] = cache
		pollsLabelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PollsLabel record using the global executor.
// See Update for more documentation.
func (o *PollsLabel) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PollsLabel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsLabel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsLabelUpdateCacheMut.RLock()
	cache, cached := pollsLabelUpdateCache[key]
	pollsLabelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsLabelColumns,
			pollsLabelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_labels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_labels\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsLabelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsLabelType, pollsLabelMapping, append(wl, pollsLabelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_labels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_labels")
	}

	if !cached {
		pollsLabelUpdateCacheMut.Lock()
		pollsLabelUpdateCache[key] = cache
		pollsLabelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_labels")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PollsLabelSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsLabelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_labels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsLabelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsLabel")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PollsLabel) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsLabel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_labels provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsLabelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsLabelUpsertCacheMut.RLock()
	cache, cached := pollsLabelUpsertCache[key]
	pollsLabelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsLabelColumns,
			pollsLabelColumnsWithDefault,
			pollsLabelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsLabelColumns,
			pollsLabelPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_labels, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsLabelPrimaryKeyColumns))
			copy(conflict, pollsLabelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_labels\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsLabelType, pollsLabelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsLabelType, pollsLabelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_labels")
	}

	if !cached {
		pollsLabelUpsertCacheMut.Lock()
		pollsLabelUpsertCache[key] = cache
		pollsLabelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PollsLabel record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PollsLabel) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PollsLabel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsLabel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsLabel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsLabelPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_labels\" WHERE \"poll_label_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_labels")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsLabelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_labels")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PollsLabelSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsLabelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsLabel slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsLabelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_labels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsLabelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_labels")
	}

	if len(pollsLabelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PollsLabel) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PollsLabel provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsLabel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsLabel(ctx, exec, o.PollLabelID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsLabelSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PollsLabelSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsLabelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsLabelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_labels\".* FROM \"polls_labels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsLabelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsLabelSlice")
	}

	*o = slice

	return nil
}

// PollsLabelExistsG checks if the PollsLabel row exists.
func PollsLabelExistsG(ctx context.Context, pollLabelID int64) (bool, error) {
	return PollsLabelExists(ctx, boil.GetContextDB(), pollLabelID)
}

// PollsLabelExists checks if the PollsLabel row exists.
func PollsLabelExists(ctx context.Context, exec boil.ContextExecutor, pollLabelID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_labels\" where \"poll_label_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollLabelID)
	}

	row := exec.QueryRowContext(ctx, sql, pollLabelID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_labels exists")
	}

	return exists, nil
}
