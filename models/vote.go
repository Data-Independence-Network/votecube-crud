// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Vote is an object representing the database table.
type Vote struct {
	VoteID                int64     `boil:"vote_id" json:"vote_id" toml:"vote_id" yaml:"vote_id"`
	UserAccountID         int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	PollID                int64     `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	XPollFactorPositionID int64     `boil:"x_poll_factor_position_id" json:"x_poll_factor_position_id" toml:"x_poll_factor_position_id" yaml:"x_poll_factor_position_id"`
	YPollFactorPositionID int64     `boil:"y_poll_factor_position_id" json:"y_poll_factor_position_id" toml:"y_poll_factor_position_id" yaml:"y_poll_factor_position_id"`
	ZPollFactorPositionID int64     `boil:"z_poll_factor_position_id" json:"z_poll_factor_position_id" toml:"z_poll_factor_position_id" yaml:"z_poll_factor_position_id"`
	XShare                int16     `boil:"x_share" json:"x_share" toml:"x_share" yaml:"x_share"`
	YShare                int16     `boil:"y_share" json:"y_share" toml:"y_share" yaml:"y_share"`
	ZShare                int16     `boil:"z_share" json:"z_share" toml:"z_share" yaml:"z_share"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *voteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoteColumns = struct {
	VoteID                string
	UserAccountID         string
	PollID                string
	XPollFactorPositionID string
	YPollFactorPositionID string
	ZPollFactorPositionID string
	XShare                string
	YShare                string
	ZShare                string
	CreatedAt             string
}{
	VoteID:                "vote_id",
	UserAccountID:         "user_account_id",
	PollID:                "poll_id",
	XPollFactorPositionID: "x_poll_factor_position_id",
	YPollFactorPositionID: "y_poll_factor_position_id",
	ZPollFactorPositionID: "z_poll_factor_position_id",
	XShare:                "x_share",
	YShare:                "y_share",
	ZShare:                "z_share",
	CreatedAt:             "created_at",
}

// VoteRels is where relationship names are stored.
var VoteRels = struct {
	UserAccount         string
	Poll                string
	ZPollFactorPosition string
	YPollFactorPosition string
	XPollFactorPosition string
}{
	UserAccount:         "UserAccount",
	Poll:                "Poll",
	ZPollFactorPosition: "ZPollFactorPosition",
	YPollFactorPosition: "YPollFactorPosition",
	XPollFactorPosition: "XPollFactorPosition",
}

// voteR is where relationships are stored.
type voteR struct {
	UserAccount         *UserAccount
	Poll                *Poll
	ZPollFactorPosition *PollsFactorsPosition
	YPollFactorPosition *PollsFactorsPosition
	XPollFactorPosition *PollsFactorsPosition
}

// NewStruct creates a new relationship struct
func (*voteR) NewStruct() *voteR {
	return &voteR{}
}

// voteL is where Load methods for each relationship are stored.
type voteL struct{}

var (
	voteColumns               = []string{"vote_id", "user_account_id", "poll_id", "x_poll_factor_position_id", "y_poll_factor_position_id", "z_poll_factor_position_id", "x_share", "y_share", "z_share", "created_at"}
	voteColumnsWithoutDefault = []string{"vote_id", "user_account_id", "poll_id", "x_poll_factor_position_id", "y_poll_factor_position_id", "z_poll_factor_position_id", "x_share", "y_share", "z_share", "created_at"}
	voteColumnsWithDefault    = []string{}
	votePrimaryKeyColumns     = []string{"vote_id"}
)

type (
	// VoteSlice is an alias for a slice of pointers to Vote.
	// This should generally be used opposed to []Vote.
	VoteSlice []*Vote
	// VoteHook is the signature for custom Vote hook methods
	VoteHook func(context.Context, boil.ContextExecutor, *Vote) error

	voteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voteType                 = reflect.TypeOf(&Vote{})
	voteMapping              = queries.MakeStructMapping(voteType)
	votePrimaryKeyMapping, _ = queries.BindMapping(voteType, voteMapping, votePrimaryKeyColumns)
	voteInsertCacheMut       sync.RWMutex
	voteInsertCache          = make(map[string]insertCache)
	voteUpdateCacheMut       sync.RWMutex
	voteUpdateCache          = make(map[string]updateCache)
	voteUpsertCacheMut       sync.RWMutex
	voteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var voteBeforeInsertHooks []VoteHook
var voteBeforeUpdateHooks []VoteHook
var voteBeforeDeleteHooks []VoteHook
var voteBeforeUpsertHooks []VoteHook

var voteAfterInsertHooks []VoteHook
var voteAfterSelectHooks []VoteHook
var voteAfterUpdateHooks []VoteHook
var voteAfterDeleteHooks []VoteHook
var voteAfterUpsertHooks []VoteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range voteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoteHook registers your hook function for all future operations.
func AddVoteHook(hookPoint boil.HookPoint, voteHook VoteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		voteBeforeInsertHooks = append(voteBeforeInsertHooks, voteHook)
	case boil.BeforeUpdateHook:
		voteBeforeUpdateHooks = append(voteBeforeUpdateHooks, voteHook)
	case boil.BeforeDeleteHook:
		voteBeforeDeleteHooks = append(voteBeforeDeleteHooks, voteHook)
	case boil.BeforeUpsertHook:
		voteBeforeUpsertHooks = append(voteBeforeUpsertHooks, voteHook)
	case boil.AfterInsertHook:
		voteAfterInsertHooks = append(voteAfterInsertHooks, voteHook)
	case boil.AfterSelectHook:
		voteAfterSelectHooks = append(voteAfterSelectHooks, voteHook)
	case boil.AfterUpdateHook:
		voteAfterUpdateHooks = append(voteAfterUpdateHooks, voteHook)
	case boil.AfterDeleteHook:
		voteAfterDeleteHooks = append(voteAfterDeleteHooks, voteHook)
	case boil.AfterUpsertHook:
		voteAfterUpsertHooks = append(voteAfterUpsertHooks, voteHook)
	}
}

// One returns a single vote record from the query.
func (q voteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vote, error) {
	o := &Vote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vote")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Vote records from the query.
func (q voteQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoteSlice, error) {
	var o []*Vote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Vote slice")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Vote records in the query.
func (q voteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vote rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vote exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *Vote) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Poll pointed to by the foreign key.
func (o *Vote) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("parent_poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// ZPollFactorPosition pointed to by the foreign key.
func (o *Vote) ZPollFactorPosition(mods ...qm.QueryMod) pollsFactorsPositionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_factor_position_id=?", o.ZPollFactorPositionID),
	}

	queryMods = append(queryMods, mods...)

	query := PollsFactorsPositions(queryMods...)
	queries.SetFrom(query.Query, "\"polls_factors_positions\"")

	return query
}

// YPollFactorPosition pointed to by the foreign key.
func (o *Vote) YPollFactorPosition(mods ...qm.QueryMod) pollsFactorsPositionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_factor_position_id=?", o.YPollFactorPositionID),
	}

	queryMods = append(queryMods, mods...)

	query := PollsFactorsPositions(queryMods...)
	queries.SetFrom(query.Query, "\"polls_factors_positions\"")

	return query
}

// XPollFactorPosition pointed to by the foreign key.
func (o *Vote) XPollFactorPosition(mods ...qm.QueryMod) pollsFactorsPositionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_factor_position_id=?", o.XPollFactorPositionID),
	}

	queryMods = append(queryMods, mods...)

	query := PollsFactorsPositions(queryMods...)
	queries.SetFrom(query.Query, "\"polls_factors_positions\"")

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voteL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVote interface{}, mods queries.Applicator) error {
	var slice []*Vote
	var object *Vote

	if singular {
		object = maybeVote.(*Vote)
	} else {
		slice = *maybeVote.(*[]*Vote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voteR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voteR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Votes = append(foreign.R.Votes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Votes = append(foreign.R.Votes, local)
				break
			}
		}
	}

	return nil
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voteL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVote interface{}, mods queries.Applicator) error {
	var slice []*Vote
	var object *Vote

	if singular {
		object = maybeVote.(*Vote)
	} else {
		slice = *maybeVote.(*[]*Vote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voteR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voteR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`parent_poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.Votes = append(foreign.R.Votes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.ParentPollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.Votes = append(foreign.R.Votes, local)
				break
			}
		}
	}

	return nil
}

// LoadZPollFactorPosition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voteL) LoadZPollFactorPosition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVote interface{}, mods queries.Applicator) error {
	var slice []*Vote
	var object *Vote

	if singular {
		object = maybeVote.(*Vote)
	} else {
		slice = *maybeVote.(*[]*Vote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voteR{}
		}
		args = append(args, object.ZPollFactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voteR{}
			}

			for _, a := range args {
				if a == obj.ZPollFactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.ZPollFactorPositionID)
		}
	}

	query := NewQuery(qm.From(`polls_factors_positions`), qm.WhereIn(`poll_factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PollsFactorsPosition")
	}

	var resultSlice []*PollsFactorsPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PollsFactorsPosition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls_factors_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_factors_positions")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ZPollFactorPosition = foreign
		if foreign.R == nil {
			foreign.R = &pollsFactorsPositionR{}
		}
		foreign.R.ZPollFactorPositionVotes = append(foreign.R.ZPollFactorPositionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ZPollFactorPositionID == foreign.PollFactorPositionID {
				local.R.ZPollFactorPosition = foreign
				if foreign.R == nil {
					foreign.R = &pollsFactorsPositionR{}
				}
				foreign.R.ZPollFactorPositionVotes = append(foreign.R.ZPollFactorPositionVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadYPollFactorPosition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voteL) LoadYPollFactorPosition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVote interface{}, mods queries.Applicator) error {
	var slice []*Vote
	var object *Vote

	if singular {
		object = maybeVote.(*Vote)
	} else {
		slice = *maybeVote.(*[]*Vote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voteR{}
		}
		args = append(args, object.YPollFactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voteR{}
			}

			for _, a := range args {
				if a == obj.YPollFactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.YPollFactorPositionID)
		}
	}

	query := NewQuery(qm.From(`polls_factors_positions`), qm.WhereIn(`poll_factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PollsFactorsPosition")
	}

	var resultSlice []*PollsFactorsPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PollsFactorsPosition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls_factors_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_factors_positions")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.YPollFactorPosition = foreign
		if foreign.R == nil {
			foreign.R = &pollsFactorsPositionR{}
		}
		foreign.R.YPollFactorPositionVotes = append(foreign.R.YPollFactorPositionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.YPollFactorPositionID == foreign.PollFactorPositionID {
				local.R.YPollFactorPosition = foreign
				if foreign.R == nil {
					foreign.R = &pollsFactorsPositionR{}
				}
				foreign.R.YPollFactorPositionVotes = append(foreign.R.YPollFactorPositionVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadXPollFactorPosition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voteL) LoadXPollFactorPosition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVote interface{}, mods queries.Applicator) error {
	var slice []*Vote
	var object *Vote

	if singular {
		object = maybeVote.(*Vote)
	} else {
		slice = *maybeVote.(*[]*Vote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voteR{}
		}
		args = append(args, object.XPollFactorPositionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voteR{}
			}

			for _, a := range args {
				if a == obj.XPollFactorPositionID {
					continue Outer
				}
			}

			args = append(args, obj.XPollFactorPositionID)
		}
	}

	query := NewQuery(qm.From(`polls_factors_positions`), qm.WhereIn(`poll_factor_position_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PollsFactorsPosition")
	}

	var resultSlice []*PollsFactorsPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PollsFactorsPosition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls_factors_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_factors_positions")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.XPollFactorPosition = foreign
		if foreign.R == nil {
			foreign.R = &pollsFactorsPositionR{}
		}
		foreign.R.XPollFactorPositionVotes = append(foreign.R.XPollFactorPositionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.XPollFactorPositionID == foreign.PollFactorPositionID {
				local.R.XPollFactorPosition = foreign
				if foreign.R == nil {
					foreign.R = &pollsFactorsPositionR{}
				}
				foreign.R.XPollFactorPositionVotes = append(foreign.R.XPollFactorPositionVotes, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the vote to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Votes.
func (o *Vote) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vote\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.VoteID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &voteR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Votes: VoteSlice{o},
		}
	} else {
		related.R.Votes = append(related.R.Votes, o)
	}

	return nil
}

// SetPoll of the vote to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.Votes.
func (o *Vote) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vote\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
	)
	values := []interface{}{related.ParentPollID, o.VoteID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.ParentPollID
	if o.R == nil {
		o.R = &voteR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			Votes: VoteSlice{o},
		}
	} else {
		related.R.Votes = append(related.R.Votes, o)
	}

	return nil
}

// SetZPollFactorPosition of the vote to the related item.
// Sets o.R.ZPollFactorPosition to related.
// Adds o to related.R.ZPollFactorPositionVotes.
func (o *Vote) SetZPollFactorPosition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PollsFactorsPosition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vote\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"z_poll_factor_position_id"}),
		strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
	)
	values := []interface{}{related.PollFactorPositionID, o.VoteID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ZPollFactorPositionID = related.PollFactorPositionID
	if o.R == nil {
		o.R = &voteR{
			ZPollFactorPosition: related,
		}
	} else {
		o.R.ZPollFactorPosition = related
	}

	if related.R == nil {
		related.R = &pollsFactorsPositionR{
			ZPollFactorPositionVotes: VoteSlice{o},
		}
	} else {
		related.R.ZPollFactorPositionVotes = append(related.R.ZPollFactorPositionVotes, o)
	}

	return nil
}

// SetYPollFactorPosition of the vote to the related item.
// Sets o.R.YPollFactorPosition to related.
// Adds o to related.R.YPollFactorPositionVotes.
func (o *Vote) SetYPollFactorPosition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PollsFactorsPosition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vote\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"y_poll_factor_position_id"}),
		strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
	)
	values := []interface{}{related.PollFactorPositionID, o.VoteID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.YPollFactorPositionID = related.PollFactorPositionID
	if o.R == nil {
		o.R = &voteR{
			YPollFactorPosition: related,
		}
	} else {
		o.R.YPollFactorPosition = related
	}

	if related.R == nil {
		related.R = &pollsFactorsPositionR{
			YPollFactorPositionVotes: VoteSlice{o},
		}
	} else {
		related.R.YPollFactorPositionVotes = append(related.R.YPollFactorPositionVotes, o)
	}

	return nil
}

// SetXPollFactorPosition of the vote to the related item.
// Sets o.R.XPollFactorPosition to related.
// Adds o to related.R.XPollFactorPositionVotes.
func (o *Vote) SetXPollFactorPosition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PollsFactorsPosition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vote\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"x_poll_factor_position_id"}),
		strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
	)
	values := []interface{}{related.PollFactorPositionID, o.VoteID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.XPollFactorPositionID = related.PollFactorPositionID
	if o.R == nil {
		o.R = &voteR{
			XPollFactorPosition: related,
		}
	} else {
		o.R.XPollFactorPosition = related
	}

	if related.R == nil {
		related.R = &pollsFactorsPositionR{
			XPollFactorPositionVotes: VoteSlice{o},
		}
	} else {
		related.R.XPollFactorPositionVotes = append(related.R.XPollFactorPositionVotes, o)
	}

	return nil
}

// Votes retrieves all the records using an executor.
func Votes(mods ...qm.QueryMod) voteQuery {
	mods = append(mods, qm.From("\"vote\""))
	return voteQuery{NewQuery(mods...)}
}

// FindVote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVote(ctx context.Context, exec boil.ContextExecutor, voteID int64, selectCols ...string) (*Vote, error) {
	voteObj := &Vote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vote\" where \"vote_id\"=$1", sel,
	)

	q := queries.Raw(query, voteID)

	err := q.Bind(ctx, exec, voteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vote")
	}

	return voteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vote provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voteInsertCacheMut.RLock()
	cache, cached := voteInsertCache[key]
	voteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voteColumns,
			voteColumnsWithDefault,
			voteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voteType, voteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voteType, voteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vote\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vote\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vote")
	}

	if !cached {
		voteInsertCacheMut.Lock()
		voteInsertCache[key] = cache
		voteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Vote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voteUpdateCacheMut.RLock()
	cache, cached := voteUpdateCache[key]
	voteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voteColumns,
			votePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vote, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vote\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, votePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voteType, voteMapping, append(wl, votePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vote row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vote")
	}

	if !cached {
		voteUpdateCacheMut.Lock()
		voteUpdateCache[key] = cache
		voteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vote")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vote")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), votePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vote\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, votePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vote provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voteUpsertCacheMut.RLock()
	cache, cached := voteUpsertCache[key]
	voteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voteColumns,
			voteColumnsWithDefault,
			voteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			voteColumns,
			votePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert vote, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(votePrimaryKeyColumns))
			copy(conflict, votePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"vote\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voteType, voteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voteType, voteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vote")
	}

	if !cached {
		voteUpsertCacheMut.Lock()
		voteUpsertCache[key] = cache
		voteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Vote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Vote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), votePrimaryKeyMapping)
	sql := "DELETE FROM \"vote\" WHERE \"vote_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vote")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vote")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vote")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vote")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Vote slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(voteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), votePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vote\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, votePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vote")
	}

	if len(voteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVote(ctx, exec, o.VoteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), votePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vote\".* FROM \"vote\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, votePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoteSlice")
	}

	*o = slice

	return nil
}

// VoteExists checks if the Vote row exists.
func VoteExists(ctx context.Context, exec boil.ContextExecutor, voteID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vote\" where \"vote_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, voteID)
	}

	row := exec.QueryRowContext(ctx, sql, voteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vote exists")
	}

	return exists, nil
}
