// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Dimension is an object representing the database table.
type Dimension struct {
	DimensionID          int64      `boil:"dimension_id" json:"dimension_id" toml:"dimension_id" yaml:"dimension_id"`
	ParentDimensionID    null.Int64 `boil:"parent_dimension_id" json:"parent_dimension_id,omitempty" toml:"parent_dimension_id" yaml:"parent_dimension_id,omitempty"`
	UserAccountID        int64      `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	DimensionName        string     `boil:"dimension_name" json:"dimension_name" toml:"dimension_name" yaml:"dimension_name"`
	DimensionDescription string     `boil:"dimension_description" json:"dimension_description" toml:"dimension_description" yaml:"dimension_description"`
	ColorID              int64      `boil:"color_id" json:"color_id" toml:"color_id" yaml:"color_id"`
	CreatedAt            time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *dimensionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dimensionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DimensionColumns = struct {
	DimensionID          string
	ParentDimensionID    string
	UserAccountID        string
	DimensionName        string
	DimensionDescription string
	ColorID              string
	CreatedAt            string
}{
	DimensionID:          "dimension_id",
	ParentDimensionID:    "parent_dimension_id",
	UserAccountID:        "user_account_id",
	DimensionName:        "dimension_name",
	DimensionDescription: "dimension_description",
	ColorID:              "color_id",
	CreatedAt:            "created_at",
}

// DimensionRels is where relationship names are stored.
var DimensionRels = struct {
	UserAccount               string
	ParentDimension           string
	Color                     string
	DimensionDirections       string
	ParentDimensionDimensions string
	DimensionsLinks           string
}{
	UserAccount:               "UserAccount",
	ParentDimension:           "ParentDimension",
	Color:                     "Color",
	DimensionDirections:       "DimensionDirections",
	ParentDimensionDimensions: "ParentDimensionDimensions",
	DimensionsLinks:           "DimensionsLinks",
}

// dimensionR is where relationships are stored.
type dimensionR struct {
	UserAccount               *UserAccount
	ParentDimension           *Dimension
	Color                     *Color
	DimensionDirections       DimensionDirectionSlice
	ParentDimensionDimensions DimensionSlice
	DimensionsLinks           DimensionsLinkSlice
}

// NewStruct creates a new relationship struct
func (*dimensionR) NewStruct() *dimensionR {
	return &dimensionR{}
}

// dimensionL is where Load methods for each relationship are stored.
type dimensionL struct{}

var (
	dimensionColumns               = []string{"dimension_id", "parent_dimension_id", "user_account_id", "dimension_name", "dimension_description", "color_id", "created_at"}
	dimensionColumnsWithoutDefault = []string{"dimension_id", "parent_dimension_id", "user_account_id", "dimension_name", "dimension_description", "color_id", "created_at"}
	dimensionColumnsWithDefault    = []string{}
	dimensionPrimaryKeyColumns     = []string{"dimension_id"}
)

type (
	// DimensionSlice is an alias for a slice of pointers to Dimension.
	// This should generally be used opposed to []Dimension.
	DimensionSlice []*Dimension
	// DimensionHook is the signature for custom Dimension hook methods
	DimensionHook func(context.Context, boil.ContextExecutor, *Dimension) error

	dimensionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dimensionType                 = reflect.TypeOf(&Dimension{})
	dimensionMapping              = queries.MakeStructMapping(dimensionType)
	dimensionPrimaryKeyMapping, _ = queries.BindMapping(dimensionType, dimensionMapping, dimensionPrimaryKeyColumns)
	dimensionInsertCacheMut       sync.RWMutex
	dimensionInsertCache          = make(map[string]insertCache)
	dimensionUpdateCacheMut       sync.RWMutex
	dimensionUpdateCache          = make(map[string]updateCache)
	dimensionUpsertCacheMut       sync.RWMutex
	dimensionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var dimensionBeforeInsertHooks []DimensionHook
var dimensionBeforeUpdateHooks []DimensionHook
var dimensionBeforeDeleteHooks []DimensionHook
var dimensionBeforeUpsertHooks []DimensionHook

var dimensionAfterInsertHooks []DimensionHook
var dimensionAfterSelectHooks []DimensionHook
var dimensionAfterUpdateHooks []DimensionHook
var dimensionAfterDeleteHooks []DimensionHook
var dimensionAfterUpsertHooks []DimensionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dimension) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dimension) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dimension) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dimension) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dimension) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dimension) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dimension) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dimension) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dimension) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dimensionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDimensionHook registers your hook function for all future operations.
func AddDimensionHook(hookPoint boil.HookPoint, dimensionHook DimensionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dimensionBeforeInsertHooks = append(dimensionBeforeInsertHooks, dimensionHook)
	case boil.BeforeUpdateHook:
		dimensionBeforeUpdateHooks = append(dimensionBeforeUpdateHooks, dimensionHook)
	case boil.BeforeDeleteHook:
		dimensionBeforeDeleteHooks = append(dimensionBeforeDeleteHooks, dimensionHook)
	case boil.BeforeUpsertHook:
		dimensionBeforeUpsertHooks = append(dimensionBeforeUpsertHooks, dimensionHook)
	case boil.AfterInsertHook:
		dimensionAfterInsertHooks = append(dimensionAfterInsertHooks, dimensionHook)
	case boil.AfterSelectHook:
		dimensionAfterSelectHooks = append(dimensionAfterSelectHooks, dimensionHook)
	case boil.AfterUpdateHook:
		dimensionAfterUpdateHooks = append(dimensionAfterUpdateHooks, dimensionHook)
	case boil.AfterDeleteHook:
		dimensionAfterDeleteHooks = append(dimensionAfterDeleteHooks, dimensionHook)
	case boil.AfterUpsertHook:
		dimensionAfterUpsertHooks = append(dimensionAfterUpsertHooks, dimensionHook)
	}
}

// OneG returns a single dimension record from the query using the global executor.
func (q dimensionQuery) OneG(ctx context.Context) (*Dimension, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single dimension record from the query.
func (q dimensionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dimension, error) {
	o := &Dimension{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dimensions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Dimension records from the query using the global executor.
func (q dimensionQuery) AllG(ctx context.Context) (DimensionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Dimension records from the query.
func (q dimensionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DimensionSlice, error) {
	var o []*Dimension

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dimension slice")
	}

	if len(dimensionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Dimension records in the query, and panics on error.
func (q dimensionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Dimension records in the query.
func (q dimensionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dimensions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q dimensionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q dimensionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dimensions exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *Dimension) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// ParentDimension pointed to by the foreign key.
func (o *Dimension) ParentDimension(mods ...qm.QueryMod) dimensionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("dimension_id=?", o.ParentDimensionID),
	}

	queryMods = append(queryMods, mods...)

	query := Dimensions(queryMods...)
	queries.SetFrom(query.Query, "\"dimensions\"")

	return query
}

// Color pointed to by the foreign key.
func (o *Dimension) Color(mods ...qm.QueryMod) colorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("color_id=?", o.ColorID),
	}

	queryMods = append(queryMods, mods...)

	query := Colors(queryMods...)
	queries.SetFrom(query.Query, "\"colors\"")

	return query
}

// DimensionDirections retrieves all the dimension_direction's DimensionDirections with an executor.
func (o *Dimension) DimensionDirections(mods ...qm.QueryMod) dimensionDirectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dimension_directions\".\"dimension_id\"=?", o.DimensionID),
	)

	query := DimensionDirections(queryMods...)
	queries.SetFrom(query.Query, "\"dimension_directions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dimension_directions\".*"})
	}

	return query
}

// ParentDimensionDimensions retrieves all the dimension's Dimensions with an executor via parent_dimension_id column.
func (o *Dimension) ParentDimensionDimensions(mods ...qm.QueryMod) dimensionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dimensions\".\"parent_dimension_id\"=?", o.DimensionID),
	)

	query := Dimensions(queryMods...)
	queries.SetFrom(query.Query, "\"dimensions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dimensions\".*"})
	}

	return query
}

// DimensionsLinks retrieves all the dimensions_link's DimensionsLinks with an executor.
func (o *Dimension) DimensionsLinks(mods ...qm.QueryMod) dimensionsLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dimensions_links\".\"dimensions_id\"=?", o.DimensionID),
	)

	query := DimensionsLinks(queryMods...)
	queries.SetFrom(query.Query, "\"dimensions_links\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dimensions_links\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimension interface{}, mods queries.Applicator) error {
	var slice []*Dimension
	var object *Dimension

	if singular {
		object = maybeDimension.(*Dimension)
	} else {
		slice = *maybeDimension.(*[]*Dimension)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(dimensionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Dimensions = append(foreign.R.Dimensions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Dimensions = append(foreign.R.Dimensions, local)
				break
			}
		}
	}

	return nil
}

// LoadParentDimension allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionL) LoadParentDimension(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimension interface{}, mods queries.Applicator) error {
	var slice []*Dimension
	var object *Dimension

	if singular {
		object = maybeDimension.(*Dimension)
	} else {
		slice = *maybeDimension.(*[]*Dimension)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionR{}
		}
		args = append(args, object.ParentDimensionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentDimensionID) {
					continue Outer
				}
			}

			args = append(args, obj.ParentDimensionID)
		}
	}

	query := NewQuery(qm.From(`dimensions`), qm.WhereIn(`dimension_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dimension")
	}

	var resultSlice []*Dimension
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dimension")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dimensions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimensions")
	}

	if len(dimensionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentDimension = foreign
		if foreign.R == nil {
			foreign.R = &dimensionR{}
		}
		foreign.R.ParentDimensionDimensions = append(foreign.R.ParentDimensionDimensions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentDimensionID, foreign.DimensionID) {
				local.R.ParentDimension = foreign
				if foreign.R == nil {
					foreign.R = &dimensionR{}
				}
				foreign.R.ParentDimensionDimensions = append(foreign.R.ParentDimensionDimensions, local)
				break
			}
		}
	}

	return nil
}

// LoadColor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dimensionL) LoadColor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimension interface{}, mods queries.Applicator) error {
	var slice []*Dimension
	var object *Dimension

	if singular {
		object = maybeDimension.(*Dimension)
	} else {
		slice = *maybeDimension.(*[]*Dimension)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionR{}
		}
		args = append(args, object.ColorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionR{}
			}

			for _, a := range args {
				if a == obj.ColorID {
					continue Outer
				}
			}

			args = append(args, obj.ColorID)
		}
	}

	query := NewQuery(qm.From(`colors`), qm.WhereIn(`color_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Color")
	}

	var resultSlice []*Color
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Color")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for colors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for colors")
	}

	if len(dimensionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Color = foreign
		if foreign.R == nil {
			foreign.R = &colorR{}
		}
		foreign.R.Dimensions = append(foreign.R.Dimensions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ColorID == foreign.ColorID {
				local.R.Color = foreign
				if foreign.R == nil {
					foreign.R = &colorR{}
				}
				foreign.R.Dimensions = append(foreign.R.Dimensions, local)
				break
			}
		}
	}

	return nil
}

// LoadDimensionDirections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dimensionL) LoadDimensionDirections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimension interface{}, mods queries.Applicator) error {
	var slice []*Dimension
	var object *Dimension

	if singular {
		object = maybeDimension.(*Dimension)
	} else {
		slice = *maybeDimension.(*[]*Dimension)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionR{}
		}
		args = append(args, object.DimensionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionR{}
			}

			for _, a := range args {
				if a == obj.DimensionID {
					continue Outer
				}
			}

			args = append(args, obj.DimensionID)
		}
	}

	query := NewQuery(qm.From(`dimension_directions`), qm.WhereIn(`dimension_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dimension_directions")
	}

	var resultSlice []*DimensionDirection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dimension_directions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dimension_directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimension_directions")
	}

	if len(dimensionDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DimensionDirections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dimensionDirectionR{}
			}
			foreign.R.Dimension = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DimensionID == foreign.DimensionID {
				local.R.DimensionDirections = append(local.R.DimensionDirections, foreign)
				if foreign.R == nil {
					foreign.R = &dimensionDirectionR{}
				}
				foreign.R.Dimension = local
				break
			}
		}
	}

	return nil
}

// LoadParentDimensionDimensions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dimensionL) LoadParentDimensionDimensions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimension interface{}, mods queries.Applicator) error {
	var slice []*Dimension
	var object *Dimension

	if singular {
		object = maybeDimension.(*Dimension)
	} else {
		slice = *maybeDimension.(*[]*Dimension)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionR{}
		}
		args = append(args, object.DimensionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DimensionID) {
					continue Outer
				}
			}

			args = append(args, obj.DimensionID)
		}
	}

	query := NewQuery(qm.From(`dimensions`), qm.WhereIn(`parent_dimension_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dimensions")
	}

	var resultSlice []*Dimension
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dimensions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dimensions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimensions")
	}

	if len(dimensionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentDimensionDimensions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dimensionR{}
			}
			foreign.R.ParentDimension = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DimensionID, foreign.ParentDimensionID) {
				local.R.ParentDimensionDimensions = append(local.R.ParentDimensionDimensions, foreign)
				if foreign.R == nil {
					foreign.R = &dimensionR{}
				}
				foreign.R.ParentDimension = local
				break
			}
		}
	}

	return nil
}

// LoadDimensionsLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dimensionL) LoadDimensionsLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDimension interface{}, mods queries.Applicator) error {
	var slice []*Dimension
	var object *Dimension

	if singular {
		object = maybeDimension.(*Dimension)
	} else {
		slice = *maybeDimension.(*[]*Dimension)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dimensionR{}
		}
		args = append(args, object.DimensionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dimensionR{}
			}

			for _, a := range args {
				if a == obj.DimensionID {
					continue Outer
				}
			}

			args = append(args, obj.DimensionID)
		}
	}

	query := NewQuery(qm.From(`dimensions_links`), qm.WhereIn(`dimensions_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dimensions_links")
	}

	var resultSlice []*DimensionsLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dimensions_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dimensions_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimensions_links")
	}

	if len(dimensionsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DimensionsLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dimensionsLinkR{}
			}
			foreign.R.Dimension = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DimensionID == foreign.DimensionsID {
				local.R.DimensionsLinks = append(local.R.DimensionsLinks, foreign)
				if foreign.R == nil {
					foreign.R = &dimensionsLinkR{}
				}
				foreign.R.Dimension = local
				break
			}
		}
	}

	return nil
}

// SetUserAccountG of the dimension to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Dimensions.
// Uses the global database handle.
func (o *Dimension) SetUserAccountG(ctx context.Context, insert bool, related *UserAccount) error {
	return o.SetUserAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetUserAccount of the dimension to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Dimensions.
func (o *Dimension) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimensions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.DimensionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &dimensionR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Dimensions: DimensionSlice{o},
		}
	} else {
		related.R.Dimensions = append(related.R.Dimensions, o)
	}

	return nil
}

// SetParentDimensionG of the dimension to the related item.
// Sets o.R.ParentDimension to related.
// Adds o to related.R.ParentDimensionDimensions.
// Uses the global database handle.
func (o *Dimension) SetParentDimensionG(ctx context.Context, insert bool, related *Dimension) error {
	return o.SetParentDimension(ctx, boil.GetContextDB(), insert, related)
}

// SetParentDimension of the dimension to the related item.
// Sets o.R.ParentDimension to related.
// Adds o to related.R.ParentDimensionDimensions.
func (o *Dimension) SetParentDimension(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dimension) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimensions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_dimension_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionPrimaryKeyColumns),
	)
	values := []interface{}{related.DimensionID, o.DimensionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentDimensionID, related.DimensionID)
	if o.R == nil {
		o.R = &dimensionR{
			ParentDimension: related,
		}
	} else {
		o.R.ParentDimension = related
	}

	if related.R == nil {
		related.R = &dimensionR{
			ParentDimensionDimensions: DimensionSlice{o},
		}
	} else {
		related.R.ParentDimensionDimensions = append(related.R.ParentDimensionDimensions, o)
	}

	return nil
}

// RemoveParentDimensionG relationship.
// Sets o.R.ParentDimension to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Dimension) RemoveParentDimensionG(ctx context.Context, related *Dimension) error {
	return o.RemoveParentDimension(ctx, boil.GetContextDB(), related)
}

// RemoveParentDimension relationship.
// Sets o.R.ParentDimension to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Dimension) RemoveParentDimension(ctx context.Context, exec boil.ContextExecutor, related *Dimension) error {
	var err error

	queries.SetScanner(&o.ParentDimensionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_dimension_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ParentDimension = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentDimensionDimensions {
		if queries.Equal(o.ParentDimensionID, ri.ParentDimensionID) {
			continue
		}

		ln := len(related.R.ParentDimensionDimensions)
		if ln > 1 && i < ln-1 {
			related.R.ParentDimensionDimensions[i] = related.R.ParentDimensionDimensions[ln-1]
		}
		related.R.ParentDimensionDimensions = related.R.ParentDimensionDimensions[:ln-1]
		break
	}
	return nil
}

// SetColorG of the dimension to the related item.
// Sets o.R.Color to related.
// Adds o to related.R.Dimensions.
// Uses the global database handle.
func (o *Dimension) SetColorG(ctx context.Context, insert bool, related *Color) error {
	return o.SetColor(ctx, boil.GetContextDB(), insert, related)
}

// SetColor of the dimension to the related item.
// Sets o.R.Color to related.
// Adds o to related.R.Dimensions.
func (o *Dimension) SetColor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Color) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dimensions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"color_id"}),
		strmangle.WhereClause("\"", "\"", 2, dimensionPrimaryKeyColumns),
	)
	values := []interface{}{related.ColorID, o.DimensionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ColorID = related.ColorID
	if o.R == nil {
		o.R = &dimensionR{
			Color: related,
		}
	} else {
		o.R.Color = related
	}

	if related.R == nil {
		related.R = &colorR{
			Dimensions: DimensionSlice{o},
		}
	} else {
		related.R.Dimensions = append(related.R.Dimensions, o)
	}

	return nil
}

// AddDimensionDirectionsG adds the given related objects to the existing relationships
// of the dimension, optionally inserting them as new records.
// Appends related to o.R.DimensionDirections.
// Sets related.R.Dimension appropriately.
// Uses the global database handle.
func (o *Dimension) AddDimensionDirectionsG(ctx context.Context, insert bool, related ...*DimensionDirection) error {
	return o.AddDimensionDirections(ctx, boil.GetContextDB(), insert, related...)
}

// AddDimensionDirections adds the given related objects to the existing relationships
// of the dimension, optionally inserting them as new records.
// Appends related to o.R.DimensionDirections.
// Sets related.R.Dimension appropriately.
func (o *Dimension) AddDimensionDirections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DimensionDirection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DimensionID = o.DimensionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dimension_directions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dimension_id"}),
				strmangle.WhereClause("\"", "\"", 2, dimensionDirectionPrimaryKeyColumns),
			)
			values := []interface{}{o.DimensionID, rel.DimensionDirectionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DimensionID = o.DimensionID
		}
	}

	if o.R == nil {
		o.R = &dimensionR{
			DimensionDirections: related,
		}
	} else {
		o.R.DimensionDirections = append(o.R.DimensionDirections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dimensionDirectionR{
				Dimension: o,
			}
		} else {
			rel.R.Dimension = o
		}
	}
	return nil
}

// AddParentDimensionDimensionsG adds the given related objects to the existing relationships
// of the dimension, optionally inserting them as new records.
// Appends related to o.R.ParentDimensionDimensions.
// Sets related.R.ParentDimension appropriately.
// Uses the global database handle.
func (o *Dimension) AddParentDimensionDimensionsG(ctx context.Context, insert bool, related ...*Dimension) error {
	return o.AddParentDimensionDimensions(ctx, boil.GetContextDB(), insert, related...)
}

// AddParentDimensionDimensions adds the given related objects to the existing relationships
// of the dimension, optionally inserting them as new records.
// Appends related to o.R.ParentDimensionDimensions.
// Sets related.R.ParentDimension appropriately.
func (o *Dimension) AddParentDimensionDimensions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dimension) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentDimensionID, o.DimensionID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dimensions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_dimension_id"}),
				strmangle.WhereClause("\"", "\"", 2, dimensionPrimaryKeyColumns),
			)
			values := []interface{}{o.DimensionID, rel.DimensionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentDimensionID, o.DimensionID)
		}
	}

	if o.R == nil {
		o.R = &dimensionR{
			ParentDimensionDimensions: related,
		}
	} else {
		o.R.ParentDimensionDimensions = append(o.R.ParentDimensionDimensions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dimensionR{
				ParentDimension: o,
			}
		} else {
			rel.R.ParentDimension = o
		}
	}
	return nil
}

// SetParentDimensionDimensionsG removes all previously related items of the
// dimension replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentDimension's ParentDimensionDimensions accordingly.
// Replaces o.R.ParentDimensionDimensions with related.
// Sets related.R.ParentDimension's ParentDimensionDimensions accordingly.
// Uses the global database handle.
func (o *Dimension) SetParentDimensionDimensionsG(ctx context.Context, insert bool, related ...*Dimension) error {
	return o.SetParentDimensionDimensions(ctx, boil.GetContextDB(), insert, related...)
}

// SetParentDimensionDimensions removes all previously related items of the
// dimension replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentDimension's ParentDimensionDimensions accordingly.
// Replaces o.R.ParentDimensionDimensions with related.
// Sets related.R.ParentDimension's ParentDimensionDimensions accordingly.
func (o *Dimension) SetParentDimensionDimensions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dimension) error {
	query := "update \"dimensions\" set \"parent_dimension_id\" = null where \"parent_dimension_id\" = $1"
	values := []interface{}{o.DimensionID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentDimensionDimensions {
			queries.SetScanner(&rel.ParentDimensionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentDimension = nil
		}

		o.R.ParentDimensionDimensions = nil
	}
	return o.AddParentDimensionDimensions(ctx, exec, insert, related...)
}

// RemoveParentDimensionDimensionsG relationships from objects passed in.
// Removes related items from R.ParentDimensionDimensions (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentDimension.
// Uses the global database handle.
func (o *Dimension) RemoveParentDimensionDimensionsG(ctx context.Context, related ...*Dimension) error {
	return o.RemoveParentDimensionDimensions(ctx, boil.GetContextDB(), related...)
}

// RemoveParentDimensionDimensions relationships from objects passed in.
// Removes related items from R.ParentDimensionDimensions (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentDimension.
func (o *Dimension) RemoveParentDimensionDimensions(ctx context.Context, exec boil.ContextExecutor, related ...*Dimension) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentDimensionID, nil)
		if rel.R != nil {
			rel.R.ParentDimension = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_dimension_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentDimensionDimensions {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentDimensionDimensions)
			if ln > 1 && i < ln-1 {
				o.R.ParentDimensionDimensions[i] = o.R.ParentDimensionDimensions[ln-1]
			}
			o.R.ParentDimensionDimensions = o.R.ParentDimensionDimensions[:ln-1]
			break
		}
	}

	return nil
}

// AddDimensionsLinksG adds the given related objects to the existing relationships
// of the dimension, optionally inserting them as new records.
// Appends related to o.R.DimensionsLinks.
// Sets related.R.Dimension appropriately.
// Uses the global database handle.
func (o *Dimension) AddDimensionsLinksG(ctx context.Context, insert bool, related ...*DimensionsLink) error {
	return o.AddDimensionsLinks(ctx, boil.GetContextDB(), insert, related...)
}

// AddDimensionsLinks adds the given related objects to the existing relationships
// of the dimension, optionally inserting them as new records.
// Appends related to o.R.DimensionsLinks.
// Sets related.R.Dimension appropriately.
func (o *Dimension) AddDimensionsLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DimensionsLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DimensionsID = o.DimensionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dimensions_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dimensions_id"}),
				strmangle.WhereClause("\"", "\"", 2, dimensionsLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.DimensionID, rel.DimensionsLinkID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DimensionsID = o.DimensionID
		}
	}

	if o.R == nil {
		o.R = &dimensionR{
			DimensionsLinks: related,
		}
	} else {
		o.R.DimensionsLinks = append(o.R.DimensionsLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dimensionsLinkR{
				Dimension: o,
			}
		} else {
			rel.R.Dimension = o
		}
	}
	return nil
}

// Dimensions retrieves all the records using an executor.
func Dimensions(mods ...qm.QueryMod) dimensionQuery {
	mods = append(mods, qm.From("\"dimensions\""))
	return dimensionQuery{NewQuery(mods...)}
}

// FindDimensionG retrieves a single record by ID.
func FindDimensionG(ctx context.Context, dimensionID int64, selectCols ...string) (*Dimension, error) {
	return FindDimension(ctx, boil.GetContextDB(), dimensionID, selectCols...)
}

// FindDimension retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDimension(ctx context.Context, exec boil.ContextExecutor, dimensionID int64, selectCols ...string) (*Dimension, error) {
	dimensionObj := &Dimension{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dimensions\" where \"dimension_id\"=$1", sel,
	)

	q := queries.Raw(query, dimensionID)

	err := q.Bind(ctx, exec, dimensionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dimensions")
	}

	return dimensionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Dimension) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dimension) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dimensions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dimensionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dimensionInsertCacheMut.RLock()
	cache, cached := dimensionInsertCache[key]
	dimensionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dimensionColumns,
			dimensionColumnsWithDefault,
			dimensionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dimensionType, dimensionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dimensionType, dimensionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dimensions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dimensions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dimensions")
	}

	if !cached {
		dimensionInsertCacheMut.Lock()
		dimensionInsertCache[key] = cache
		dimensionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Dimension record using the global executor.
// See Update for more documentation.
func (o *Dimension) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Dimension.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dimension) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dimensionUpdateCacheMut.RLock()
	cache, cached := dimensionUpdateCache[key]
	dimensionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dimensionColumns,
			dimensionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dimensions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dimensions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dimensionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dimensionType, dimensionMapping, append(wl, dimensionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dimensions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dimensions")
	}

	if !cached {
		dimensionUpdateCacheMut.Lock()
		dimensionUpdateCache[key] = cache
		dimensionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dimensionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dimensions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dimensions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DimensionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DimensionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dimensions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dimensionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dimension slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dimension")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Dimension) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dimension) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dimensions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dimensionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dimensionUpsertCacheMut.RLock()
	cache, cached := dimensionUpsertCache[key]
	dimensionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dimensionColumns,
			dimensionColumnsWithDefault,
			dimensionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dimensionColumns,
			dimensionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert dimensions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dimensionPrimaryKeyColumns))
			copy(conflict, dimensionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"dimensions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dimensionType, dimensionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dimensionType, dimensionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dimensions")
	}

	if !cached {
		dimensionUpsertCacheMut.Lock()
		dimensionUpsertCache[key] = cache
		dimensionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Dimension record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Dimension) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Dimension record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dimension) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dimension provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dimensionPrimaryKeyMapping)
	sql := "DELETE FROM \"dimensions\" WHERE \"dimension_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dimensions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dimensions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dimensionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dimensionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dimensions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dimensions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DimensionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DimensionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dimension slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dimensionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dimensions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dimensionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dimension slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dimensions")
	}

	if len(dimensionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Dimension) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Dimension provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dimension) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDimension(ctx, exec, o.DimensionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DimensionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DimensionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DimensionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DimensionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dimensionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dimensions\".* FROM \"dimensions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dimensionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DimensionSlice")
	}

	*o = slice

	return nil
}

// DimensionExistsG checks if the Dimension row exists.
func DimensionExistsG(ctx context.Context, dimensionID int64) (bool, error) {
	return DimensionExists(ctx, boil.GetContextDB(), dimensionID)
}

// DimensionExists checks if the Dimension row exists.
func DimensionExists(ctx context.Context, exec boil.ContextExecutor, dimensionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dimensions\" where \"dimension_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, dimensionID)
	}

	row := exec.QueryRowContext(ctx, sql, dimensionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dimensions exists")
	}

	return exists, nil
}
