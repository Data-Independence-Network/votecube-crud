// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserPersonalInfoTitle is an object representing the database table.
type UserPersonalInfoTitle struct {
	UserPersonalInfoTitleID int64 `boil:"user_personal_info_title_id" json:"user_personal_info_title_id" toml:"user_personal_info_title_id" yaml:"user_personal_info_title_id"`
	TitleID                 int64 `boil:"title_id" json:"title_id" toml:"title_id" yaml:"title_id"`
	UserPersonalInfoID      int64 `boil:"user_personal_info_id" json:"user_personal_info_id" toml:"user_personal_info_id" yaml:"user_personal_info_id"`
	TitlePosition           int16 `boil:"title_position" json:"title_position" toml:"title_position" yaml:"title_position"`

	R *userPersonalInfoTitleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPersonalInfoTitleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPersonalInfoTitleColumns = struct {
	UserPersonalInfoTitleID string
	TitleID                 string
	UserPersonalInfoID      string
	TitlePosition           string
}{
	UserPersonalInfoTitleID: "user_personal_info_title_id",
	TitleID:                 "title_id",
	UserPersonalInfoID:      "user_personal_info_id",
	TitlePosition:           "title_position",
}

// UserPersonalInfoTitleRels is where relationship names are stored.
var UserPersonalInfoTitleRels = struct {
	UserPersonalInfo string
	Title            string
}{
	UserPersonalInfo: "UserPersonalInfo",
	Title:            "Title",
}

// userPersonalInfoTitleR is where relationships are stored.
type userPersonalInfoTitleR struct {
	UserPersonalInfo *UserPersonalInfo
	Title            *Title
}

// NewStruct creates a new relationship struct
func (*userPersonalInfoTitleR) NewStruct() *userPersonalInfoTitleR {
	return &userPersonalInfoTitleR{}
}

// userPersonalInfoTitleL is where Load methods for each relationship are stored.
type userPersonalInfoTitleL struct{}

var (
	userPersonalInfoTitleColumns               = []string{"user_personal_info_title_id", "title_id", "user_personal_info_id", "title_position"}
	userPersonalInfoTitleColumnsWithoutDefault = []string{"user_personal_info_title_id", "title_id", "user_personal_info_id", "title_position"}
	userPersonalInfoTitleColumnsWithDefault    = []string{}
	userPersonalInfoTitlePrimaryKeyColumns     = []string{"user_personal_info_title_id"}
)

type (
	// UserPersonalInfoTitleSlice is an alias for a slice of pointers to UserPersonalInfoTitle.
	// This should generally be used opposed to []UserPersonalInfoTitle.
	UserPersonalInfoTitleSlice []*UserPersonalInfoTitle
	// UserPersonalInfoTitleHook is the signature for custom UserPersonalInfoTitle hook methods
	UserPersonalInfoTitleHook func(context.Context, boil.ContextExecutor, *UserPersonalInfoTitle) error

	userPersonalInfoTitleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPersonalInfoTitleType                 = reflect.TypeOf(&UserPersonalInfoTitle{})
	userPersonalInfoTitleMapping              = queries.MakeStructMapping(userPersonalInfoTitleType)
	userPersonalInfoTitlePrimaryKeyMapping, _ = queries.BindMapping(userPersonalInfoTitleType, userPersonalInfoTitleMapping, userPersonalInfoTitlePrimaryKeyColumns)
	userPersonalInfoTitleInsertCacheMut       sync.RWMutex
	userPersonalInfoTitleInsertCache          = make(map[string]insertCache)
	userPersonalInfoTitleUpdateCacheMut       sync.RWMutex
	userPersonalInfoTitleUpdateCache          = make(map[string]updateCache)
	userPersonalInfoTitleUpsertCacheMut       sync.RWMutex
	userPersonalInfoTitleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userPersonalInfoTitleBeforeInsertHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleBeforeUpdateHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleBeforeDeleteHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleBeforeUpsertHooks []UserPersonalInfoTitleHook

var userPersonalInfoTitleAfterInsertHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleAfterSelectHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleAfterUpdateHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleAfterDeleteHooks []UserPersonalInfoTitleHook
var userPersonalInfoTitleAfterUpsertHooks []UserPersonalInfoTitleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPersonalInfoTitle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPersonalInfoTitle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPersonalInfoTitle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPersonalInfoTitle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPersonalInfoTitle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPersonalInfoTitle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPersonalInfoTitle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPersonalInfoTitle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPersonalInfoTitle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPersonalInfoTitleHook registers your hook function for all future operations.
func AddUserPersonalInfoTitleHook(hookPoint boil.HookPoint, userPersonalInfoTitleHook UserPersonalInfoTitleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userPersonalInfoTitleBeforeInsertHooks = append(userPersonalInfoTitleBeforeInsertHooks, userPersonalInfoTitleHook)
	case boil.BeforeUpdateHook:
		userPersonalInfoTitleBeforeUpdateHooks = append(userPersonalInfoTitleBeforeUpdateHooks, userPersonalInfoTitleHook)
	case boil.BeforeDeleteHook:
		userPersonalInfoTitleBeforeDeleteHooks = append(userPersonalInfoTitleBeforeDeleteHooks, userPersonalInfoTitleHook)
	case boil.BeforeUpsertHook:
		userPersonalInfoTitleBeforeUpsertHooks = append(userPersonalInfoTitleBeforeUpsertHooks, userPersonalInfoTitleHook)
	case boil.AfterInsertHook:
		userPersonalInfoTitleAfterInsertHooks = append(userPersonalInfoTitleAfterInsertHooks, userPersonalInfoTitleHook)
	case boil.AfterSelectHook:
		userPersonalInfoTitleAfterSelectHooks = append(userPersonalInfoTitleAfterSelectHooks, userPersonalInfoTitleHook)
	case boil.AfterUpdateHook:
		userPersonalInfoTitleAfterUpdateHooks = append(userPersonalInfoTitleAfterUpdateHooks, userPersonalInfoTitleHook)
	case boil.AfterDeleteHook:
		userPersonalInfoTitleAfterDeleteHooks = append(userPersonalInfoTitleAfterDeleteHooks, userPersonalInfoTitleHook)
	case boil.AfterUpsertHook:
		userPersonalInfoTitleAfterUpsertHooks = append(userPersonalInfoTitleAfterUpsertHooks, userPersonalInfoTitleHook)
	}
}

// One returns a single userPersonalInfoTitle record from the query.
func (q userPersonalInfoTitleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPersonalInfoTitle, error) {
	o := &UserPersonalInfoTitle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_personal_info_title")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserPersonalInfoTitle records from the query.
func (q userPersonalInfoTitleQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPersonalInfoTitleSlice, error) {
	var o []*UserPersonalInfoTitle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserPersonalInfoTitle slice")
	}

	if len(userPersonalInfoTitleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserPersonalInfoTitle records in the query.
func (q userPersonalInfoTitleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_personal_info_title rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userPersonalInfoTitleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_personal_info_title exists")
	}

	return count > 0, nil
}

// UserPersonalInfo pointed to by the foreign key.
func (o *UserPersonalInfoTitle) UserPersonalInfo(mods ...qm.QueryMod) userPersonalInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_personal_info_id=?", o.UserPersonalInfoID),
	}

	queryMods = append(queryMods, mods...)

	query := UserPersonalInfos(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info\"")

	return query
}

// Title pointed to by the foreign key.
func (o *UserPersonalInfoTitle) Title(mods ...qm.QueryMod) titleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("title_id=?", o.TitleID),
	}

	queryMods = append(queryMods, mods...)

	query := Titles(queryMods...)
	queries.SetFrom(query.Query, "\"title\"")

	return query
}

// LoadUserPersonalInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoTitleL) LoadUserPersonalInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfoTitle interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfoTitle
	var object *UserPersonalInfoTitle

	if singular {
		object = maybeUserPersonalInfoTitle.(*UserPersonalInfoTitle)
	} else {
		slice = *maybeUserPersonalInfoTitle.(*[]*UserPersonalInfoTitle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoTitleR{}
		}
		args = append(args, object.UserPersonalInfoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoTitleR{}
			}

			for _, a := range args {
				if a == obj.UserPersonalInfoID {
					continue Outer
				}
			}

			args = append(args, obj.UserPersonalInfoID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info`), qm.WhereIn(`user_personal_info_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserPersonalInfo")
	}

	var resultSlice []*UserPersonalInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserPersonalInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_personal_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info")
	}

	if len(userPersonalInfoTitleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserPersonalInfo = foreign
		if foreign.R == nil {
			foreign.R = &userPersonalInfoR{}
		}
		foreign.R.UserPersonalInfoTitles = append(foreign.R.UserPersonalInfoTitles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserPersonalInfoID == foreign.UserPersonalInfoID {
				local.R.UserPersonalInfo = foreign
				if foreign.R == nil {
					foreign.R = &userPersonalInfoR{}
				}
				foreign.R.UserPersonalInfoTitles = append(foreign.R.UserPersonalInfoTitles, local)
				break
			}
		}
	}

	return nil
}

// LoadTitle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoTitleL) LoadTitle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfoTitle interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfoTitle
	var object *UserPersonalInfoTitle

	if singular {
		object = maybeUserPersonalInfoTitle.(*UserPersonalInfoTitle)
	} else {
		slice = *maybeUserPersonalInfoTitle.(*[]*UserPersonalInfoTitle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoTitleR{}
		}
		args = append(args, object.TitleID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoTitleR{}
			}

			for _, a := range args {
				if a == obj.TitleID {
					continue Outer
				}
			}

			args = append(args, obj.TitleID)
		}
	}

	query := NewQuery(qm.From(`title`), qm.WhereIn(`title_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Title")
	}

	var resultSlice []*Title
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Title")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for title")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for title")
	}

	if len(userPersonalInfoTitleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Title = foreign
		if foreign.R == nil {
			foreign.R = &titleR{}
		}
		foreign.R.UserPersonalInfoTitles = append(foreign.R.UserPersonalInfoTitles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TitleID == foreign.TitleID {
				local.R.Title = foreign
				if foreign.R == nil {
					foreign.R = &titleR{}
				}
				foreign.R.UserPersonalInfoTitles = append(foreign.R.UserPersonalInfoTitles, local)
				break
			}
		}
	}

	return nil
}

// SetUserPersonalInfo of the userPersonalInfoTitle to the related item.
// Sets o.R.UserPersonalInfo to related.
// Adds o to related.R.UserPersonalInfoTitles.
func (o *UserPersonalInfoTitle) SetUserPersonalInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserPersonalInfo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info_title\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_personal_info_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitlePrimaryKeyColumns),
	)
	values := []interface{}{related.UserPersonalInfoID, o.UserPersonalInfoTitleID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserPersonalInfoID = related.UserPersonalInfoID
	if o.R == nil {
		o.R = &userPersonalInfoTitleR{
			UserPersonalInfo: related,
		}
	} else {
		o.R.UserPersonalInfo = related
	}

	if related.R == nil {
		related.R = &userPersonalInfoR{
			UserPersonalInfoTitles: UserPersonalInfoTitleSlice{o},
		}
	} else {
		related.R.UserPersonalInfoTitles = append(related.R.UserPersonalInfoTitles, o)
	}

	return nil
}

// SetTitle of the userPersonalInfoTitle to the related item.
// Sets o.R.Title to related.
// Adds o to related.R.UserPersonalInfoTitles.
func (o *UserPersonalInfoTitle) SetTitle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Title) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info_title\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"title_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitlePrimaryKeyColumns),
	)
	values := []interface{}{related.TitleID, o.UserPersonalInfoTitleID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TitleID = related.TitleID
	if o.R == nil {
		o.R = &userPersonalInfoTitleR{
			Title: related,
		}
	} else {
		o.R.Title = related
	}

	if related.R == nil {
		related.R = &titleR{
			UserPersonalInfoTitles: UserPersonalInfoTitleSlice{o},
		}
	} else {
		related.R.UserPersonalInfoTitles = append(related.R.UserPersonalInfoTitles, o)
	}

	return nil
}

// UserPersonalInfoTitles retrieves all the records using an executor.
func UserPersonalInfoTitles(mods ...qm.QueryMod) userPersonalInfoTitleQuery {
	mods = append(mods, qm.From("\"user_personal_info_title\""))
	return userPersonalInfoTitleQuery{NewQuery(mods...)}
}

// FindUserPersonalInfoTitle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPersonalInfoTitle(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoTitleID int64, selectCols ...string) (*UserPersonalInfoTitle, error) {
	userPersonalInfoTitleObj := &UserPersonalInfoTitle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_personal_info_title\" where \"user_personal_info_title_id\"=$1", sel,
	)

	q := queries.Raw(query, userPersonalInfoTitleID)

	err := q.Bind(ctx, exec, userPersonalInfoTitleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_personal_info_title")
	}

	return userPersonalInfoTitleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPersonalInfoTitle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info_title provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoTitleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPersonalInfoTitleInsertCacheMut.RLock()
	cache, cached := userPersonalInfoTitleInsertCache[key]
	userPersonalInfoTitleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPersonalInfoTitleColumns,
			userPersonalInfoTitleColumnsWithDefault,
			userPersonalInfoTitleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoTitleType, userPersonalInfoTitleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPersonalInfoTitleType, userPersonalInfoTitleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_personal_info_title\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_personal_info_title\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_personal_info_title")
	}

	if !cached {
		userPersonalInfoTitleInsertCacheMut.Lock()
		userPersonalInfoTitleInsertCache[key] = cache
		userPersonalInfoTitleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserPersonalInfoTitle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPersonalInfoTitle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPersonalInfoTitleUpdateCacheMut.RLock()
	cache, cached := userPersonalInfoTitleUpdateCache[key]
	userPersonalInfoTitleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPersonalInfoTitleColumns,
			userPersonalInfoTitlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_personal_info_title, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_personal_info_title\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPersonalInfoTitlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPersonalInfoTitleType, userPersonalInfoTitleMapping, append(wl, userPersonalInfoTitlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_personal_info_title row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_personal_info_title")
	}

	if !cached {
		userPersonalInfoTitleUpdateCacheMut.Lock()
		userPersonalInfoTitleUpdateCache[key] = cache
		userPersonalInfoTitleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPersonalInfoTitleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_personal_info_title")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_personal_info_title")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPersonalInfoTitleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoTitlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_personal_info_title\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPersonalInfoTitlePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userPersonalInfoTitle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userPersonalInfoTitle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPersonalInfoTitle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info_title provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoTitleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPersonalInfoTitleUpsertCacheMut.RLock()
	cache, cached := userPersonalInfoTitleUpsertCache[key]
	userPersonalInfoTitleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userPersonalInfoTitleColumns,
			userPersonalInfoTitleColumnsWithDefault,
			userPersonalInfoTitleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userPersonalInfoTitleColumns,
			userPersonalInfoTitlePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_personal_info_title, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPersonalInfoTitlePrimaryKeyColumns))
			copy(conflict, userPersonalInfoTitlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"user_personal_info_title\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoTitleType, userPersonalInfoTitleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPersonalInfoTitleType, userPersonalInfoTitleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_personal_info_title")
	}

	if !cached {
		userPersonalInfoTitleUpsertCacheMut.Lock()
		userPersonalInfoTitleUpsertCache[key] = cache
		userPersonalInfoTitleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserPersonalInfoTitle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPersonalInfoTitle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfoTitle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPersonalInfoTitlePrimaryKeyMapping)
	sql := "DELETE FROM \"user_personal_info_title\" WHERE \"user_personal_info_title_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_personal_info_title")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_personal_info_title")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPersonalInfoTitleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userPersonalInfoTitleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_personal_info_title")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info_title")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPersonalInfoTitleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfoTitle slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userPersonalInfoTitleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoTitlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_personal_info_title\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoTitlePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userPersonalInfoTitle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info_title")
	}

	if len(userPersonalInfoTitleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPersonalInfoTitle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPersonalInfoTitle(ctx, exec, o.UserPersonalInfoTitleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPersonalInfoTitleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPersonalInfoTitleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoTitlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_personal_info_title\".* FROM \"user_personal_info_title\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoTitlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserPersonalInfoTitleSlice")
	}

	*o = slice

	return nil
}

// UserPersonalInfoTitleExists checks if the UserPersonalInfoTitle row exists.
func UserPersonalInfoTitleExists(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoTitleID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_personal_info_title\" where \"user_personal_info_title_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userPersonalInfoTitleID)
	}

	row := exec.QueryRowContext(ctx, sql, userPersonalInfoTitleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_personal_info_title exists")
	}

	return exists, nil
}
