// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDimensions(t *testing.T) {
	t.Parallel()

	query := Dimensions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDimensionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDimensionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Dimensions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDimensionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DimensionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDimensionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DimensionExists(ctx, tx, o.DimensionID)
	if err != nil {
		t.Errorf("Unable to check if Dimension exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DimensionExists to return true, but got false.")
	}
}

func testDimensionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dimensionFound, err := FindDimension(ctx, tx, o.DimensionID)
	if err != nil {
		t.Error(err)
	}

	if dimensionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDimensionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Dimensions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDimensionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Dimensions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDimensionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dimensionOne := &Dimension{}
	dimensionTwo := &Dimension{}
	if err = randomize.Struct(seed, dimensionOne, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}
	if err = randomize.Struct(seed, dimensionTwo, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dimensionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dimensionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dimensions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDimensionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dimensionOne := &Dimension{}
	dimensionTwo := &Dimension{}
	if err = randomize.Struct(seed, dimensionOne, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}
	if err = randomize.Struct(seed, dimensionTwo, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dimensionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dimensionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dimensionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func dimensionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dimension) error {
	*o = Dimension{}
	return nil
}

func testDimensionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Dimension{}
	o := &Dimension{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dimensionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dimension object: %s", err)
	}

	AddDimensionHook(boil.BeforeInsertHook, dimensionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dimensionBeforeInsertHooks = []DimensionHook{}

	AddDimensionHook(boil.AfterInsertHook, dimensionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dimensionAfterInsertHooks = []DimensionHook{}

	AddDimensionHook(boil.AfterSelectHook, dimensionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dimensionAfterSelectHooks = []DimensionHook{}

	AddDimensionHook(boil.BeforeUpdateHook, dimensionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dimensionBeforeUpdateHooks = []DimensionHook{}

	AddDimensionHook(boil.AfterUpdateHook, dimensionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dimensionAfterUpdateHooks = []DimensionHook{}

	AddDimensionHook(boil.BeforeDeleteHook, dimensionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dimensionBeforeDeleteHooks = []DimensionHook{}

	AddDimensionHook(boil.AfterDeleteHook, dimensionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dimensionAfterDeleteHooks = []DimensionHook{}

	AddDimensionHook(boil.BeforeUpsertHook, dimensionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dimensionBeforeUpsertHooks = []DimensionHook{}

	AddDimensionHook(boil.AfterUpsertHook, dimensionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dimensionAfterUpsertHooks = []DimensionHook{}
}

func testDimensionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDimensionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dimensionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDimensionToManyDimensionDirections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c DimensionDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDirectionDBTypes, false, dimensionDirectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DimensionID = a.DimensionID
	c.DimensionID = a.DimensionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dimensionDirection, err := a.DimensionDirections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dimensionDirection {
		if v.DimensionID == b.DimensionID {
			bFound = true
		}
		if v.DimensionID == c.DimensionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DimensionSlice{&a}
	if err = a.L.LoadDimensionDirections(ctx, tx, false, (*[]*Dimension)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionDirections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DimensionDirections = nil
	if err = a.L.LoadDimensionDirections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionDirections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dimensionDirection)
	}
}

func testDimensionToManyParentDimensionDimensions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentDimensionID, a.DimensionID)
	queries.Assign(&c.ParentDimensionID, a.DimensionID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dimension, err := a.ParentDimensionDimensions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dimension {
		if queries.Equal(v.ParentDimensionID, b.ParentDimensionID) {
			bFound = true
		}
		if queries.Equal(v.ParentDimensionID, c.ParentDimensionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DimensionSlice{&a}
	if err = a.L.LoadParentDimensionDimensions(ctx, tx, false, (*[]*Dimension)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentDimensionDimensions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentDimensionDimensions = nil
	if err = a.L.LoadParentDimensionDimensions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentDimensionDimensions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dimension)
	}
}

func testDimensionToManyDimensionsLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c DimensionsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dimensionsLinkDBTypes, false, dimensionsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionsLinkDBTypes, false, dimensionsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DimensionsID = a.DimensionID
	c.DimensionsID = a.DimensionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dimensionsLink, err := a.DimensionsLinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dimensionsLink {
		if v.DimensionsID == b.DimensionsID {
			bFound = true
		}
		if v.DimensionsID == c.DimensionsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DimensionSlice{&a}
	if err = a.L.LoadDimensionsLinks(ctx, tx, false, (*[]*Dimension)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DimensionsLinks = nil
	if err = a.L.LoadDimensionsLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DimensionsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dimensionsLink)
	}
}

func testDimensionToManyAddOpDimensionDirections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c, d, e DimensionDirection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DimensionDirection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionDirectionDBTypes, false, strmangle.SetComplement(dimensionDirectionPrimaryKeyColumns, dimensionDirectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DimensionDirection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDimensionDirections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DimensionID != first.DimensionID {
			t.Error("foreign key was wrong value", a.DimensionID, first.DimensionID)
		}
		if a.DimensionID != second.DimensionID {
			t.Error("foreign key was wrong value", a.DimensionID, second.DimensionID)
		}

		if first.R.Dimension != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dimension != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DimensionDirections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DimensionDirections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DimensionDirections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDimensionToManyAddOpParentDimensionDimensions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c, d, e Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dimension{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dimension{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentDimensionDimensions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.DimensionID, first.ParentDimensionID) {
			t.Error("foreign key was wrong value", a.DimensionID, first.ParentDimensionID)
		}
		if !queries.Equal(a.DimensionID, second.ParentDimensionID) {
			t.Error("foreign key was wrong value", a.DimensionID, second.ParentDimensionID)
		}

		if first.R.ParentDimension != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentDimension != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentDimensionDimensions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentDimensionDimensions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentDimensionDimensions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDimensionToManySetOpParentDimensionDimensions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c, d, e Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dimension{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentDimensionDimensions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentDimensionDimensions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentDimensionDimensions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentDimensionDimensions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentDimensionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentDimensionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.DimensionID, d.ParentDimensionID) {
		t.Error("foreign key was wrong value", a.DimensionID, d.ParentDimensionID)
	}
	if !queries.Equal(a.DimensionID, e.ParentDimensionID) {
		t.Error("foreign key was wrong value", a.DimensionID, e.ParentDimensionID)
	}

	if b.R.ParentDimension != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentDimension != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentDimension != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ParentDimension != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentDimensionDimensions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentDimensionDimensions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDimensionToManyRemoveOpParentDimensionDimensions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c, d, e Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dimension{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentDimensionDimensions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentDimensionDimensions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentDimensionDimensions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentDimensionDimensions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentDimensionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentDimensionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ParentDimension != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentDimension != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentDimension != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ParentDimension != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentDimensionDimensions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentDimensionDimensions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentDimensionDimensions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDimensionToManyAddOpDimensionsLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c, d, e DimensionsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DimensionsLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dimensionsLinkDBTypes, false, strmangle.SetComplement(dimensionsLinkPrimaryKeyColumns, dimensionsLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DimensionsLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDimensionsLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DimensionID != first.DimensionsID {
			t.Error("foreign key was wrong value", a.DimensionID, first.DimensionsID)
		}
		if a.DimensionID != second.DimensionsID {
			t.Error("foreign key was wrong value", a.DimensionID, second.DimensionsID)
		}

		if first.R.Dimension != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dimension != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DimensionsLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DimensionsLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DimensionsLinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDimensionToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Dimension
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := DimensionSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*Dimension)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDimensionToOneDimensionUsingParentDimension(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Dimension
	var foreign Dimension

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dimensionDBTypes, false, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentDimensionID, foreign.DimensionID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentDimension().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.DimensionID, foreign.DimensionID) {
		t.Errorf("want: %v, got %v", foreign.DimensionID, check.DimensionID)
	}

	slice := DimensionSlice{&local}
	if err = local.L.LoadParentDimension(ctx, tx, false, (*[]*Dimension)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentDimension == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentDimension = nil
	if err = local.L.LoadParentDimension(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentDimension == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDimensionToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Dimensions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testDimensionToOneSetOpDimensionUsingParentDimension(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b, c Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dimension{&b, &c} {
		err = a.SetParentDimension(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentDimension != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentDimensionDimensions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentDimensionID, x.DimensionID) {
			t.Error("foreign key was wrong value", a.ParentDimensionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentDimensionID))
		reflect.Indirect(reflect.ValueOf(&a.ParentDimensionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentDimensionID, x.DimensionID) {
			t.Error("foreign key was wrong value", a.ParentDimensionID, x.DimensionID)
		}
	}
}

func testDimensionToOneRemoveOpDimensionUsingParentDimension(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dimension
	var b Dimension

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dimensionDBTypes, false, strmangle.SetComplement(dimensionPrimaryKeyColumns, dimensionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParentDimension(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParentDimension(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentDimension().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ParentDimension != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentDimensionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentDimensionDimensions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDimensionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDimensionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DimensionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDimensionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dimensions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dimensionDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `DimensionDescription`: `varchar`, `DimensionID`: `int8`, `DimensionName`: `varchar`, `ParentDimensionID`: `int8`, `UserAccountID`: `int8`}
	_                = bytes.MinRead
)

func testDimensionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dimensionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dimensionColumns) == len(dimensionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDimensionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dimensionColumns) == len(dimensionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dimension{}
	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dimensionDBTypes, true, dimensionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dimensionColumns, dimensionPrimaryKeyColumns) {
		fields = dimensionColumns
	} else {
		fields = strmangle.SetComplement(
			dimensionColumns,
			dimensionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DimensionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDimensionsUpsert(t *testing.T) {
	t.Parallel()

	if len(dimensionColumns) == len(dimensionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Dimension{}
	if err = randomize.Struct(seed, &o, dimensionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dimension: %s", err)
	}

	count, err := Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dimensionDBTypes, false, dimensionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dimension struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dimension: %s", err)
	}

	count, err = Dimensions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
