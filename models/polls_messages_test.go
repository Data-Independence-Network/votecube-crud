// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsMessages(t *testing.T) {
	t.Parallel()

	query := PollsMessages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsMessagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsMessagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsMessages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsMessagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsMessageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsMessagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsMessageExists(ctx, tx, o.PollMessageID)
	if err != nil {
		t.Errorf("Unable to check if PollsMessage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsMessageExists to return true, but got false.")
	}
}

func testPollsMessagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsMessageFound, err := FindPollsMessage(ctx, tx, o.PollMessageID)
	if err != nil {
		t.Error(err)
	}

	if pollsMessageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsMessagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsMessages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsMessagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsMessages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsMessagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsMessageOne := &PollsMessage{}
	pollsMessageTwo := &PollsMessage{}
	if err = randomize.Struct(seed, pollsMessageOne, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsMessageTwo, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsMessageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsMessageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsMessages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsMessagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsMessageOne := &PollsMessage{}
	pollsMessageTwo := &PollsMessage{}
	if err = randomize.Struct(seed, pollsMessageOne, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsMessageTwo, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsMessageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsMessageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsMessageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func pollsMessageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsMessage) error {
	*o = PollsMessage{}
	return nil
}

func testPollsMessagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsMessage{}
	o := &PollsMessage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsMessage object: %s", err)
	}

	AddPollsMessageHook(boil.BeforeInsertHook, pollsMessageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsMessageBeforeInsertHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.AfterInsertHook, pollsMessageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsMessageAfterInsertHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.AfterSelectHook, pollsMessageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsMessageAfterSelectHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.BeforeUpdateHook, pollsMessageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsMessageBeforeUpdateHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.AfterUpdateHook, pollsMessageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsMessageAfterUpdateHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.BeforeDeleteHook, pollsMessageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsMessageBeforeDeleteHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.AfterDeleteHook, pollsMessageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsMessageAfterDeleteHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.BeforeUpsertHook, pollsMessageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsMessageBeforeUpsertHooks = []PollsMessageHook{}

	AddPollsMessageHook(boil.AfterUpsertHook, pollsMessageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsMessageAfterUpsertHooks = []PollsMessageHook{}
}

func testPollsMessagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsMessagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsMessageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsMessageToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsMessage
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.PollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollID != foreign.PollID {
		t.Errorf("want: %v, got %v", foreign.PollID, check.PollID)
	}

	slice := PollsMessageSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsMessage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsMessageToOneMessageUsingMessage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsMessage
	var foreign Message

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsMessageDBTypes, false, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, messageDBTypes, false, messageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Message struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MessageID = foreign.MessageID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Message().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MessageID != foreign.MessageID {
		t.Errorf("want: %v, got %v", foreign.MessageID, check.MessageID)
	}

	slice := PollsMessageSlice{&local}
	if err = local.L.LoadMessage(ctx, tx, false, (*[]*PollsMessage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Message == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Message = nil
	if err = local.L.LoadMessage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Message == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsMessageToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsMessage
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsMessageDBTypes, false, strmangle.SetComplement(pollsMessagePrimaryKeyColumns, pollsMessageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsMessages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID, x.PollID)
		}
	}
}
func testPollsMessageToOneSetOpMessageUsingMessage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsMessage
	var b, c Message

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsMessageDBTypes, false, strmangle.SetComplement(pollsMessagePrimaryKeyColumns, pollsMessageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, messageDBTypes, false, strmangle.SetComplement(messagePrimaryKeyColumns, messageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, messageDBTypes, false, strmangle.SetComplement(messagePrimaryKeyColumns, messageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Message{&b, &c} {
		err = a.SetMessage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Message != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsMessages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MessageID != x.MessageID {
			t.Error("foreign key was wrong value", a.MessageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MessageID))
		reflect.Indirect(reflect.ValueOf(&a.MessageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MessageID != x.MessageID {
			t.Error("foreign key was wrong value", a.MessageID, x.MessageID)
		}
	}
}

func testPollsMessagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsMessagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsMessageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsMessagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsMessages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsMessageDBTypes = map[string]string{`MessageID`: `int8`, `PollID`: `int8`, `PollMessageID`: `int8`}
	_                   = bytes.MinRead
)

func testPollsMessagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsMessageColumns) == len(pollsMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsMessagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsMessageColumns) == len(pollsMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsMessage{}
	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsMessageDBTypes, true, pollsMessagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsMessageColumns, pollsMessagePrimaryKeyColumns) {
		fields = pollsMessageColumns
	} else {
		fields = strmangle.SetComplement(
			pollsMessageColumns,
			pollsMessagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsMessageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsMessagesUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsMessageColumns) == len(pollsMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsMessage{}
	if err = randomize.Struct(seed, &o, pollsMessageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsMessage: %s", err)
	}

	count, err := PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsMessageDBTypes, false, pollsMessagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsMessage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsMessage: %s", err)
	}

	count, err = PollsMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
