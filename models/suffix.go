// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Suffix is an object representing the database table.
type Suffix struct {
	SuffixID   int64  `boil:"suffix_id" json:"suffix_id" toml:"suffix_id" yaml:"suffix_id"`
	SuffixName string `boil:"suffix_name" json:"suffix_name" toml:"suffix_name" yaml:"suffix_name"`

	R *suffixR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L suffixL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SuffixColumns = struct {
	SuffixID   string
	SuffixName string
}{
	SuffixID:   "suffix_id",
	SuffixName: "suffix_name",
}

// SuffixRels is where relationship names are stored.
var SuffixRels = struct {
	UserAccountSuffixes string
}{
	UserAccountSuffixes: "UserAccountSuffixes",
}

// suffixR is where relationships are stored.
type suffixR struct {
	UserAccountSuffixes UserAccountSuffixSlice
}

// NewStruct creates a new relationship struct
func (*suffixR) NewStruct() *suffixR {
	return &suffixR{}
}

// suffixL is where Load methods for each relationship are stored.
type suffixL struct{}

var (
	suffixColumns               = []string{"suffix_id", "suffix_name"}
	suffixColumnsWithoutDefault = []string{"suffix_id", "suffix_name"}
	suffixColumnsWithDefault    = []string{}
	suffixPrimaryKeyColumns     = []string{"suffix_id"}
)

type (
	// SuffixSlice is an alias for a slice of pointers to Suffix.
	// This should generally be used opposed to []Suffix.
	SuffixSlice []*Suffix
	// SuffixHook is the signature for custom Suffix hook methods
	SuffixHook func(context.Context, boil.ContextExecutor, *Suffix) error

	suffixQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	suffixType                 = reflect.TypeOf(&Suffix{})
	suffixMapping              = queries.MakeStructMapping(suffixType)
	suffixPrimaryKeyMapping, _ = queries.BindMapping(suffixType, suffixMapping, suffixPrimaryKeyColumns)
	suffixInsertCacheMut       sync.RWMutex
	suffixInsertCache          = make(map[string]insertCache)
	suffixUpdateCacheMut       sync.RWMutex
	suffixUpdateCache          = make(map[string]updateCache)
	suffixUpsertCacheMut       sync.RWMutex
	suffixUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var suffixBeforeInsertHooks []SuffixHook
var suffixBeforeUpdateHooks []SuffixHook
var suffixBeforeDeleteHooks []SuffixHook
var suffixBeforeUpsertHooks []SuffixHook

var suffixAfterInsertHooks []SuffixHook
var suffixAfterSelectHooks []SuffixHook
var suffixAfterUpdateHooks []SuffixHook
var suffixAfterDeleteHooks []SuffixHook
var suffixAfterUpsertHooks []SuffixHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Suffix) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Suffix) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Suffix) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Suffix) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Suffix) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Suffix) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Suffix) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Suffix) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Suffix) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range suffixAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSuffixHook registers your hook function for all future operations.
func AddSuffixHook(hookPoint boil.HookPoint, suffixHook SuffixHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		suffixBeforeInsertHooks = append(suffixBeforeInsertHooks, suffixHook)
	case boil.BeforeUpdateHook:
		suffixBeforeUpdateHooks = append(suffixBeforeUpdateHooks, suffixHook)
	case boil.BeforeDeleteHook:
		suffixBeforeDeleteHooks = append(suffixBeforeDeleteHooks, suffixHook)
	case boil.BeforeUpsertHook:
		suffixBeforeUpsertHooks = append(suffixBeforeUpsertHooks, suffixHook)
	case boil.AfterInsertHook:
		suffixAfterInsertHooks = append(suffixAfterInsertHooks, suffixHook)
	case boil.AfterSelectHook:
		suffixAfterSelectHooks = append(suffixAfterSelectHooks, suffixHook)
	case boil.AfterUpdateHook:
		suffixAfterUpdateHooks = append(suffixAfterUpdateHooks, suffixHook)
	case boil.AfterDeleteHook:
		suffixAfterDeleteHooks = append(suffixAfterDeleteHooks, suffixHook)
	case boil.AfterUpsertHook:
		suffixAfterUpsertHooks = append(suffixAfterUpsertHooks, suffixHook)
	}
}

// One returns a single suffix record from the query.
func (q suffixQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Suffix, error) {
	o := &Suffix{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for suffix")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Suffix records from the query.
func (q suffixQuery) All(ctx context.Context, exec boil.ContextExecutor) (SuffixSlice, error) {
	var o []*Suffix

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Suffix slice")
	}

	if len(suffixAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Suffix records in the query.
func (q suffixQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count suffix rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q suffixQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if suffix exists")
	}

	return count > 0, nil
}

// UserAccountSuffixes retrieves all the user_account_suffix's UserAccountSuffixes with an executor.
func (o *Suffix) UserAccountSuffixes(mods ...qm.QueryMod) userAccountSuffixQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_account_suffix\".\"suffix_id\"=?", o.SuffixID),
	)

	query := UserAccountSuffixes(queryMods...)
	queries.SetFrom(query.Query, "\"user_account_suffix\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_account_suffix\".*"})
	}

	return query
}

// LoadUserAccountSuffixes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (suffixL) LoadUserAccountSuffixes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSuffix interface{}, mods queries.Applicator) error {
	var slice []*Suffix
	var object *Suffix

	if singular {
		object = maybeSuffix.(*Suffix)
	} else {
		slice = *maybeSuffix.(*[]*Suffix)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &suffixR{}
		}
		args = append(args, object.SuffixID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &suffixR{}
			}

			for _, a := range args {
				if a == obj.SuffixID {
					continue Outer
				}
			}

			args = append(args, obj.SuffixID)
		}
	}

	query := NewQuery(qm.From(`user_account_suffix`), qm.WhereIn(`suffix_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_account_suffix")
	}

	var resultSlice []*UserAccountSuffix
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_account_suffix")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_account_suffix")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account_suffix")
	}

	if len(userAccountSuffixAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAccountSuffixes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAccountSuffixR{}
			}
			foreign.R.Suffix = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SuffixID == foreign.SuffixID {
				local.R.UserAccountSuffixes = append(local.R.UserAccountSuffixes, foreign)
				if foreign.R == nil {
					foreign.R = &userAccountSuffixR{}
				}
				foreign.R.Suffix = local
				break
			}
		}
	}

	return nil
}

// AddUserAccountSuffixes adds the given related objects to the existing relationships
// of the suffix, optionally inserting them as new records.
// Appends related to o.R.UserAccountSuffixes.
// Sets related.R.Suffix appropriately.
func (o *Suffix) AddUserAccountSuffixes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAccountSuffix) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SuffixID = o.SuffixID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_account_suffix\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"suffix_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAccountSuffixPrimaryKeyColumns),
			)
			values := []interface{}{o.SuffixID, rel.UserAccountSuffixID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SuffixID = o.SuffixID
		}
	}

	if o.R == nil {
		o.R = &suffixR{
			UserAccountSuffixes: related,
		}
	} else {
		o.R.UserAccountSuffixes = append(o.R.UserAccountSuffixes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAccountSuffixR{
				Suffix: o,
			}
		} else {
			rel.R.Suffix = o
		}
	}
	return nil
}

// Suffixes retrieves all the records using an executor.
func Suffixes(mods ...qm.QueryMod) suffixQuery {
	mods = append(mods, qm.From("\"suffix\""))
	return suffixQuery{NewQuery(mods...)}
}

// FindSuffix retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSuffix(ctx context.Context, exec boil.ContextExecutor, suffixID int64, selectCols ...string) (*Suffix, error) {
	suffixObj := &Suffix{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"suffix\" where \"suffix_id\"=$1", sel,
	)

	q := queries.Raw(query, suffixID)

	err := q.Bind(ctx, exec, suffixObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from suffix")
	}

	return suffixObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Suffix) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suffix provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(suffixColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	suffixInsertCacheMut.RLock()
	cache, cached := suffixInsertCache[key]
	suffixInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			suffixColumns,
			suffixColumnsWithDefault,
			suffixColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(suffixType, suffixMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(suffixType, suffixMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"suffix\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"suffix\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into suffix")
	}

	if !cached {
		suffixInsertCacheMut.Lock()
		suffixInsertCache[key] = cache
		suffixInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Suffix.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Suffix) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	suffixUpdateCacheMut.RLock()
	cache, cached := suffixUpdateCache[key]
	suffixUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			suffixColumns,
			suffixPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update suffix, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"suffix\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, suffixPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(suffixType, suffixMapping, append(wl, suffixPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update suffix row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for suffix")
	}

	if !cached {
		suffixUpdateCacheMut.Lock()
		suffixUpdateCache[key] = cache
		suffixUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q suffixQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for suffix")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for suffix")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SuffixSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suffixPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"suffix\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, suffixPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in suffix slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all suffix")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Suffix) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suffix provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(suffixColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	suffixUpsertCacheMut.RLock()
	cache, cached := suffixUpsertCache[key]
	suffixUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			suffixColumns,
			suffixColumnsWithDefault,
			suffixColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			suffixColumns,
			suffixPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert suffix, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(suffixPrimaryKeyColumns))
			copy(conflict, suffixPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"suffix\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(suffixType, suffixMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(suffixType, suffixMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert suffix")
	}

	if !cached {
		suffixUpsertCacheMut.Lock()
		suffixUpsertCache[key] = cache
		suffixUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Suffix record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Suffix) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Suffix provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), suffixPrimaryKeyMapping)
	sql := "DELETE FROM \"suffix\" WHERE \"suffix_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from suffix")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for suffix")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q suffixQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no suffixQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suffix")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suffix")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SuffixSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Suffix slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(suffixBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suffixPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"suffix\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, suffixPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suffix slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suffix")
	}

	if len(suffixAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Suffix) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSuffix(ctx, exec, o.SuffixID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SuffixSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SuffixSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suffixPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"suffix\".* FROM \"suffix\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, suffixPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SuffixSlice")
	}

	*o = slice

	return nil
}

// SuffixExists checks if the Suffix row exists.
func SuffixExists(ctx context.Context, exec boil.ContextExecutor, suffixID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"suffix\" where \"suffix_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, suffixID)
	}

	row := exec.QueryRowContext(ctx, sql, suffixID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if suffix exists")
	}

	return exists, nil
}
