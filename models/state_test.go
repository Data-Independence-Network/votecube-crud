// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStates(t *testing.T) {
	t.Parallel()

	query := States()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := States().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StateExists(ctx, tx, o.StateID)
	if err != nil {
		t.Errorf("Unable to check if State exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StateExists to return true, but got false.")
	}
}

func testStatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stateFound, err := FindState(ctx, tx, o.StateID)
	if err != nil {
		t.Error(err)
	}

	if stateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = States().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := States().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stateOne := &State{}
	stateTwo := &State{}
	if err = randomize.Struct(seed, stateOne, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}
	if err = randomize.Struct(seed, stateTwo, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := States().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stateOne := &State{}
	stateTwo := &State{}
	if err = randomize.Struct(seed, stateOne, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}
	if err = randomize.Struct(seed, stateTwo, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func stateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func stateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *State) error {
	*o = State{}
	return nil
}

func testStatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &State{}
	o := &State{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, stateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize State object: %s", err)
	}

	AddStateHook(boil.BeforeInsertHook, stateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	stateBeforeInsertHooks = []StateHook{}

	AddStateHook(boil.AfterInsertHook, stateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	stateAfterInsertHooks = []StateHook{}

	AddStateHook(boil.AfterSelectHook, stateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	stateAfterSelectHooks = []StateHook{}

	AddStateHook(boil.BeforeUpdateHook, stateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	stateBeforeUpdateHooks = []StateHook{}

	AddStateHook(boil.AfterUpdateHook, stateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	stateAfterUpdateHooks = []StateHook{}

	AddStateHook(boil.BeforeDeleteHook, stateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	stateBeforeDeleteHooks = []StateHook{}

	AddStateHook(boil.AfterDeleteHook, stateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	stateAfterDeleteHooks = []StateHook{}

	AddStateHook(boil.BeforeUpsertHook, stateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	stateBeforeUpsertHooks = []StateHook{}

	AddStateHook(boil.AfterUpsertHook, stateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	stateAfterUpsertHooks = []StateHook{}
}

func testStatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStateToManyCounties(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c County

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StateID = a.StateID
	c.StateID = a.StateID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	county, err := a.Counties().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range county {
		if v.StateID == b.StateID {
			bFound = true
		}
		if v.StateID == c.StateID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StateSlice{&a}
	if err = a.L.LoadCounties(ctx, tx, false, (*[]*State)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Counties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Counties = nil
	if err = a.L.LoadCounties(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Counties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", county)
	}
}

func testStateToManyPollsStates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c PollsState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsStateDBTypes, false, pollsStateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsStateDBTypes, false, pollsStateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StateID = a.StateID
	c.StateID = a.StateID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsState, err := a.PollsStates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsState {
		if v.StateID == b.StateID {
			bFound = true
		}
		if v.StateID == c.StateID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StateSlice{&a}
	if err = a.L.LoadPollsStates(ctx, tx, false, (*[]*State)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsStates = nil
	if err = a.L.LoadPollsStates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsState)
	}
}

func testStateToManyTowns(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c Town

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, townDBTypes, false, townColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, townDBTypes, false, townColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StateID = a.StateID
	c.StateID = a.StateID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	town, err := a.Towns().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range town {
		if v.StateID == b.StateID {
			bFound = true
		}
		if v.StateID == c.StateID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StateSlice{&a}
	if err = a.L.LoadTowns(ctx, tx, false, (*[]*State)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Towns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Towns = nil
	if err = a.L.LoadTowns(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Towns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", town)
	}
}

func testStateToManyAddOpCounties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c, d, e County

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*County{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, countyDBTypes, false, strmangle.SetComplement(countyPrimaryKeyColumns, countyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*County{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCounties(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.StateID != first.StateID {
			t.Error("foreign key was wrong value", a.StateID, first.StateID)
		}
		if a.StateID != second.StateID {
			t.Error("foreign key was wrong value", a.StateID, second.StateID)
		}

		if first.R.State != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.State != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Counties[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Counties[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Counties().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStateToManyAddOpPollsStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c, d, e PollsState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsState{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsStateDBTypes, false, strmangle.SetComplement(pollsStatePrimaryKeyColumns, pollsStateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsState{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsStates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.StateID != first.StateID {
			t.Error("foreign key was wrong value", a.StateID, first.StateID)
		}
		if a.StateID != second.StateID {
			t.Error("foreign key was wrong value", a.StateID, second.StateID)
		}

		if first.R.State != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.State != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsStates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsStates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsStates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStateToManyAddOpTowns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c, d, e Town

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Town{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, townDBTypes, false, strmangle.SetComplement(townPrimaryKeyColumns, townColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Town{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTowns(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.StateID != first.StateID {
			t.Error("foreign key was wrong value", a.StateID, first.StateID)
		}
		if a.StateID != second.StateID {
			t.Error("foreign key was wrong value", a.StateID, second.StateID)
		}

		if first.R.State != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.State != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Towns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Towns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Towns().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStateToOneTimezoneUsingTimezone(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local State
	var foreign Timezone

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, timezoneDBTypes, false, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TimezoneID = foreign.TimezoneID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Timezone().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TimezoneID != foreign.TimezoneID {
		t.Errorf("want: %v, got %v", foreign.TimezoneID, check.TimezoneID)
	}

	slice := StateSlice{&local}
	if err = local.L.LoadTimezone(ctx, tx, false, (*[]*State)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Timezone == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Timezone = nil
	if err = local.L.LoadTimezone(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Timezone == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStateToOneCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local State
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CountryID = foreign.CountryID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CountryID != foreign.CountryID {
		t.Errorf("want: %v, got %v", foreign.CountryID, check.CountryID)
	}

	slice := StateSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*State)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStateToOneSetOpTimezoneUsingTimezone(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c Timezone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, timezoneDBTypes, false, strmangle.SetComplement(timezonePrimaryKeyColumns, timezoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, timezoneDBTypes, false, strmangle.SetComplement(timezonePrimaryKeyColumns, timezoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Timezone{&b, &c} {
		err = a.SetTimezone(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Timezone != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.States[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TimezoneID != x.TimezoneID {
			t.Error("foreign key was wrong value", a.TimezoneID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TimezoneID))
		reflect.Indirect(reflect.ValueOf(&a.TimezoneID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TimezoneID != x.TimezoneID {
			t.Error("foreign key was wrong value", a.TimezoneID, x.TimezoneID)
		}
	}
}
func testStateToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a State
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.States[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID != x.CountryID {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID != x.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, x.CountryID)
		}
	}
}

func testStatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := States().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stateDBTypes = map[string]string{`CountryID`: `int8`, `StateCode`: `varchar`, `StateFullName`: `varchar`, `StateID`: `int8`, `StateName`: `varchar`, `TimezoneID`: `int8`}
	_            = bytes.MinRead
)

func testStatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(statePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stateColumns) == len(statePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stateDBTypes, true, statePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stateColumns) == len(statePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &State{}
	if err = randomize.Struct(seed, o, stateDBTypes, true, stateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stateDBTypes, true, statePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stateColumns, statePrimaryKeyColumns) {
		fields = stateColumns
	} else {
		fields = strmangle.SetComplement(
			stateColumns,
			statePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStatesUpsert(t *testing.T) {
	t.Parallel()

	if len(stateColumns) == len(statePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := State{}
	if err = randomize.Struct(seed, &o, stateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert State: %s", err)
	}

	count, err := States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stateDBTypes, false, statePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize State struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert State: %s", err)
	}

	count, err = States().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
