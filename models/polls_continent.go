// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsContinent is an object representing the database table.
type PollsContinent struct {
	PollContinentID int64 `boil:"poll_continent_id" json:"poll_continent_id" toml:"poll_continent_id" yaml:"poll_continent_id"`
	PollID          int64 `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	ContinentID     int64 `boil:"continent_id" json:"continent_id" toml:"continent_id" yaml:"continent_id"`

	R *pollsContinentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsContinentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsContinentColumns = struct {
	PollContinentID string
	PollID          string
	ContinentID     string
}{
	PollContinentID: "poll_continent_id",
	PollID:          "poll_id",
	ContinentID:     "continent_id",
}

// PollsContinentRels is where relationship names are stored.
var PollsContinentRels = struct {
	Poll      string
	Continent string
}{
	Poll:      "Poll",
	Continent: "Continent",
}

// pollsContinentR is where relationships are stored.
type pollsContinentR struct {
	Poll      *Poll
	Continent *Continent
}

// NewStruct creates a new relationship struct
func (*pollsContinentR) NewStruct() *pollsContinentR {
	return &pollsContinentR{}
}

// pollsContinentL is where Load methods for each relationship are stored.
type pollsContinentL struct{}

var (
	pollsContinentColumns               = []string{"poll_continent_id", "poll_id", "continent_id"}
	pollsContinentColumnsWithoutDefault = []string{"poll_continent_id", "poll_id", "continent_id"}
	pollsContinentColumnsWithDefault    = []string{}
	pollsContinentPrimaryKeyColumns     = []string{"poll_continent_id"}
)

type (
	// PollsContinentSlice is an alias for a slice of pointers to PollsContinent.
	// This should generally be used opposed to []PollsContinent.
	PollsContinentSlice []*PollsContinent
	// PollsContinentHook is the signature for custom PollsContinent hook methods
	PollsContinentHook func(context.Context, boil.ContextExecutor, *PollsContinent) error

	pollsContinentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsContinentType                 = reflect.TypeOf(&PollsContinent{})
	pollsContinentMapping              = queries.MakeStructMapping(pollsContinentType)
	pollsContinentPrimaryKeyMapping, _ = queries.BindMapping(pollsContinentType, pollsContinentMapping, pollsContinentPrimaryKeyColumns)
	pollsContinentInsertCacheMut       sync.RWMutex
	pollsContinentInsertCache          = make(map[string]insertCache)
	pollsContinentUpdateCacheMut       sync.RWMutex
	pollsContinentUpdateCache          = make(map[string]updateCache)
	pollsContinentUpsertCacheMut       sync.RWMutex
	pollsContinentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsContinentBeforeInsertHooks []PollsContinentHook
var pollsContinentBeforeUpdateHooks []PollsContinentHook
var pollsContinentBeforeDeleteHooks []PollsContinentHook
var pollsContinentBeforeUpsertHooks []PollsContinentHook

var pollsContinentAfterInsertHooks []PollsContinentHook
var pollsContinentAfterSelectHooks []PollsContinentHook
var pollsContinentAfterUpdateHooks []PollsContinentHook
var pollsContinentAfterDeleteHooks []PollsContinentHook
var pollsContinentAfterUpsertHooks []PollsContinentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsContinent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsContinent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsContinent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsContinent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsContinent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsContinent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsContinent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsContinent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsContinent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsContinentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsContinentHook registers your hook function for all future operations.
func AddPollsContinentHook(hookPoint boil.HookPoint, pollsContinentHook PollsContinentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsContinentBeforeInsertHooks = append(pollsContinentBeforeInsertHooks, pollsContinentHook)
	case boil.BeforeUpdateHook:
		pollsContinentBeforeUpdateHooks = append(pollsContinentBeforeUpdateHooks, pollsContinentHook)
	case boil.BeforeDeleteHook:
		pollsContinentBeforeDeleteHooks = append(pollsContinentBeforeDeleteHooks, pollsContinentHook)
	case boil.BeforeUpsertHook:
		pollsContinentBeforeUpsertHooks = append(pollsContinentBeforeUpsertHooks, pollsContinentHook)
	case boil.AfterInsertHook:
		pollsContinentAfterInsertHooks = append(pollsContinentAfterInsertHooks, pollsContinentHook)
	case boil.AfterSelectHook:
		pollsContinentAfterSelectHooks = append(pollsContinentAfterSelectHooks, pollsContinentHook)
	case boil.AfterUpdateHook:
		pollsContinentAfterUpdateHooks = append(pollsContinentAfterUpdateHooks, pollsContinentHook)
	case boil.AfterDeleteHook:
		pollsContinentAfterDeleteHooks = append(pollsContinentAfterDeleteHooks, pollsContinentHook)
	case boil.AfterUpsertHook:
		pollsContinentAfterUpsertHooks = append(pollsContinentAfterUpsertHooks, pollsContinentHook)
	}
}

// OneG returns a single pollsContinent record from the query using the global executor.
func (q pollsContinentQuery) OneG(ctx context.Context) (*PollsContinent, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pollsContinent record from the query.
func (q pollsContinentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsContinent, error) {
	o := &PollsContinent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_continent")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PollsContinent records from the query using the global executor.
func (q pollsContinentQuery) AllG(ctx context.Context) (PollsContinentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PollsContinent records from the query.
func (q pollsContinentQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsContinentSlice, error) {
	var o []*PollsContinent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsContinent slice")
	}

	if len(pollsContinentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PollsContinent records in the query, and panics on error.
func (q pollsContinentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PollsContinent records in the query.
func (q pollsContinentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_continent rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q pollsContinentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pollsContinentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_continent exists")
	}

	return count > 0, nil
}

// Poll pointed to by the foreign key.
func (o *PollsContinent) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// Continent pointed to by the foreign key.
func (o *PollsContinent) Continent(mods ...qm.QueryMod) continentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("continent_id_2=?", o.ContinentID),
	}

	queryMods = append(queryMods, mods...)

	query := Continents(queryMods...)
	queries.SetFrom(query.Query, "\"continent\"")

	return query
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsContinentL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsContinent interface{}, mods queries.Applicator) error {
	var slice []*PollsContinent
	var object *PollsContinent

	if singular {
		object = maybePollsContinent.(*PollsContinent)
	} else {
		slice = *maybePollsContinent.(*[]*PollsContinent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsContinentR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsContinentR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsContinentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsContinents = append(foreign.R.PollsContinents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.PollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsContinents = append(foreign.R.PollsContinents, local)
				break
			}
		}
	}

	return nil
}

// LoadContinent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsContinentL) LoadContinent(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsContinent interface{}, mods queries.Applicator) error {
	var slice []*PollsContinent
	var object *PollsContinent

	if singular {
		object = maybePollsContinent.(*PollsContinent)
	} else {
		slice = *maybePollsContinent.(*[]*PollsContinent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsContinentR{}
		}
		args = append(args, object.ContinentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsContinentR{}
			}

			for _, a := range args {
				if a == obj.ContinentID {
					continue Outer
				}
			}

			args = append(args, obj.ContinentID)
		}
	}

	query := NewQuery(qm.From(`continent`), qm.WhereIn(`continent_id_2 in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Continent")
	}

	var resultSlice []*Continent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Continent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for continent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for continent")
	}

	if len(pollsContinentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Continent = foreign
		if foreign.R == nil {
			foreign.R = &continentR{}
		}
		foreign.R.PollsContinents = append(foreign.R.PollsContinents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContinentID == foreign.ContinentID2 {
				local.R.Continent = foreign
				if foreign.R == nil {
					foreign.R = &continentR{}
				}
				foreign.R.PollsContinents = append(foreign.R.PollsContinents, local)
				break
			}
		}
	}

	return nil
}

// SetPollG of the pollsContinent to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsContinents.
// Uses the global database handle.
func (o *PollsContinent) SetPollG(ctx context.Context, insert bool, related *Poll) error {
	return o.SetPoll(ctx, boil.GetContextDB(), insert, related)
}

// SetPoll of the pollsContinent to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsContinents.
func (o *PollsContinent) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_continent\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsContinentPrimaryKeyColumns),
	)
	values := []interface{}{related.PollID, o.PollContinentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.PollID
	if o.R == nil {
		o.R = &pollsContinentR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsContinents: PollsContinentSlice{o},
		}
	} else {
		related.R.PollsContinents = append(related.R.PollsContinents, o)
	}

	return nil
}

// SetContinentG of the pollsContinent to the related item.
// Sets o.R.Continent to related.
// Adds o to related.R.PollsContinents.
// Uses the global database handle.
func (o *PollsContinent) SetContinentG(ctx context.Context, insert bool, related *Continent) error {
	return o.SetContinent(ctx, boil.GetContextDB(), insert, related)
}

// SetContinent of the pollsContinent to the related item.
// Sets o.R.Continent to related.
// Adds o to related.R.PollsContinents.
func (o *PollsContinent) SetContinent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Continent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_continent\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"continent_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsContinentPrimaryKeyColumns),
	)
	values := []interface{}{related.ContinentID2, o.PollContinentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContinentID = related.ContinentID2
	if o.R == nil {
		o.R = &pollsContinentR{
			Continent: related,
		}
	} else {
		o.R.Continent = related
	}

	if related.R == nil {
		related.R = &continentR{
			PollsContinents: PollsContinentSlice{o},
		}
	} else {
		related.R.PollsContinents = append(related.R.PollsContinents, o)
	}

	return nil
}

// PollsContinents retrieves all the records using an executor.
func PollsContinents(mods ...qm.QueryMod) pollsContinentQuery {
	mods = append(mods, qm.From("\"polls_continent\""))
	return pollsContinentQuery{NewQuery(mods...)}
}

// FindPollsContinentG retrieves a single record by ID.
func FindPollsContinentG(ctx context.Context, pollContinentID int64, selectCols ...string) (*PollsContinent, error) {
	return FindPollsContinent(ctx, boil.GetContextDB(), pollContinentID, selectCols...)
}

// FindPollsContinent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsContinent(ctx context.Context, exec boil.ContextExecutor, pollContinentID int64, selectCols ...string) (*PollsContinent, error) {
	pollsContinentObj := &PollsContinent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_continent\" where \"poll_continent_id\"=$1", sel,
	)

	q := queries.Raw(query, pollContinentID)

	err := q.Bind(ctx, exec, pollsContinentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_continent")
	}

	return pollsContinentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PollsContinent) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsContinent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_continent provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsContinentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsContinentInsertCacheMut.RLock()
	cache, cached := pollsContinentInsertCache[key]
	pollsContinentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsContinentColumns,
			pollsContinentColumnsWithDefault,
			pollsContinentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsContinentType, pollsContinentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsContinentType, pollsContinentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_continent\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_continent\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_continent")
	}

	if !cached {
		pollsContinentInsertCacheMut.Lock()
		pollsContinentInsertCache[key] = cache
		pollsContinentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PollsContinent record using the global executor.
// See Update for more documentation.
func (o *PollsContinent) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PollsContinent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsContinent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsContinentUpdateCacheMut.RLock()
	cache, cached := pollsContinentUpdateCache[key]
	pollsContinentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsContinentColumns,
			pollsContinentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_continent, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_continent\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsContinentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsContinentType, pollsContinentMapping, append(wl, pollsContinentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_continent row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_continent")
	}

	if !cached {
		pollsContinentUpdateCacheMut.Lock()
		pollsContinentUpdateCache[key] = cache
		pollsContinentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsContinentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_continent")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_continent")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PollsContinentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsContinentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsContinentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_continent\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsContinentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsContinent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsContinent")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PollsContinent) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsContinent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_continent provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsContinentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsContinentUpsertCacheMut.RLock()
	cache, cached := pollsContinentUpsertCache[key]
	pollsContinentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsContinentColumns,
			pollsContinentColumnsWithDefault,
			pollsContinentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsContinentColumns,
			pollsContinentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_continent, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsContinentPrimaryKeyColumns))
			copy(conflict, pollsContinentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_continent\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsContinentType, pollsContinentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsContinentType, pollsContinentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_continent")
	}

	if !cached {
		pollsContinentUpsertCacheMut.Lock()
		pollsContinentUpsertCache[key] = cache
		pollsContinentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PollsContinent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PollsContinent) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PollsContinent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsContinent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsContinent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsContinentPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_continent\" WHERE \"poll_continent_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_continent")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_continent")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsContinentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsContinentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_continent")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_continent")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PollsContinentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsContinentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsContinent slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsContinentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsContinentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_continent\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsContinentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsContinent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_continent")
	}

	if len(pollsContinentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PollsContinent) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PollsContinent provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsContinent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsContinent(ctx, exec, o.PollContinentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsContinentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PollsContinentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsContinentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsContinentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsContinentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_continent\".* FROM \"polls_continent\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsContinentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsContinentSlice")
	}

	*o = slice

	return nil
}

// PollsContinentExistsG checks if the PollsContinent row exists.
func PollsContinentExistsG(ctx context.Context, pollContinentID int64) (bool, error) {
	return PollsContinentExists(ctx, boil.GetContextDB(), pollContinentID)
}

// PollsContinentExists checks if the PollsContinent row exists.
func PollsContinentExists(ctx context.Context, exec boil.ContextExecutor, pollContinentID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_continent\" where \"poll_continent_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollContinentID)
	}

	row := exec.QueryRowContext(ctx, sql, pollContinentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_continent exists")
	}

	return exists, nil
}
