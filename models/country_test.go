// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCountries(t *testing.T) {
	t.Parallel()

	query := Countries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCountriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCountriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Countries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCountriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CountrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCountriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CountryExists(ctx, tx, o.CountryID)
	if err != nil {
		t.Errorf("Unable to check if Country exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CountryExists to return true, but got false.")
	}
}

func testCountriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	countryFound, err := FindCountry(ctx, tx, o.CountryID)
	if err != nil {
		t.Error(err)
	}

	if countryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCountriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Countries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCountriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Countries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCountriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	countryOne := &Country{}
	countryTwo := &Country{}
	if err = randomize.Struct(seed, countryOne, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}
	if err = randomize.Struct(seed, countryTwo, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = countryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = countryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Countries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCountriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	countryOne := &Country{}
	countryTwo := &Country{}
	if err = randomize.Struct(seed, countryOne, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}
	if err = randomize.Struct(seed, countryTwo, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = countryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = countryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func countryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func countryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Country) error {
	*o = Country{}
	return nil
}

func testCountriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Country{}
	o := &Country{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, countryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Country object: %s", err)
	}

	AddCountryHook(boil.BeforeInsertHook, countryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	countryBeforeInsertHooks = []CountryHook{}

	AddCountryHook(boil.AfterInsertHook, countryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	countryAfterInsertHooks = []CountryHook{}

	AddCountryHook(boil.AfterSelectHook, countryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	countryAfterSelectHooks = []CountryHook{}

	AddCountryHook(boil.BeforeUpdateHook, countryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	countryBeforeUpdateHooks = []CountryHook{}

	AddCountryHook(boil.AfterUpdateHook, countryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	countryAfterUpdateHooks = []CountryHook{}

	AddCountryHook(boil.BeforeDeleteHook, countryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	countryBeforeDeleteHooks = []CountryHook{}

	AddCountryHook(boil.AfterDeleteHook, countryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	countryAfterDeleteHooks = []CountryHook{}

	AddCountryHook(boil.BeforeUpsertHook, countryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	countryBeforeUpsertHooks = []CountryHook{}

	AddCountryHook(boil.AfterUpsertHook, countryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	countryAfterUpsertHooks = []CountryHook{}
}

func testCountriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCountriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(countryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCountryToManyEthnicGroupCountries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c EthnicGroupCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ethnicGroupCountryDBTypes, false, ethnicGroupCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ethnicGroupCountryDBTypes, false, ethnicGroupCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CountryID = a.CountryID
	c.CountryID = a.CountryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	ethnicGroupCountry, err := a.EthnicGroupCountries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ethnicGroupCountry {
		if v.CountryID == b.CountryID {
			bFound = true
		}
		if v.CountryID == c.CountryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CountrySlice{&a}
	if err = a.L.LoadEthnicGroupCountries(ctx, tx, false, (*[]*Country)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EthnicGroupCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EthnicGroupCountries = nil
	if err = a.L.LoadEthnicGroupCountries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EthnicGroupCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ethnicGroupCountry)
	}
}

func testCountryToManyPollsCountries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c PollsCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CountryID = a.CountryID
	c.CountryID = a.CountryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	pollsCountry, err := a.PollsCountries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range pollsCountry {
		if v.CountryID == b.CountryID {
			bFound = true
		}
		if v.CountryID == c.CountryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CountrySlice{&a}
	if err = a.L.LoadPollsCountries(ctx, tx, false, (*[]*Country)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PollsCountries = nil
	if err = a.L.LoadPollsCountries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PollsCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", pollsCountry)
	}
}

func testCountryToManyStates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c State

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CountryID = a.CountryID
	c.CountryID = a.CountryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	state, err := a.States().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range state {
		if v.CountryID == b.CountryID {
			bFound = true
		}
		if v.CountryID == c.CountryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CountrySlice{&a}
	if err = a.L.LoadStates(ctx, tx, false, (*[]*Country)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.States); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.States = nil
	if err = a.L.LoadStates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.States); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", state)
	}
}

func testCountryToManyAddOpEthnicGroupCountries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c, d, e EthnicGroupCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EthnicGroupCountry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ethnicGroupCountryDBTypes, false, strmangle.SetComplement(ethnicGroupCountryPrimaryKeyColumns, ethnicGroupCountryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EthnicGroupCountry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEthnicGroupCountries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CountryID != first.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, first.CountryID)
		}
		if a.CountryID != second.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EthnicGroupCountries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EthnicGroupCountries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EthnicGroupCountries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCountryToManyAddOpPollsCountries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c, d, e PollsCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PollsCountry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pollsCountryDBTypes, false, strmangle.SetComplement(pollsCountryPrimaryKeyColumns, pollsCountryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PollsCountry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPollsCountries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CountryID != first.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, first.CountryID)
		}
		if a.CountryID != second.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PollsCountries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PollsCountries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PollsCountries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCountryToManyAddOpStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c, d, e State

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*State{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*State{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CountryID != first.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, first.CountryID)
		}
		if a.CountryID != second.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.States[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.States[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.States().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCountryToOneContinentUsingContinent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Country
	var foreign Continent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, continentDBTypes, false, continentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Continent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContinentID = foreign.ContinentID2
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Continent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ContinentID2 != foreign.ContinentID2 {
		t.Errorf("want: %v, got %v", foreign.ContinentID2, check.ContinentID2)
	}

	slice := CountrySlice{&local}
	if err = local.L.LoadContinent(ctx, tx, false, (*[]*Country)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Continent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Continent = nil
	if err = local.L.LoadContinent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Continent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCountryToOneSetOpContinentUsingContinent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Country
	var b, c Continent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Continent{&b, &c} {
		err = a.SetContinent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Continent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Countries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContinentID != x.ContinentID2 {
			t.Error("foreign key was wrong value", a.ContinentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ContinentID))
		reflect.Indirect(reflect.ValueOf(&a.ContinentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ContinentID != x.ContinentID2 {
			t.Error("foreign key was wrong value", a.ContinentID, x.ContinentID2)
		}
	}
}

func testCountriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCountriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CountrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCountriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Countries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	countryDBTypes = map[string]string{`ContinentID`: `int8`, `CountryCode`: `varchar`, `CountryCode3`: `varchar`, `CountryFullName`: `varchar`, `CountryID`: `int8`, `CountryName`: `varchar`, `CreatedDate`: `timestamptz`, `ExpiredDate`: `timestamptz`}
	_              = bytes.MinRead
)

func testCountriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(countryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(countryColumns) == len(countryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, countryDBTypes, true, countryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCountriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(countryColumns) == len(countryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Country{}
	if err = randomize.Struct(seed, o, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, countryDBTypes, true, countryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(countryColumns, countryPrimaryKeyColumns) {
		fields = countryColumns
	} else {
		fields = strmangle.SetComplement(
			countryColumns,
			countryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CountrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCountriesUpsert(t *testing.T) {
	t.Parallel()

	if len(countryColumns) == len(countryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Country{}
	if err = randomize.Struct(seed, &o, countryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Country: %s", err)
	}

	count, err := Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, countryDBTypes, false, countryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Country: %s", err)
	}

	count, err = Countries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
