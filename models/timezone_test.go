// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTimezones(t *testing.T) {
	t.Parallel()

	query := Timezones()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTimezonesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimezonesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Timezones().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimezonesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimezoneSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimezonesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TimezoneExists(ctx, tx, o.TimezoneID)
	if err != nil {
		t.Errorf("Unable to check if Timezone exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TimezoneExists to return true, but got false.")
	}
}

func testTimezonesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	timezoneFound, err := FindTimezone(ctx, tx, o.TimezoneID)
	if err != nil {
		t.Error(err)
	}

	if timezoneFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTimezonesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Timezones().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTimezonesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Timezones().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTimezonesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timezoneOne := &Timezone{}
	timezoneTwo := &Timezone{}
	if err = randomize.Struct(seed, timezoneOne, timezoneDBTypes, false, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}
	if err = randomize.Struct(seed, timezoneTwo, timezoneDBTypes, false, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timezoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timezoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Timezones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTimezonesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	timezoneOne := &Timezone{}
	timezoneTwo := &Timezone{}
	if err = randomize.Struct(seed, timezoneOne, timezoneDBTypes, false, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}
	if err = randomize.Struct(seed, timezoneTwo, timezoneDBTypes, false, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timezoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timezoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func timezoneBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func timezoneAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Timezone) error {
	*o = Timezone{}
	return nil
}

func testTimezonesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Timezone{}
	o := &Timezone{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, timezoneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Timezone object: %s", err)
	}

	AddTimezoneHook(boil.BeforeInsertHook, timezoneBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	timezoneBeforeInsertHooks = []TimezoneHook{}

	AddTimezoneHook(boil.AfterInsertHook, timezoneAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	timezoneAfterInsertHooks = []TimezoneHook{}

	AddTimezoneHook(boil.AfterSelectHook, timezoneAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	timezoneAfterSelectHooks = []TimezoneHook{}

	AddTimezoneHook(boil.BeforeUpdateHook, timezoneBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	timezoneBeforeUpdateHooks = []TimezoneHook{}

	AddTimezoneHook(boil.AfterUpdateHook, timezoneAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	timezoneAfterUpdateHooks = []TimezoneHook{}

	AddTimezoneHook(boil.BeforeDeleteHook, timezoneBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	timezoneBeforeDeleteHooks = []TimezoneHook{}

	AddTimezoneHook(boil.AfterDeleteHook, timezoneAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	timezoneAfterDeleteHooks = []TimezoneHook{}

	AddTimezoneHook(boil.BeforeUpsertHook, timezoneBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	timezoneBeforeUpsertHooks = []TimezoneHook{}

	AddTimezoneHook(boil.AfterUpsertHook, timezoneAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	timezoneAfterUpsertHooks = []TimezoneHook{}
}

func testTimezonesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimezonesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(timezoneColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimezoneToManyStates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Timezone
	var b, c State

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stateDBTypes, false, stateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TimezoneID = a.TimezoneID
	c.TimezoneID = a.TimezoneID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	state, err := a.States().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range state {
		if v.TimezoneID == b.TimezoneID {
			bFound = true
		}
		if v.TimezoneID == c.TimezoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TimezoneSlice{&a}
	if err = a.L.LoadStates(ctx, tx, false, (*[]*Timezone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.States); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.States = nil
	if err = a.L.LoadStates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.States); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", state)
	}
}

func testTimezoneToManyAddOpStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Timezone
	var b, c, d, e State

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timezoneDBTypes, false, strmangle.SetComplement(timezonePrimaryKeyColumns, timezoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*State{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stateDBTypes, false, strmangle.SetComplement(statePrimaryKeyColumns, stateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*State{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TimezoneID != first.TimezoneID {
			t.Error("foreign key was wrong value", a.TimezoneID, first.TimezoneID)
		}
		if a.TimezoneID != second.TimezoneID {
			t.Error("foreign key was wrong value", a.TimezoneID, second.TimezoneID)
		}

		if first.R.Timezone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Timezone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.States[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.States[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.States().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTimezonesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimezonesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimezoneSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimezonesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Timezones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	timezoneDBTypes = map[string]string{`TimezoneID`: `int8`, `TimezoneName`: `varchar`, `TimezoneOffset`: `int2`}
	_               = bytes.MinRead
)

func testTimezonesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(timezonePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(timezoneColumns) == len(timezonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTimezonesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(timezoneColumns) == len(timezonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Timezone{}
	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timezoneDBTypes, true, timezonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(timezoneColumns, timezonePrimaryKeyColumns) {
		fields = timezoneColumns
	} else {
		fields = strmangle.SetComplement(
			timezoneColumns,
			timezonePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TimezoneSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTimezonesUpsert(t *testing.T) {
	t.Parallel()

	if len(timezoneColumns) == len(timezonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Timezone{}
	if err = randomize.Struct(seed, &o, timezoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Timezone: %s", err)
	}

	count, err := Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, timezoneDBTypes, false, timezonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timezone struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Timezone: %s", err)
	}

	count, err = Timezones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
