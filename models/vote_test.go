// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVotes(t *testing.T) {
	t.Parallel()

	query := Votes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVotesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Votes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoteExists(ctx, tx, o.VoteID)
	if err != nil {
		t.Errorf("Unable to check if Vote exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoteExists to return true, but got false.")
	}
}

func testVotesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voteFound, err := FindVote(ctx, tx, o.VoteID)
	if err != nil {
		t.Error(err)
	}

	if voteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVotesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Votes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVotesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Votes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVotesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voteOne := &Vote{}
	voteTwo := &Vote{}
	if err = randomize.Struct(seed, voteOne, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err = randomize.Struct(seed, voteTwo, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Votes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVotesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voteOne := &Vote{}
	voteTwo := &Vote{}
	if err = randomize.Struct(seed, voteOne, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err = randomize.Struct(seed, voteTwo, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func voteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vote) error {
	*o = Vote{}
	return nil
}

func testVotesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Vote{}
	o := &Vote{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Vote object: %s", err)
	}

	AddVoteHook(boil.BeforeInsertHook, voteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voteBeforeInsertHooks = []VoteHook{}

	AddVoteHook(boil.AfterInsertHook, voteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voteAfterInsertHooks = []VoteHook{}

	AddVoteHook(boil.AfterSelectHook, voteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voteAfterSelectHooks = []VoteHook{}

	AddVoteHook(boil.BeforeUpdateHook, voteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voteBeforeUpdateHooks = []VoteHook{}

	AddVoteHook(boil.AfterUpdateHook, voteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voteAfterUpdateHooks = []VoteHook{}

	AddVoteHook(boil.BeforeDeleteHook, voteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voteBeforeDeleteHooks = []VoteHook{}

	AddVoteHook(boil.AfterDeleteHook, voteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voteAfterDeleteHooks = []VoteHook{}

	AddVoteHook(boil.BeforeUpsertHook, voteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voteBeforeUpsertHooks = []VoteHook{}

	AddVoteHook(boil.AfterUpsertHook, voteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voteAfterUpsertHooks = []VoteHook{}
}

func testVotesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVotesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoteToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Vote
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := VoteSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*Vote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Vote
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.ParentPollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ParentPollID != foreign.ParentPollID {
		t.Errorf("want: %v, got %v", foreign.ParentPollID, check.ParentPollID)
	}

	slice := VoteSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*Vote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteToOnePollsFactorsPositionUsingZPollFactorPosition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Vote
	var foreign PollsFactorsPosition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ZPollFactorPositionID = foreign.PollFactorPositionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ZPollFactorPosition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollFactorPositionID != foreign.PollFactorPositionID {
		t.Errorf("want: %v, got %v", foreign.PollFactorPositionID, check.PollFactorPositionID)
	}

	slice := VoteSlice{&local}
	if err = local.L.LoadZPollFactorPosition(ctx, tx, false, (*[]*Vote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ZPollFactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ZPollFactorPosition = nil
	if err = local.L.LoadZPollFactorPosition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ZPollFactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteToOnePollsFactorsPositionUsingYPollFactorPosition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Vote
	var foreign PollsFactorsPosition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.YPollFactorPositionID = foreign.PollFactorPositionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.YPollFactorPosition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollFactorPositionID != foreign.PollFactorPositionID {
		t.Errorf("want: %v, got %v", foreign.PollFactorPositionID, check.PollFactorPositionID)
	}

	slice := VoteSlice{&local}
	if err = local.L.LoadYPollFactorPosition(ctx, tx, false, (*[]*Vote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.YPollFactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.YPollFactorPosition = nil
	if err = local.L.LoadYPollFactorPosition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.YPollFactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteToOnePollsFactorsPositionUsingXPollFactorPosition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Vote
	var foreign PollsFactorsPosition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteDBTypes, false, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollsFactorsPositionDBTypes, false, pollsFactorsPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsFactorsPosition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.XPollFactorPositionID = foreign.PollFactorPositionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.XPollFactorPosition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollFactorPositionID != foreign.PollFactorPositionID {
		t.Errorf("want: %v, got %v", foreign.PollFactorPositionID, check.PollFactorPositionID)
	}

	slice := VoteSlice{&local}
	if err = local.L.LoadXPollFactorPosition(ctx, tx, false, (*[]*Vote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.XPollFactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.XPollFactorPosition = nil
	if err = local.L.LoadXPollFactorPosition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.XPollFactorPosition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vote
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Votes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testVoteToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vote
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Votes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.ParentPollID {
			t.Error("foreign key was wrong value", a.PollID, x.ParentPollID)
		}
	}
}
func testVoteToOneSetOpPollsFactorsPositionUsingZPollFactorPosition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vote
	var b, c PollsFactorsPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PollsFactorsPosition{&b, &c} {
		err = a.SetZPollFactorPosition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ZPollFactorPosition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ZPollFactorPositionVotes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ZPollFactorPositionID != x.PollFactorPositionID {
			t.Error("foreign key was wrong value", a.ZPollFactorPositionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ZPollFactorPositionID))
		reflect.Indirect(reflect.ValueOf(&a.ZPollFactorPositionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ZPollFactorPositionID != x.PollFactorPositionID {
			t.Error("foreign key was wrong value", a.ZPollFactorPositionID, x.PollFactorPositionID)
		}
	}
}
func testVoteToOneSetOpPollsFactorsPositionUsingYPollFactorPosition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vote
	var b, c PollsFactorsPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PollsFactorsPosition{&b, &c} {
		err = a.SetYPollFactorPosition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.YPollFactorPosition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.YPollFactorPositionVotes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.YPollFactorPositionID != x.PollFactorPositionID {
			t.Error("foreign key was wrong value", a.YPollFactorPositionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.YPollFactorPositionID))
		reflect.Indirect(reflect.ValueOf(&a.YPollFactorPositionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.YPollFactorPositionID != x.PollFactorPositionID {
			t.Error("foreign key was wrong value", a.YPollFactorPositionID, x.PollFactorPositionID)
		}
	}
}
func testVoteToOneSetOpPollsFactorsPositionUsingXPollFactorPosition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vote
	var b, c PollsFactorsPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteDBTypes, false, strmangle.SetComplement(votePrimaryKeyColumns, voteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollsFactorsPositionDBTypes, false, strmangle.SetComplement(pollsFactorsPositionPrimaryKeyColumns, pollsFactorsPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PollsFactorsPosition{&b, &c} {
		err = a.SetXPollFactorPosition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.XPollFactorPosition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.XPollFactorPositionVotes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.XPollFactorPositionID != x.PollFactorPositionID {
			t.Error("foreign key was wrong value", a.XPollFactorPositionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.XPollFactorPositionID))
		reflect.Indirect(reflect.ValueOf(&a.XPollFactorPositionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.XPollFactorPositionID != x.PollFactorPositionID {
			t.Error("foreign key was wrong value", a.XPollFactorPositionID, x.PollFactorPositionID)
		}
	}
}

func testVotesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVotesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVotesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Votes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voteDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `PollID`: `int8`, `UserAccountID`: `int8`, `VoteID`: `int8`, `XPollFactorPositionID`: `int8`, `XShare`: `int2`, `YPollFactorPositionID`: `int8`, `YShare`: `int2`, `ZPollFactorPositionID`: `int8`, `ZShare`: `int2`}
	_           = bytes.MinRead
)

func testVotesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voteColumns) == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voteDBTypes, true, votePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVotesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voteColumns) == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vote{}
	if err = randomize.Struct(seed, o, voteDBTypes, true, voteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voteDBTypes, true, votePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voteColumns, votePrimaryKeyColumns) {
		fields = voteColumns
	} else {
		fields = strmangle.SetComplement(
			voteColumns,
			votePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVotesUpsert(t *testing.T) {
	t.Parallel()

	if len(voteColumns) == len(votePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Vote{}
	if err = randomize.Struct(seed, &o, voteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Vote: %s", err)
	}

	count, err := Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voteDBTypes, false, votePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vote struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Vote: %s", err)
	}

	count, err = Votes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
