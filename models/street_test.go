// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStreets(t *testing.T) {
	t.Parallel()

	query := Streets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStreetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Streets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StreetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StreetExists(ctx, tx, o.StreetID)
	if err != nil {
		t.Errorf("Unable to check if Street exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StreetExists to return true, but got false.")
	}
}

func testStreetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	streetFound, err := FindStreet(ctx, tx, o.StreetID)
	if err != nil {
		t.Error(err)
	}

	if streetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStreetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Streets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStreetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Streets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStreetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	streetOne := &Street{}
	streetTwo := &Street{}
	if err = randomize.Struct(seed, streetOne, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}
	if err = randomize.Struct(seed, streetTwo, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = streetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = streetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Streets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStreetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	streetOne := &Street{}
	streetTwo := &Street{}
	if err = randomize.Struct(seed, streetOne, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}
	if err = randomize.Struct(seed, streetTwo, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = streetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = streetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func streetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func streetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Street) error {
	*o = Street{}
	return nil
}

func testStreetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Street{}
	o := &Street{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, streetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Street object: %s", err)
	}

	AddStreetHook(boil.BeforeInsertHook, streetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	streetBeforeInsertHooks = []StreetHook{}

	AddStreetHook(boil.AfterInsertHook, streetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	streetAfterInsertHooks = []StreetHook{}

	AddStreetHook(boil.AfterSelectHook, streetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	streetAfterSelectHooks = []StreetHook{}

	AddStreetHook(boil.BeforeUpdateHook, streetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	streetBeforeUpdateHooks = []StreetHook{}

	AddStreetHook(boil.AfterUpdateHook, streetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	streetAfterUpdateHooks = []StreetHook{}

	AddStreetHook(boil.BeforeDeleteHook, streetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	streetBeforeDeleteHooks = []StreetHook{}

	AddStreetHook(boil.AfterDeleteHook, streetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	streetAfterDeleteHooks = []StreetHook{}

	AddStreetHook(boil.BeforeUpsertHook, streetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	streetBeforeUpsertHooks = []StreetHook{}

	AddStreetHook(boil.AfterUpsertHook, streetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	streetAfterUpsertHooks = []StreetHook{}
}

func testStreetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStreetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(streetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStreetToManyAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Street
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StreetID = a.StreetID
	c.StreetID = a.StreetID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	address, err := a.Addresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range address {
		if v.StreetID == b.StreetID {
			bFound = true
		}
		if v.StreetID == c.StreetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StreetSlice{&a}
	if err = a.L.LoadAddresses(ctx, tx, false, (*[]*Street)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Addresses = nil
	if err = a.L.LoadAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", address)
	}
}

func testStreetToManyAddOpAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Street
	var b, c, d, e Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetDBTypes, false, strmangle.SetComplement(streetPrimaryKeyColumns, streetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Address{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Address{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.StreetID != first.StreetID {
			t.Error("foreign key was wrong value", a.StreetID, first.StreetID)
		}
		if a.StreetID != second.StreetID {
			t.Error("foreign key was wrong value", a.StreetID, second.StreetID)
		}

		if first.R.Street != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Street != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Addresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Addresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Addresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStreetToOneSuburbUsingSuburb(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Street
	var foreign Suburb

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, suburbDBTypes, false, suburbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suburb struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SuburbID = foreign.SuburbID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Suburb().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.SuburbID != foreign.SuburbID {
		t.Errorf("want: %v, got %v", foreign.SuburbID, check.SuburbID)
	}

	slice := StreetSlice{&local}
	if err = local.L.LoadSuburb(ctx, tx, false, (*[]*Street)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Suburb == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Suburb = nil
	if err = local.L.LoadSuburb(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Suburb == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStreetToOneStreetTypeUsingStreetType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Street
	var foreign StreetType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, streetTypeDBTypes, false, streetTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StreetTypeID = foreign.StreetTypeID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StreetType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.StreetTypeID != foreign.StreetTypeID {
		t.Errorf("want: %v, got %v", foreign.StreetTypeID, check.StreetTypeID)
	}

	slice := StreetSlice{&local}
	if err = local.L.LoadStreetType(ctx, tx, false, (*[]*Street)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StreetType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StreetType = nil
	if err = local.L.LoadStreetType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StreetType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStreetToOneStreetNameUsingStreetName(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Street
	var foreign StreetName

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, streetDBTypes, false, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, streetNameDBTypes, false, streetNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StreetName struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StreetNameID = foreign.StreetNameID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StreetName().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.StreetNameID != foreign.StreetNameID {
		t.Errorf("want: %v, got %v", foreign.StreetNameID, check.StreetNameID)
	}

	slice := StreetSlice{&local}
	if err = local.L.LoadStreetName(ctx, tx, false, (*[]*Street)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StreetName == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StreetName = nil
	if err = local.L.LoadStreetName(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StreetName == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStreetToOneSetOpSuburbUsingSuburb(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Street
	var b, c Suburb

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetDBTypes, false, strmangle.SetComplement(streetPrimaryKeyColumns, streetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, suburbDBTypes, false, strmangle.SetComplement(suburbPrimaryKeyColumns, suburbColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, suburbDBTypes, false, strmangle.SetComplement(suburbPrimaryKeyColumns, suburbColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Suburb{&b, &c} {
		err = a.SetSuburb(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Suburb != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Streets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SuburbID != x.SuburbID {
			t.Error("foreign key was wrong value", a.SuburbID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SuburbID))
		reflect.Indirect(reflect.ValueOf(&a.SuburbID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SuburbID != x.SuburbID {
			t.Error("foreign key was wrong value", a.SuburbID, x.SuburbID)
		}
	}
}
func testStreetToOneSetOpStreetTypeUsingStreetType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Street
	var b, c StreetType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetDBTypes, false, strmangle.SetComplement(streetPrimaryKeyColumns, streetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, streetTypeDBTypes, false, strmangle.SetComplement(streetTypePrimaryKeyColumns, streetTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, streetTypeDBTypes, false, strmangle.SetComplement(streetTypePrimaryKeyColumns, streetTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StreetType{&b, &c} {
		err = a.SetStreetType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StreetType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Streets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StreetTypeID != x.StreetTypeID {
			t.Error("foreign key was wrong value", a.StreetTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StreetTypeID))
		reflect.Indirect(reflect.ValueOf(&a.StreetTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StreetTypeID != x.StreetTypeID {
			t.Error("foreign key was wrong value", a.StreetTypeID, x.StreetTypeID)
		}
	}
}
func testStreetToOneSetOpStreetNameUsingStreetName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Street
	var b, c StreetName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streetDBTypes, false, strmangle.SetComplement(streetPrimaryKeyColumns, streetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, streetNameDBTypes, false, strmangle.SetComplement(streetNamePrimaryKeyColumns, streetNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, streetNameDBTypes, false, strmangle.SetComplement(streetNamePrimaryKeyColumns, streetNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StreetName{&b, &c} {
		err = a.SetStreetName(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StreetName != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Streets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StreetNameID != x.StreetNameID {
			t.Error("foreign key was wrong value", a.StreetNameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StreetNameID))
		reflect.Indirect(reflect.ValueOf(&a.StreetNameID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StreetNameID != x.StreetNameID {
			t.Error("foreign key was wrong value", a.StreetNameID, x.StreetNameID)
		}
	}
}

func testStreetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStreetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StreetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStreetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Streets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	streetDBTypes = map[string]string{`StreetID`: `int8`, `StreetNameID`: `int8`, `StreetTypeID`: `int8`, `SuburbID`: `int8`}
	_             = bytes.MinRead
)

func testStreetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(streetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(streetColumns) == len(streetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, streetDBTypes, true, streetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStreetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(streetColumns) == len(streetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Street{}
	if err = randomize.Struct(seed, o, streetDBTypes, true, streetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, streetDBTypes, true, streetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(streetColumns, streetPrimaryKeyColumns) {
		fields = streetColumns
	} else {
		fields = strmangle.SetComplement(
			streetColumns,
			streetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StreetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStreetsUpsert(t *testing.T) {
	t.Parallel()

	if len(streetColumns) == len(streetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Street{}
	if err = randomize.Struct(seed, &o, streetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Street: %s", err)
	}

	count, err := Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, streetDBTypes, false, streetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Street struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Street: %s", err)
	}

	count, err = Streets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
