// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Factor is an object representing the database table.
type Factor struct {
	FactorID          int64       `boil:"factor_id" json:"factor_id" toml:"factor_id" yaml:"factor_id"`
	ParentFactorID    null.Int64  `boil:"parent_factor_id" json:"parent_factor_id,omitempty" toml:"parent_factor_id" yaml:"parent_factor_id,omitempty"`
	UserAccountID     int64       `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	FactorName        string      `boil:"factor_name" json:"factor_name" toml:"factor_name" yaml:"factor_name"`
	FactorDescription null.String `boil:"factor_description" json:"factor_description,omitempty" toml:"factor_description" yaml:"factor_description,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *factorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L factorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactorColumns = struct {
	FactorID          string
	ParentFactorID    string
	UserAccountID     string
	FactorName        string
	FactorDescription string
	CreatedAt         string
}{
	FactorID:          "factor_id",
	ParentFactorID:    "parent_factor_id",
	UserAccountID:     "user_account_id",
	FactorName:        "factor_name",
	FactorDescription: "factor_description",
	CreatedAt:         "created_at",
}

// FactorRels is where relationship names are stored.
var FactorRels = struct {
	UserAccount         string
	ParentFactor        string
	FactorPositions     string
	ParentFactorFactors string
	FactorsLinks        string
}{
	UserAccount:         "UserAccount",
	ParentFactor:        "ParentFactor",
	FactorPositions:     "FactorPositions",
	ParentFactorFactors: "ParentFactorFactors",
	FactorsLinks:        "FactorsLinks",
}

// factorR is where relationships are stored.
type factorR struct {
	UserAccount         *UserAccount
	ParentFactor        *Factor
	FactorPositions     FactorPositionSlice
	ParentFactorFactors FactorSlice
	FactorsLinks        FactorsLinkSlice
}

// NewStruct creates a new relationship struct
func (*factorR) NewStruct() *factorR {
	return &factorR{}
}

// factorL is where Load methods for each relationship are stored.
type factorL struct{}

var (
	factorColumns               = []string{"factor_id", "parent_factor_id", "user_account_id", "factor_name", "factor_description", "created_at"}
	factorColumnsWithoutDefault = []string{"factor_id", "parent_factor_id", "user_account_id", "factor_name", "factor_description", "created_at"}
	factorColumnsWithDefault    = []string{}
	factorPrimaryKeyColumns     = []string{"factor_id"}
)

type (
	// FactorSlice is an alias for a slice of pointers to Factor.
	// This should generally be used opposed to []Factor.
	FactorSlice []*Factor
	// FactorHook is the signature for custom Factor hook methods
	FactorHook func(context.Context, boil.ContextExecutor, *Factor) error

	factorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factorType                 = reflect.TypeOf(&Factor{})
	factorMapping              = queries.MakeStructMapping(factorType)
	factorPrimaryKeyMapping, _ = queries.BindMapping(factorType, factorMapping, factorPrimaryKeyColumns)
	factorInsertCacheMut       sync.RWMutex
	factorInsertCache          = make(map[string]insertCache)
	factorUpdateCacheMut       sync.RWMutex
	factorUpdateCache          = make(map[string]updateCache)
	factorUpsertCacheMut       sync.RWMutex
	factorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var factorBeforeInsertHooks []FactorHook
var factorBeforeUpdateHooks []FactorHook
var factorBeforeDeleteHooks []FactorHook
var factorBeforeUpsertHooks []FactorHook

var factorAfterInsertHooks []FactorHook
var factorAfterSelectHooks []FactorHook
var factorAfterUpdateHooks []FactorHook
var factorAfterDeleteHooks []FactorHook
var factorAfterUpsertHooks []FactorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Factor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Factor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Factor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Factor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Factor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Factor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Factor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Factor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Factor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactorHook registers your hook function for all future operations.
func AddFactorHook(hookPoint boil.HookPoint, factorHook FactorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		factorBeforeInsertHooks = append(factorBeforeInsertHooks, factorHook)
	case boil.BeforeUpdateHook:
		factorBeforeUpdateHooks = append(factorBeforeUpdateHooks, factorHook)
	case boil.BeforeDeleteHook:
		factorBeforeDeleteHooks = append(factorBeforeDeleteHooks, factorHook)
	case boil.BeforeUpsertHook:
		factorBeforeUpsertHooks = append(factorBeforeUpsertHooks, factorHook)
	case boil.AfterInsertHook:
		factorAfterInsertHooks = append(factorAfterInsertHooks, factorHook)
	case boil.AfterSelectHook:
		factorAfterSelectHooks = append(factorAfterSelectHooks, factorHook)
	case boil.AfterUpdateHook:
		factorAfterUpdateHooks = append(factorAfterUpdateHooks, factorHook)
	case boil.AfterDeleteHook:
		factorAfterDeleteHooks = append(factorAfterDeleteHooks, factorHook)
	case boil.AfterUpsertHook:
		factorAfterUpsertHooks = append(factorAfterUpsertHooks, factorHook)
	}
}

// One returns a single factor record from the query.
func (q factorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Factor, error) {
	o := &Factor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for factors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Factor records from the query.
func (q factorQuery) All(ctx context.Context, exec boil.ContextExecutor) (FactorSlice, error) {
	var o []*Factor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Factor slice")
	}

	if len(factorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Factor records in the query.
func (q factorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count factors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if factors exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *Factor) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// ParentFactor pointed to by the foreign key.
func (o *Factor) ParentFactor(mods ...qm.QueryMod) factorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("factor_id=?", o.ParentFactorID),
	}

	queryMods = append(queryMods, mods...)

	query := Factors(queryMods...)
	queries.SetFrom(query.Query, "\"factors\"")

	return query
}

// FactorPositions retrieves all the factor_position's FactorPositions with an executor.
func (o *Factor) FactorPositions(mods ...qm.QueryMod) factorPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"factor_positions\".\"factor_id\"=?", o.FactorID),
	)

	query := FactorPositions(queryMods...)
	queries.SetFrom(query.Query, "\"factor_positions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"factor_positions\".*"})
	}

	return query
}

// ParentFactorFactors retrieves all the factor's Factors with an executor via parent_factor_id column.
func (o *Factor) ParentFactorFactors(mods ...qm.QueryMod) factorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"factors\".\"parent_factor_id\"=?", o.FactorID),
	)

	query := Factors(queryMods...)
	queries.SetFrom(query.Query, "\"factors\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"factors\".*"})
	}

	return query
}

// FactorsLinks retrieves all the factors_link's FactorsLinks with an executor.
func (o *Factor) FactorsLinks(mods ...qm.QueryMod) factorsLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"factors_links\".\"factors_id\"=?", o.FactorID),
	)

	query := FactorsLinks(queryMods...)
	queries.SetFrom(query.Query, "\"factors_links\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"factors_links\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factorL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactor interface{}, mods queries.Applicator) error {
	var slice []*Factor
	var object *Factor

	if singular {
		object = maybeFactor.(*Factor)
	} else {
		slice = *maybeFactor.(*[]*Factor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(factorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Factors = append(foreign.R.Factors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Factors = append(foreign.R.Factors, local)
				break
			}
		}
	}

	return nil
}

// LoadParentFactor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factorL) LoadParentFactor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactor interface{}, mods queries.Applicator) error {
	var slice []*Factor
	var object *Factor

	if singular {
		object = maybeFactor.(*Factor)
	} else {
		slice = *maybeFactor.(*[]*Factor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorR{}
		}
		args = append(args, object.ParentFactorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentFactorID) {
					continue Outer
				}
			}

			args = append(args, obj.ParentFactorID)
		}
	}

	query := NewQuery(qm.From(`factors`), qm.WhereIn(`factor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Factor")
	}

	var resultSlice []*Factor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Factor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factors")
	}

	if len(factorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentFactor = foreign
		if foreign.R == nil {
			foreign.R = &factorR{}
		}
		foreign.R.ParentFactorFactors = append(foreign.R.ParentFactorFactors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentFactorID, foreign.FactorID) {
				local.R.ParentFactor = foreign
				if foreign.R == nil {
					foreign.R = &factorR{}
				}
				foreign.R.ParentFactorFactors = append(foreign.R.ParentFactorFactors, local)
				break
			}
		}
	}

	return nil
}

// LoadFactorPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factorL) LoadFactorPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactor interface{}, mods queries.Applicator) error {
	var slice []*Factor
	var object *Factor

	if singular {
		object = maybeFactor.(*Factor)
	} else {
		slice = *maybeFactor.(*[]*Factor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorR{}
		}
		args = append(args, object.FactorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorR{}
			}

			for _, a := range args {
				if a == obj.FactorID {
					continue Outer
				}
			}

			args = append(args, obj.FactorID)
		}
	}

	query := NewQuery(qm.From(`factor_positions`), qm.WhereIn(`factor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load factor_positions")
	}

	var resultSlice []*FactorPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice factor_positions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on factor_positions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factor_positions")
	}

	if len(factorPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FactorPositions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &factorPositionR{}
			}
			foreign.R.Factor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FactorID == foreign.FactorID {
				local.R.FactorPositions = append(local.R.FactorPositions, foreign)
				if foreign.R == nil {
					foreign.R = &factorPositionR{}
				}
				foreign.R.Factor = local
				break
			}
		}
	}

	return nil
}

// LoadParentFactorFactors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factorL) LoadParentFactorFactors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactor interface{}, mods queries.Applicator) error {
	var slice []*Factor
	var object *Factor

	if singular {
		object = maybeFactor.(*Factor)
	} else {
		slice = *maybeFactor.(*[]*Factor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorR{}
		}
		args = append(args, object.FactorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FactorID) {
					continue Outer
				}
			}

			args = append(args, obj.FactorID)
		}
	}

	query := NewQuery(qm.From(`factors`), qm.WhereIn(`parent_factor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load factors")
	}

	var resultSlice []*Factor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice factors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on factors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factors")
	}

	if len(factorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentFactorFactors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &factorR{}
			}
			foreign.R.ParentFactor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.FactorID, foreign.ParentFactorID) {
				local.R.ParentFactorFactors = append(local.R.ParentFactorFactors, foreign)
				if foreign.R == nil {
					foreign.R = &factorR{}
				}
				foreign.R.ParentFactor = local
				break
			}
		}
	}

	return nil
}

// LoadFactorsLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factorL) LoadFactorsLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactor interface{}, mods queries.Applicator) error {
	var slice []*Factor
	var object *Factor

	if singular {
		object = maybeFactor.(*Factor)
	} else {
		slice = *maybeFactor.(*[]*Factor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorR{}
		}
		args = append(args, object.FactorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorR{}
			}

			for _, a := range args {
				if a == obj.FactorID {
					continue Outer
				}
			}

			args = append(args, obj.FactorID)
		}
	}

	query := NewQuery(qm.From(`factors_links`), qm.WhereIn(`factors_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load factors_links")
	}

	var resultSlice []*FactorsLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice factors_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on factors_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factors_links")
	}

	if len(factorsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FactorsLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &factorsLinkR{}
			}
			foreign.R.Factor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FactorID == foreign.FactorsID {
				local.R.FactorsLinks = append(local.R.FactorsLinks, foreign)
				if foreign.R == nil {
					foreign.R = &factorsLinkR{}
				}
				foreign.R.Factor = local
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the factor to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Factors.
func (o *Factor) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, factorPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.FactorID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &factorR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Factors: FactorSlice{o},
		}
	} else {
		related.R.Factors = append(related.R.Factors, o)
	}

	return nil
}

// SetParentFactor of the factor to the related item.
// Sets o.R.ParentFactor to related.
// Adds o to related.R.ParentFactorFactors.
func (o *Factor) SetParentFactor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Factor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_factor_id"}),
		strmangle.WhereClause("\"", "\"", 2, factorPrimaryKeyColumns),
	)
	values := []interface{}{related.FactorID, o.FactorID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentFactorID, related.FactorID)
	if o.R == nil {
		o.R = &factorR{
			ParentFactor: related,
		}
	} else {
		o.R.ParentFactor = related
	}

	if related.R == nil {
		related.R = &factorR{
			ParentFactorFactors: FactorSlice{o},
		}
	} else {
		related.R.ParentFactorFactors = append(related.R.ParentFactorFactors, o)
	}

	return nil
}

// RemoveParentFactor relationship.
// Sets o.R.ParentFactor to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Factor) RemoveParentFactor(ctx context.Context, exec boil.ContextExecutor, related *Factor) error {
	var err error

	queries.SetScanner(&o.ParentFactorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_factor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ParentFactor = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentFactorFactors {
		if queries.Equal(o.ParentFactorID, ri.ParentFactorID) {
			continue
		}

		ln := len(related.R.ParentFactorFactors)
		if ln > 1 && i < ln-1 {
			related.R.ParentFactorFactors[i] = related.R.ParentFactorFactors[ln-1]
		}
		related.R.ParentFactorFactors = related.R.ParentFactorFactors[:ln-1]
		break
	}
	return nil
}

// AddFactorPositions adds the given related objects to the existing relationships
// of the factor, optionally inserting them as new records.
// Appends related to o.R.FactorPositions.
// Sets related.R.Factor appropriately.
func (o *Factor) AddFactorPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FactorPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FactorID = o.FactorID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"factor_positions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"factor_id"}),
				strmangle.WhereClause("\"", "\"", 2, factorPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.FactorID, rel.FactorPositionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FactorID = o.FactorID
		}
	}

	if o.R == nil {
		o.R = &factorR{
			FactorPositions: related,
		}
	} else {
		o.R.FactorPositions = append(o.R.FactorPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &factorPositionR{
				Factor: o,
			}
		} else {
			rel.R.Factor = o
		}
	}
	return nil
}

// AddParentFactorFactors adds the given related objects to the existing relationships
// of the factor, optionally inserting them as new records.
// Appends related to o.R.ParentFactorFactors.
// Sets related.R.ParentFactor appropriately.
func (o *Factor) AddParentFactorFactors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Factor) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentFactorID, o.FactorID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"factors\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_factor_id"}),
				strmangle.WhereClause("\"", "\"", 2, factorPrimaryKeyColumns),
			)
			values := []interface{}{o.FactorID, rel.FactorID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentFactorID, o.FactorID)
		}
	}

	if o.R == nil {
		o.R = &factorR{
			ParentFactorFactors: related,
		}
	} else {
		o.R.ParentFactorFactors = append(o.R.ParentFactorFactors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &factorR{
				ParentFactor: o,
			}
		} else {
			rel.R.ParentFactor = o
		}
	}
	return nil
}

// SetParentFactorFactors removes all previously related items of the
// factor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentFactor's ParentFactorFactors accordingly.
// Replaces o.R.ParentFactorFactors with related.
// Sets related.R.ParentFactor's ParentFactorFactors accordingly.
func (o *Factor) SetParentFactorFactors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Factor) error {
	query := "update \"factors\" set \"parent_factor_id\" = null where \"parent_factor_id\" = $1"
	values := []interface{}{o.FactorID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentFactorFactors {
			queries.SetScanner(&rel.ParentFactorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentFactor = nil
		}

		o.R.ParentFactorFactors = nil
	}
	return o.AddParentFactorFactors(ctx, exec, insert, related...)
}

// RemoveParentFactorFactors relationships from objects passed in.
// Removes related items from R.ParentFactorFactors (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentFactor.
func (o *Factor) RemoveParentFactorFactors(ctx context.Context, exec boil.ContextExecutor, related ...*Factor) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentFactorID, nil)
		if rel.R != nil {
			rel.R.ParentFactor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_factor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentFactorFactors {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentFactorFactors)
			if ln > 1 && i < ln-1 {
				o.R.ParentFactorFactors[i] = o.R.ParentFactorFactors[ln-1]
			}
			o.R.ParentFactorFactors = o.R.ParentFactorFactors[:ln-1]
			break
		}
	}

	return nil
}

// AddFactorsLinks adds the given related objects to the existing relationships
// of the factor, optionally inserting them as new records.
// Appends related to o.R.FactorsLinks.
// Sets related.R.Factor appropriately.
func (o *Factor) AddFactorsLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FactorsLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FactorsID = o.FactorID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"factors_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"factors_id"}),
				strmangle.WhereClause("\"", "\"", 2, factorsLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.FactorID, rel.FactorsLinkID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FactorsID = o.FactorID
		}
	}

	if o.R == nil {
		o.R = &factorR{
			FactorsLinks: related,
		}
	} else {
		o.R.FactorsLinks = append(o.R.FactorsLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &factorsLinkR{
				Factor: o,
			}
		} else {
			rel.R.Factor = o
		}
	}
	return nil
}

// Factors retrieves all the records using an executor.
func Factors(mods ...qm.QueryMod) factorQuery {
	mods = append(mods, qm.From("\"factors\""))
	return factorQuery{NewQuery(mods...)}
}

// FindFactor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFactor(ctx context.Context, exec boil.ContextExecutor, factorID int64, selectCols ...string) (*Factor, error) {
	factorObj := &Factor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"factors\" where \"factor_id\"=$1", sel,
	)

	q := queries.Raw(query, factorID)

	err := q.Bind(ctx, exec, factorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from factors")
	}

	return factorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Factor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no factors provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factorInsertCacheMut.RLock()
	cache, cached := factorInsertCache[key]
	factorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factorColumns,
			factorColumnsWithDefault,
			factorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factorType, factorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factorType, factorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"factors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"factors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into factors")
	}

	if !cached {
		factorInsertCacheMut.Lock()
		factorInsertCache[key] = cache
		factorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Factor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Factor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factorUpdateCacheMut.RLock()
	cache, cached := factorUpdateCache[key]
	factorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factorColumns,
			factorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update factors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"factors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factorType, factorMapping, append(wl, factorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update factors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for factors")
	}

	if !cached {
		factorUpdateCacheMut.Lock()
		factorUpdateCache[key] = cache
		factorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for factors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for factors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"factors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in factor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all factor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Factor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no factors provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factorUpsertCacheMut.RLock()
	cache, cached := factorUpsertCache[key]
	factorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factorColumns,
			factorColumnsWithDefault,
			factorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			factorColumns,
			factorPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert factors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factorPrimaryKeyColumns))
			copy(conflict, factorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"factors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factorType, factorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factorType, factorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert factors")
	}

	if !cached {
		factorUpsertCacheMut.Lock()
		factorUpsertCache[key] = cache
		factorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Factor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Factor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Factor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factorPrimaryKeyMapping)
	sql := "DELETE FROM \"factors\" WHERE \"factor_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from factors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for factors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no factorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from factors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for factors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Factor slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(factorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"factors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from factor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for factors")
	}

	if len(factorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Factor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFactor(ctx, exec, o.FactorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"factors\".* FROM \"factors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FactorSlice")
	}

	*o = slice

	return nil
}

// FactorExists checks if the Factor row exists.
func FactorExists(ctx context.Context, exec boil.ContextExecutor, factorID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"factors\" where \"factor_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, factorID)
	}

	row := exec.QueryRowContext(ctx, sql, factorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if factors exists")
	}

	return exists, nil
}
