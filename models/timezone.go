// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Timezone is an object representing the database table.
type Timezone struct {
	TimezoneID     int64  `boil:"timezone_id" json:"timezone_id" toml:"timezone_id" yaml:"timezone_id"`
	TimezoneName   string `boil:"timezone_name" json:"timezone_name" toml:"timezone_name" yaml:"timezone_name"`
	TimezoneOffset int16  `boil:"timezone_offset" json:"timezone_offset" toml:"timezone_offset" yaml:"timezone_offset"`

	R *timezoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L timezoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TimezoneColumns = struct {
	TimezoneID     string
	TimezoneName   string
	TimezoneOffset string
}{
	TimezoneID:     "timezone_id",
	TimezoneName:   "timezone_name",
	TimezoneOffset: "timezone_offset",
}

// TimezoneRels is where relationship names are stored.
var TimezoneRels = struct {
	States string
}{
	States: "States",
}

// timezoneR is where relationships are stored.
type timezoneR struct {
	States StateSlice
}

// NewStruct creates a new relationship struct
func (*timezoneR) NewStruct() *timezoneR {
	return &timezoneR{}
}

// timezoneL is where Load methods for each relationship are stored.
type timezoneL struct{}

var (
	timezoneColumns               = []string{"timezone_id", "timezone_name", "timezone_offset"}
	timezoneColumnsWithoutDefault = []string{"timezone_id", "timezone_name", "timezone_offset"}
	timezoneColumnsWithDefault    = []string{}
	timezonePrimaryKeyColumns     = []string{"timezone_id"}
)

type (
	// TimezoneSlice is an alias for a slice of pointers to Timezone.
	// This should generally be used opposed to []Timezone.
	TimezoneSlice []*Timezone
	// TimezoneHook is the signature for custom Timezone hook methods
	TimezoneHook func(context.Context, boil.ContextExecutor, *Timezone) error

	timezoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	timezoneType                 = reflect.TypeOf(&Timezone{})
	timezoneMapping              = queries.MakeStructMapping(timezoneType)
	timezonePrimaryKeyMapping, _ = queries.BindMapping(timezoneType, timezoneMapping, timezonePrimaryKeyColumns)
	timezoneInsertCacheMut       sync.RWMutex
	timezoneInsertCache          = make(map[string]insertCache)
	timezoneUpdateCacheMut       sync.RWMutex
	timezoneUpdateCache          = make(map[string]updateCache)
	timezoneUpsertCacheMut       sync.RWMutex
	timezoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var timezoneBeforeInsertHooks []TimezoneHook
var timezoneBeforeUpdateHooks []TimezoneHook
var timezoneBeforeDeleteHooks []TimezoneHook
var timezoneBeforeUpsertHooks []TimezoneHook

var timezoneAfterInsertHooks []TimezoneHook
var timezoneAfterSelectHooks []TimezoneHook
var timezoneAfterUpdateHooks []TimezoneHook
var timezoneAfterDeleteHooks []TimezoneHook
var timezoneAfterUpsertHooks []TimezoneHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Timezone) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Timezone) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Timezone) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Timezone) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Timezone) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Timezone) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Timezone) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Timezone) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Timezone) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range timezoneAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTimezoneHook registers your hook function for all future operations.
func AddTimezoneHook(hookPoint boil.HookPoint, timezoneHook TimezoneHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		timezoneBeforeInsertHooks = append(timezoneBeforeInsertHooks, timezoneHook)
	case boil.BeforeUpdateHook:
		timezoneBeforeUpdateHooks = append(timezoneBeforeUpdateHooks, timezoneHook)
	case boil.BeforeDeleteHook:
		timezoneBeforeDeleteHooks = append(timezoneBeforeDeleteHooks, timezoneHook)
	case boil.BeforeUpsertHook:
		timezoneBeforeUpsertHooks = append(timezoneBeforeUpsertHooks, timezoneHook)
	case boil.AfterInsertHook:
		timezoneAfterInsertHooks = append(timezoneAfterInsertHooks, timezoneHook)
	case boil.AfterSelectHook:
		timezoneAfterSelectHooks = append(timezoneAfterSelectHooks, timezoneHook)
	case boil.AfterUpdateHook:
		timezoneAfterUpdateHooks = append(timezoneAfterUpdateHooks, timezoneHook)
	case boil.AfterDeleteHook:
		timezoneAfterDeleteHooks = append(timezoneAfterDeleteHooks, timezoneHook)
	case boil.AfterUpsertHook:
		timezoneAfterUpsertHooks = append(timezoneAfterUpsertHooks, timezoneHook)
	}
}

// OneG returns a single timezone record from the query using the global executor.
func (q timezoneQuery) OneG(ctx context.Context) (*Timezone, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single timezone record from the query.
func (q timezoneQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Timezone, error) {
	o := &Timezone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for timezone")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Timezone records from the query using the global executor.
func (q timezoneQuery) AllG(ctx context.Context) (TimezoneSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Timezone records from the query.
func (q timezoneQuery) All(ctx context.Context, exec boil.ContextExecutor) (TimezoneSlice, error) {
	var o []*Timezone

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Timezone slice")
	}

	if len(timezoneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Timezone records in the query, and panics on error.
func (q timezoneQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Timezone records in the query.
func (q timezoneQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count timezone rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q timezoneQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q timezoneQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if timezone exists")
	}

	return count > 0, nil
}

// States retrieves all the state's States with an executor.
func (o *Timezone) States(mods ...qm.QueryMod) stateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"state\".\"timezone_id\"=?", o.TimezoneID),
	)

	query := States(queryMods...)
	queries.SetFrom(query.Query, "\"state\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"state\".*"})
	}

	return query
}

// LoadStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (timezoneL) LoadStates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTimezone interface{}, mods queries.Applicator) error {
	var slice []*Timezone
	var object *Timezone

	if singular {
		object = maybeTimezone.(*Timezone)
	} else {
		slice = *maybeTimezone.(*[]*Timezone)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &timezoneR{}
		}
		args = append(args, object.TimezoneID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &timezoneR{}
			}

			for _, a := range args {
				if a == obj.TimezoneID {
					continue Outer
				}
			}

			args = append(args, obj.TimezoneID)
		}
	}

	query := NewQuery(qm.From(`state`), qm.WhereIn(`timezone_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load state")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice state")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(stateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.States = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stateR{}
			}
			foreign.R.Timezone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TimezoneID == foreign.TimezoneID {
				local.R.States = append(local.R.States, foreign)
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.Timezone = local
				break
			}
		}
	}

	return nil
}

// AddStatesG adds the given related objects to the existing relationships
// of the timezone, optionally inserting them as new records.
// Appends related to o.R.States.
// Sets related.R.Timezone appropriately.
// Uses the global database handle.
func (o *Timezone) AddStatesG(ctx context.Context, insert bool, related ...*State) error {
	return o.AddStates(ctx, boil.GetContextDB(), insert, related...)
}

// AddStates adds the given related objects to the existing relationships
// of the timezone, optionally inserting them as new records.
// Appends related to o.R.States.
// Sets related.R.Timezone appropriately.
func (o *Timezone) AddStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*State) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TimezoneID = o.TimezoneID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"state\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"timezone_id"}),
				strmangle.WhereClause("\"", "\"", 2, statePrimaryKeyColumns),
			)
			values := []interface{}{o.TimezoneID, rel.StateID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TimezoneID = o.TimezoneID
		}
	}

	if o.R == nil {
		o.R = &timezoneR{
			States: related,
		}
	} else {
		o.R.States = append(o.R.States, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stateR{
				Timezone: o,
			}
		} else {
			rel.R.Timezone = o
		}
	}
	return nil
}

// Timezones retrieves all the records using an executor.
func Timezones(mods ...qm.QueryMod) timezoneQuery {
	mods = append(mods, qm.From("\"timezone\""))
	return timezoneQuery{NewQuery(mods...)}
}

// FindTimezoneG retrieves a single record by ID.
func FindTimezoneG(ctx context.Context, timezoneID int64, selectCols ...string) (*Timezone, error) {
	return FindTimezone(ctx, boil.GetContextDB(), timezoneID, selectCols...)
}

// FindTimezone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTimezone(ctx context.Context, exec boil.ContextExecutor, timezoneID int64, selectCols ...string) (*Timezone, error) {
	timezoneObj := &Timezone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"timezone\" where \"timezone_id\"=$1", sel,
	)

	q := queries.Raw(query, timezoneID)

	err := q.Bind(ctx, exec, timezoneObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from timezone")
	}

	return timezoneObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Timezone) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Timezone) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no timezone provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(timezoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	timezoneInsertCacheMut.RLock()
	cache, cached := timezoneInsertCache[key]
	timezoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			timezoneColumns,
			timezoneColumnsWithDefault,
			timezoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(timezoneType, timezoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(timezoneType, timezoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"timezone\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"timezone\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into timezone")
	}

	if !cached {
		timezoneInsertCacheMut.Lock()
		timezoneInsertCache[key] = cache
		timezoneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Timezone record using the global executor.
// See Update for more documentation.
func (o *Timezone) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Timezone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Timezone) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	timezoneUpdateCacheMut.RLock()
	cache, cached := timezoneUpdateCache[key]
	timezoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			timezoneColumns,
			timezonePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update timezone, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"timezone\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, timezonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(timezoneType, timezoneMapping, append(wl, timezonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update timezone row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for timezone")
	}

	if !cached {
		timezoneUpdateCacheMut.Lock()
		timezoneUpdateCache[key] = cache
		timezoneUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q timezoneQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for timezone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for timezone")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TimezoneSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TimezoneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timezonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"timezone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, timezonePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in timezone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all timezone")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Timezone) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Timezone) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no timezone provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(timezoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	timezoneUpsertCacheMut.RLock()
	cache, cached := timezoneUpsertCache[key]
	timezoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			timezoneColumns,
			timezoneColumnsWithDefault,
			timezoneColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			timezoneColumns,
			timezonePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert timezone, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(timezonePrimaryKeyColumns))
			copy(conflict, timezonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"timezone\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(timezoneType, timezoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(timezoneType, timezoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert timezone")
	}

	if !cached {
		timezoneUpsertCacheMut.Lock()
		timezoneUpsertCache[key] = cache
		timezoneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Timezone record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Timezone) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Timezone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Timezone) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Timezone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), timezonePrimaryKeyMapping)
	sql := "DELETE FROM \"timezone\" WHERE \"timezone_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from timezone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for timezone")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q timezoneQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no timezoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from timezone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for timezone")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TimezoneSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TimezoneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Timezone slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(timezoneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timezonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"timezone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timezonePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from timezone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for timezone")
	}

	if len(timezoneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Timezone) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Timezone provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Timezone) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTimezone(ctx, exec, o.TimezoneID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimezoneSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TimezoneSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimezoneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TimezoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timezonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"timezone\".* FROM \"timezone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timezonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TimezoneSlice")
	}

	*o = slice

	return nil
}

// TimezoneExistsG checks if the Timezone row exists.
func TimezoneExistsG(ctx context.Context, timezoneID int64) (bool, error) {
	return TimezoneExists(ctx, boil.GetContextDB(), timezoneID)
}

// TimezoneExists checks if the Timezone row exists.
func TimezoneExists(ctx context.Context, exec boil.ContextExecutor, timezoneID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"timezone\" where \"timezone_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, timezoneID)
	}

	row := exec.QueryRowContext(ctx, sql, timezoneID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if timezone exists")
	}

	return exists, nil
}
