// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFactors(t *testing.T) {
	t.Parallel()

	query := Factors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFactorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFactorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Factors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFactorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FactorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFactorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FactorExists(ctx, tx, o.FactorID)
	if err != nil {
		t.Errorf("Unable to check if Factor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FactorExists to return true, but got false.")
	}
}

func testFactorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	factorFound, err := FindFactor(ctx, tx, o.FactorID)
	if err != nil {
		t.Error(err)
	}

	if factorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFactorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Factors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFactorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Factors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFactorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	factorOne := &Factor{}
	factorTwo := &Factor{}
	if err = randomize.Struct(seed, factorOne, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}
	if err = randomize.Struct(seed, factorTwo, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = factorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = factorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Factors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFactorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	factorOne := &Factor{}
	factorTwo := &Factor{}
	if err = randomize.Struct(seed, factorOne, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}
	if err = randomize.Struct(seed, factorTwo, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = factorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = factorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func factorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func factorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Factor) error {
	*o = Factor{}
	return nil
}

func testFactorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Factor{}
	o := &Factor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, factorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Factor object: %s", err)
	}

	AddFactorHook(boil.BeforeInsertHook, factorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	factorBeforeInsertHooks = []FactorHook{}

	AddFactorHook(boil.AfterInsertHook, factorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	factorAfterInsertHooks = []FactorHook{}

	AddFactorHook(boil.AfterSelectHook, factorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	factorAfterSelectHooks = []FactorHook{}

	AddFactorHook(boil.BeforeUpdateHook, factorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	factorBeforeUpdateHooks = []FactorHook{}

	AddFactorHook(boil.AfterUpdateHook, factorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	factorAfterUpdateHooks = []FactorHook{}

	AddFactorHook(boil.BeforeDeleteHook, factorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	factorBeforeDeleteHooks = []FactorHook{}

	AddFactorHook(boil.AfterDeleteHook, factorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	factorAfterDeleteHooks = []FactorHook{}

	AddFactorHook(boil.BeforeUpsertHook, factorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	factorBeforeUpsertHooks = []FactorHook{}

	AddFactorHook(boil.AfterUpsertHook, factorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	factorAfterUpsertHooks = []FactorHook{}
}

func testFactorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFactorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(factorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFactorToManyFactorPositions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c FactorPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, factorPositionDBTypes, false, factorPositionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, factorPositionDBTypes, false, factorPositionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FactorID = a.FactorID
	c.FactorID = a.FactorID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	factorPosition, err := a.FactorPositions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range factorPosition {
		if v.FactorID == b.FactorID {
			bFound = true
		}
		if v.FactorID == c.FactorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FactorSlice{&a}
	if err = a.L.LoadFactorPositions(ctx, tx, false, (*[]*Factor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FactorPositions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FactorPositions = nil
	if err = a.L.LoadFactorPositions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FactorPositions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", factorPosition)
	}
}

func testFactorToManyParentFactorFactors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c Factor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentFactorID, a.FactorID)
	queries.Assign(&c.ParentFactorID, a.FactorID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	factor, err := a.ParentFactorFactors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range factor {
		if queries.Equal(v.ParentFactorID, b.ParentFactorID) {
			bFound = true
		}
		if queries.Equal(v.ParentFactorID, c.ParentFactorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FactorSlice{&a}
	if err = a.L.LoadParentFactorFactors(ctx, tx, false, (*[]*Factor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentFactorFactors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentFactorFactors = nil
	if err = a.L.LoadParentFactorFactors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentFactorFactors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", factor)
	}
}

func testFactorToManyFactorsLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c FactorsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, factorsLinkDBTypes, false, factorsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, factorsLinkDBTypes, false, factorsLinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FactorsID = a.FactorID
	c.FactorsID = a.FactorID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	factorsLink, err := a.FactorsLinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range factorsLink {
		if v.FactorsID == b.FactorsID {
			bFound = true
		}
		if v.FactorsID == c.FactorsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FactorSlice{&a}
	if err = a.L.LoadFactorsLinks(ctx, tx, false, (*[]*Factor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FactorsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FactorsLinks = nil
	if err = a.L.LoadFactorsLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FactorsLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", factorsLink)
	}
}

func testFactorToManyAddOpFactorPositions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c, d, e FactorPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FactorPosition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, factorPositionDBTypes, false, strmangle.SetComplement(factorPositionPrimaryKeyColumns, factorPositionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FactorPosition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFactorPositions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.FactorID != first.FactorID {
			t.Error("foreign key was wrong value", a.FactorID, first.FactorID)
		}
		if a.FactorID != second.FactorID {
			t.Error("foreign key was wrong value", a.FactorID, second.FactorID)
		}

		if first.R.Factor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Factor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FactorPositions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FactorPositions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FactorPositions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testFactorToManyAddOpParentFactorFactors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c, d, e Factor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Factor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Factor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentFactorFactors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FactorID, first.ParentFactorID) {
			t.Error("foreign key was wrong value", a.FactorID, first.ParentFactorID)
		}
		if !queries.Equal(a.FactorID, second.ParentFactorID) {
			t.Error("foreign key was wrong value", a.FactorID, second.ParentFactorID)
		}

		if first.R.ParentFactor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentFactor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentFactorFactors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentFactorFactors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentFactorFactors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFactorToManySetOpParentFactorFactors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c, d, e Factor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Factor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentFactorFactors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentFactorFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentFactorFactors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentFactorFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentFactorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentFactorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FactorID, d.ParentFactorID) {
		t.Error("foreign key was wrong value", a.FactorID, d.ParentFactorID)
	}
	if !queries.Equal(a.FactorID, e.ParentFactorID) {
		t.Error("foreign key was wrong value", a.FactorID, e.ParentFactorID)
	}

	if b.R.ParentFactor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentFactor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentFactor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ParentFactor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentFactorFactors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentFactorFactors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFactorToManyRemoveOpParentFactorFactors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c, d, e Factor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Factor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentFactorFactors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentFactorFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentFactorFactors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentFactorFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentFactorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentFactorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ParentFactor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentFactor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentFactor != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ParentFactor != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentFactorFactors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentFactorFactors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentFactorFactors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFactorToManyAddOpFactorsLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c, d, e FactorsLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FactorsLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, factorsLinkDBTypes, false, strmangle.SetComplement(factorsLinkPrimaryKeyColumns, factorsLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FactorsLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFactorsLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.FactorID != first.FactorsID {
			t.Error("foreign key was wrong value", a.FactorID, first.FactorsID)
		}
		if a.FactorID != second.FactorsID {
			t.Error("foreign key was wrong value", a.FactorID, second.FactorsID)
		}

		if first.R.Factor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Factor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FactorsLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FactorsLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FactorsLinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testFactorToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Factor
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := FactorSlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*Factor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFactorToOneFactorUsingParentFactor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Factor
	var foreign Factor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, factorDBTypes, false, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentFactorID, foreign.FactorID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentFactor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.FactorID, foreign.FactorID) {
		t.Errorf("want: %v, got %v", foreign.FactorID, check.FactorID)
	}

	slice := FactorSlice{&local}
	if err = local.L.LoadParentFactor(ctx, tx, false, (*[]*Factor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentFactor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentFactor = nil
	if err = local.L.LoadParentFactor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentFactor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFactorToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Factors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testFactorToOneSetOpFactorUsingParentFactor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b, c Factor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Factor{&b, &c} {
		err = a.SetParentFactor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentFactor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentFactorFactors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentFactorID, x.FactorID) {
			t.Error("foreign key was wrong value", a.ParentFactorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentFactorID))
		reflect.Indirect(reflect.ValueOf(&a.ParentFactorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentFactorID, x.FactorID) {
			t.Error("foreign key was wrong value", a.ParentFactorID, x.FactorID)
		}
	}
}

func testFactorToOneRemoveOpFactorUsingParentFactor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Factor
	var b Factor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, factorDBTypes, false, strmangle.SetComplement(factorPrimaryKeyColumns, factorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParentFactor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParentFactor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentFactor().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ParentFactor != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentFactorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentFactorFactors) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testFactorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFactorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FactorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFactorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Factors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	factorDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `FactorDescription`: `varchar`, `FactorID`: `int8`, `FactorName`: `varchar`, `ParentFactorID`: `int8`, `UserAccountID`: `int8`}
	_             = bytes.MinRead
)

func testFactorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(factorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(factorColumns) == len(factorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, factorDBTypes, true, factorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFactorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(factorColumns) == len(factorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Factor{}
	if err = randomize.Struct(seed, o, factorDBTypes, true, factorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, factorDBTypes, true, factorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(factorColumns, factorPrimaryKeyColumns) {
		fields = factorColumns
	} else {
		fields = strmangle.SetComplement(
			factorColumns,
			factorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FactorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFactorsUpsert(t *testing.T) {
	t.Parallel()

	if len(factorColumns) == len(factorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Factor{}
	if err = randomize.Struct(seed, &o, factorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Factor: %s", err)
	}

	count, err := Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, factorDBTypes, false, factorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Factor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Factor: %s", err)
	}

	count, err = Factors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
