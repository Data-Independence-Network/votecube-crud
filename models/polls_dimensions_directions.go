// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsDimensionsDirection is an object representing the database table.
type PollsDimensionsDirection struct {
	PollDimensionDirectionID int64  `boil:"poll_dimension_direction_id" json:"poll_dimension_direction_id" toml:"poll_dimension_direction_id" yaml:"poll_dimension_direction_id"`
	DimensionDirectionID     int64  `boil:"dimension_direction_id" json:"dimension_direction_id" toml:"dimension_direction_id" yaml:"dimension_direction_id"`
	PollID                   int64  `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	DimensionCoordinateAxis  string `boil:"dimension_coordinate_axis" json:"dimension_coordinate_axis" toml:"dimension_coordinate_axis" yaml:"dimension_coordinate_axis"`
	DirectionOrientation     bool   `boil:"direction_orientation" json:"direction_orientation" toml:"direction_orientation" yaml:"direction_orientation"`
	ColorID                  int64  `boil:"color_id" json:"color_id" toml:"color_id" yaml:"color_id"`
	DesignPatternID          int64  `boil:"design_pattern_id" json:"design_pattern_id" toml:"design_pattern_id" yaml:"design_pattern_id"`
	EmojiID                  int64  `boil:"emoji_id" json:"emoji_id" toml:"emoji_id" yaml:"emoji_id"`

	R *pollsDimensionsDirectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsDimensionsDirectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsDimensionsDirectionColumns = struct {
	PollDimensionDirectionID string
	DimensionDirectionID     string
	PollID                   string
	DimensionCoordinateAxis  string
	DirectionOrientation     string
	ColorID                  string
	DesignPatternID          string
	EmojiID                  string
}{
	PollDimensionDirectionID: "poll_dimension_direction_id",
	DimensionDirectionID:     "dimension_direction_id",
	PollID:                   "poll_id",
	DimensionCoordinateAxis:  "dimension_coordinate_axis",
	DirectionOrientation:     "direction_orientation",
	ColorID:                  "color_id",
	DesignPatternID:          "design_pattern_id",
	EmojiID:                  "emoji_id",
}

// PollsDimensionsDirectionRels is where relationship names are stored.
var PollsDimensionsDirectionRels = struct {
	Poll                         string
	DimensionDirection           string
	Emoji                        string
	DesignPattern                string
	Color                        string
	ZPollDimensionDirectionVotes string
	YPollDimensionDirectionVotes string
	XPollDimensionDirectionVotes string
}{
	Poll:                         "Poll",
	DimensionDirection:           "DimensionDirection",
	Emoji:                        "Emoji",
	DesignPattern:                "DesignPattern",
	Color:                        "Color",
	ZPollDimensionDirectionVotes: "ZPollDimensionDirectionVotes",
	YPollDimensionDirectionVotes: "YPollDimensionDirectionVotes",
	XPollDimensionDirectionVotes: "XPollDimensionDirectionVotes",
}

// pollsDimensionsDirectionR is where relationships are stored.
type pollsDimensionsDirectionR struct {
	Poll                         *Poll
	DimensionDirection           *DimensionDirection
	Emoji                        *Emoji
	DesignPattern                *DesignPattern
	Color                        *Color
	ZPollDimensionDirectionVotes VoteSlice
	YPollDimensionDirectionVotes VoteSlice
	XPollDimensionDirectionVotes VoteSlice
}

// NewStruct creates a new relationship struct
func (*pollsDimensionsDirectionR) NewStruct() *pollsDimensionsDirectionR {
	return &pollsDimensionsDirectionR{}
}

// pollsDimensionsDirectionL is where Load methods for each relationship are stored.
type pollsDimensionsDirectionL struct{}

var (
	pollsDimensionsDirectionColumns               = []string{"poll_dimension_direction_id", "dimension_direction_id", "poll_id", "dimension_coordinate_axis", "direction_orientation", "color_id", "design_pattern_id", "emoji_id"}
	pollsDimensionsDirectionColumnsWithoutDefault = []string{"poll_dimension_direction_id", "dimension_direction_id", "poll_id", "dimension_coordinate_axis", "direction_orientation", "color_id", "design_pattern_id", "emoji_id"}
	pollsDimensionsDirectionColumnsWithDefault    = []string{}
	pollsDimensionsDirectionPrimaryKeyColumns     = []string{"poll_dimension_direction_id"}
)

type (
	// PollsDimensionsDirectionSlice is an alias for a slice of pointers to PollsDimensionsDirection.
	// This should generally be used opposed to []PollsDimensionsDirection.
	PollsDimensionsDirectionSlice []*PollsDimensionsDirection
	// PollsDimensionsDirectionHook is the signature for custom PollsDimensionsDirection hook methods
	PollsDimensionsDirectionHook func(context.Context, boil.ContextExecutor, *PollsDimensionsDirection) error

	pollsDimensionsDirectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsDimensionsDirectionType                 = reflect.TypeOf(&PollsDimensionsDirection{})
	pollsDimensionsDirectionMapping              = queries.MakeStructMapping(pollsDimensionsDirectionType)
	pollsDimensionsDirectionPrimaryKeyMapping, _ = queries.BindMapping(pollsDimensionsDirectionType, pollsDimensionsDirectionMapping, pollsDimensionsDirectionPrimaryKeyColumns)
	pollsDimensionsDirectionInsertCacheMut       sync.RWMutex
	pollsDimensionsDirectionInsertCache          = make(map[string]insertCache)
	pollsDimensionsDirectionUpdateCacheMut       sync.RWMutex
	pollsDimensionsDirectionUpdateCache          = make(map[string]updateCache)
	pollsDimensionsDirectionUpsertCacheMut       sync.RWMutex
	pollsDimensionsDirectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsDimensionsDirectionBeforeInsertHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionBeforeUpdateHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionBeforeDeleteHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionBeforeUpsertHooks []PollsDimensionsDirectionHook

var pollsDimensionsDirectionAfterInsertHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionAfterSelectHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionAfterUpdateHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionAfterDeleteHooks []PollsDimensionsDirectionHook
var pollsDimensionsDirectionAfterUpsertHooks []PollsDimensionsDirectionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsDimensionsDirection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsDimensionsDirection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsDimensionsDirection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsDimensionsDirection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsDimensionsDirection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsDimensionsDirection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsDimensionsDirection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsDimensionsDirection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsDimensionsDirection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsDimensionsDirectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsDimensionsDirectionHook registers your hook function for all future operations.
func AddPollsDimensionsDirectionHook(hookPoint boil.HookPoint, pollsDimensionsDirectionHook PollsDimensionsDirectionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsDimensionsDirectionBeforeInsertHooks = append(pollsDimensionsDirectionBeforeInsertHooks, pollsDimensionsDirectionHook)
	case boil.BeforeUpdateHook:
		pollsDimensionsDirectionBeforeUpdateHooks = append(pollsDimensionsDirectionBeforeUpdateHooks, pollsDimensionsDirectionHook)
	case boil.BeforeDeleteHook:
		pollsDimensionsDirectionBeforeDeleteHooks = append(pollsDimensionsDirectionBeforeDeleteHooks, pollsDimensionsDirectionHook)
	case boil.BeforeUpsertHook:
		pollsDimensionsDirectionBeforeUpsertHooks = append(pollsDimensionsDirectionBeforeUpsertHooks, pollsDimensionsDirectionHook)
	case boil.AfterInsertHook:
		pollsDimensionsDirectionAfterInsertHooks = append(pollsDimensionsDirectionAfterInsertHooks, pollsDimensionsDirectionHook)
	case boil.AfterSelectHook:
		pollsDimensionsDirectionAfterSelectHooks = append(pollsDimensionsDirectionAfterSelectHooks, pollsDimensionsDirectionHook)
	case boil.AfterUpdateHook:
		pollsDimensionsDirectionAfterUpdateHooks = append(pollsDimensionsDirectionAfterUpdateHooks, pollsDimensionsDirectionHook)
	case boil.AfterDeleteHook:
		pollsDimensionsDirectionAfterDeleteHooks = append(pollsDimensionsDirectionAfterDeleteHooks, pollsDimensionsDirectionHook)
	case boil.AfterUpsertHook:
		pollsDimensionsDirectionAfterUpsertHooks = append(pollsDimensionsDirectionAfterUpsertHooks, pollsDimensionsDirectionHook)
	}
}

// OneG returns a single pollsDimensionsDirection record from the query using the global executor.
func (q pollsDimensionsDirectionQuery) OneG(ctx context.Context) (*PollsDimensionsDirection, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pollsDimensionsDirection record from the query.
func (q pollsDimensionsDirectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsDimensionsDirection, error) {
	o := &PollsDimensionsDirection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_dimensions_directions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PollsDimensionsDirection records from the query using the global executor.
func (q pollsDimensionsDirectionQuery) AllG(ctx context.Context) (PollsDimensionsDirectionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PollsDimensionsDirection records from the query.
func (q pollsDimensionsDirectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsDimensionsDirectionSlice, error) {
	var o []*PollsDimensionsDirection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsDimensionsDirection slice")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PollsDimensionsDirection records in the query, and panics on error.
func (q pollsDimensionsDirectionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PollsDimensionsDirection records in the query.
func (q pollsDimensionsDirectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_dimensions_directions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q pollsDimensionsDirectionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pollsDimensionsDirectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_dimensions_directions exists")
	}

	return count > 0, nil
}

// Poll pointed to by the foreign key.
func (o *PollsDimensionsDirection) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("parent_poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// DimensionDirection pointed to by the foreign key.
func (o *PollsDimensionsDirection) DimensionDirection(mods ...qm.QueryMod) dimensionDirectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("dimension_direction_id=?", o.DimensionDirectionID),
	}

	queryMods = append(queryMods, mods...)

	query := DimensionDirections(queryMods...)
	queries.SetFrom(query.Query, "\"dimension_directions\"")

	return query
}

// Emoji pointed to by the foreign key.
func (o *PollsDimensionsDirection) Emoji(mods ...qm.QueryMod) emojiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("emoji_id=?", o.EmojiID),
	}

	queryMods = append(queryMods, mods...)

	query := Emojis(queryMods...)
	queries.SetFrom(query.Query, "\"emoji\"")

	return query
}

// DesignPattern pointed to by the foreign key.
func (o *PollsDimensionsDirection) DesignPattern(mods ...qm.QueryMod) designPatternQuery {
	queryMods := []qm.QueryMod{
		qm.Where("design_pattern_id=?", o.DesignPatternID),
	}

	queryMods = append(queryMods, mods...)

	query := DesignPatterns(queryMods...)
	queries.SetFrom(query.Query, "\"design_patterns\"")

	return query
}

// Color pointed to by the foreign key.
func (o *PollsDimensionsDirection) Color(mods ...qm.QueryMod) colorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("color_id=?", o.ColorID),
	}

	queryMods = append(queryMods, mods...)

	query := Colors(queryMods...)
	queries.SetFrom(query.Query, "\"colors\"")

	return query
}

// ZPollDimensionDirectionVotes retrieves all the vote's Votes with an executor via z_poll_dimension_direction_id column.
func (o *PollsDimensionsDirection) ZPollDimensionDirectionVotes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"z_poll_dimension_direction_id\"=?", o.PollDimensionDirectionID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// YPollDimensionDirectionVotes retrieves all the vote's Votes with an executor via y_poll_dimension_direction_id column.
func (o *PollsDimensionsDirection) YPollDimensionDirectionVotes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"y_poll_dimension_direction_id\"=?", o.PollDimensionDirectionID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// XPollDimensionDirectionVotes retrieves all the vote's Votes with an executor via x_poll_dimension_direction_id column.
func (o *PollsDimensionsDirection) XPollDimensionDirectionVotes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"x_poll_dimension_direction_id\"=?", o.PollDimensionDirectionID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsDimensionsDirectionL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`parent_poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.ParentPollID {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadDimensionDirection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsDimensionsDirectionL) LoadDimensionDirection(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.DimensionDirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.DimensionDirectionID {
					continue Outer
				}
			}

			args = append(args, obj.DimensionDirectionID)
		}
	}

	query := NewQuery(qm.From(`dimension_directions`), qm.WhereIn(`dimension_direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DimensionDirection")
	}

	var resultSlice []*DimensionDirection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DimensionDirection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dimension_directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dimension_directions")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DimensionDirection = foreign
		if foreign.R == nil {
			foreign.R = &dimensionDirectionR{}
		}
		foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DimensionDirectionID == foreign.DimensionDirectionID {
				local.R.DimensionDirection = foreign
				if foreign.R == nil {
					foreign.R = &dimensionDirectionR{}
				}
				foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadEmoji allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsDimensionsDirectionL) LoadEmoji(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.EmojiID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.EmojiID {
					continue Outer
				}
			}

			args = append(args, obj.EmojiID)
		}
	}

	query := NewQuery(qm.From(`emoji`), qm.WhereIn(`emoji_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Emoji")
	}

	var resultSlice []*Emoji
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Emoji")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for emoji")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for emoji")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Emoji = foreign
		if foreign.R == nil {
			foreign.R = &emojiR{}
		}
		foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmojiID == foreign.EmojiID {
				local.R.Emoji = foreign
				if foreign.R == nil {
					foreign.R = &emojiR{}
				}
				foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadDesignPattern allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsDimensionsDirectionL) LoadDesignPattern(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.DesignPatternID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.DesignPatternID {
					continue Outer
				}
			}

			args = append(args, obj.DesignPatternID)
		}
	}

	query := NewQuery(qm.From(`design_patterns`), qm.WhereIn(`design_pattern_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DesignPattern")
	}

	var resultSlice []*DesignPattern
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DesignPattern")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for design_patterns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for design_patterns")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DesignPattern = foreign
		if foreign.R == nil {
			foreign.R = &designPatternR{}
		}
		foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DesignPatternID == foreign.DesignPatternID {
				local.R.DesignPattern = foreign
				if foreign.R == nil {
					foreign.R = &designPatternR{}
				}
				foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadColor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsDimensionsDirectionL) LoadColor(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.ColorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.ColorID {
					continue Outer
				}
			}

			args = append(args, obj.ColorID)
		}
	}

	query := NewQuery(qm.From(`colors`), qm.WhereIn(`color_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Color")
	}

	var resultSlice []*Color
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Color")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for colors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for colors")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Color = foreign
		if foreign.R == nil {
			foreign.R = &colorR{}
		}
		foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ColorID == foreign.ColorID {
				local.R.Color = foreign
				if foreign.R == nil {
					foreign.R = &colorR{}
				}
				foreign.R.PollsDimensionsDirections = append(foreign.R.PollsDimensionsDirections, local)
				break
			}
		}
	}

	return nil
}

// LoadZPollDimensionDirectionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsDimensionsDirectionL) LoadZPollDimensionDirectionVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.PollDimensionDirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.PollDimensionDirectionID {
					continue Outer
				}
			}

			args = append(args, obj.PollDimensionDirectionID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`z_poll_dimension_direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ZPollDimensionDirectionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.ZPollDimensionDirection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollDimensionDirectionID == foreign.ZPollDimensionDirectionID {
				local.R.ZPollDimensionDirectionVotes = append(local.R.ZPollDimensionDirectionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.ZPollDimensionDirection = local
				break
			}
		}
	}

	return nil
}

// LoadYPollDimensionDirectionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsDimensionsDirectionL) LoadYPollDimensionDirectionVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.PollDimensionDirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.PollDimensionDirectionID {
					continue Outer
				}
			}

			args = append(args, obj.PollDimensionDirectionID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`y_poll_dimension_direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.YPollDimensionDirectionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.YPollDimensionDirection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollDimensionDirectionID == foreign.YPollDimensionDirectionID {
				local.R.YPollDimensionDirectionVotes = append(local.R.YPollDimensionDirectionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.YPollDimensionDirection = local
				break
			}
		}
	}

	return nil
}

// LoadXPollDimensionDirectionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsDimensionsDirectionL) LoadXPollDimensionDirectionVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsDimensionsDirection interface{}, mods queries.Applicator) error {
	var slice []*PollsDimensionsDirection
	var object *PollsDimensionsDirection

	if singular {
		object = maybePollsDimensionsDirection.(*PollsDimensionsDirection)
	} else {
		slice = *maybePollsDimensionsDirection.(*[]*PollsDimensionsDirection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsDimensionsDirectionR{}
		}
		args = append(args, object.PollDimensionDirectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsDimensionsDirectionR{}
			}

			for _, a := range args {
				if a == obj.PollDimensionDirectionID {
					continue Outer
				}
			}

			args = append(args, obj.PollDimensionDirectionID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`x_poll_dimension_direction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XPollDimensionDirectionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.XPollDimensionDirection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollDimensionDirectionID == foreign.XPollDimensionDirectionID {
				local.R.XPollDimensionDirectionVotes = append(local.R.XPollDimensionDirectionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.XPollDimensionDirection = local
				break
			}
		}
	}

	return nil
}

// SetPollG of the pollsDimensionsDirection to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsDimensionsDirections.
// Uses the global database handle.
func (o *PollsDimensionsDirection) SetPollG(ctx context.Context, insert bool, related *Poll) error {
	return o.SetPoll(ctx, boil.GetContextDB(), insert, related)
}

// SetPoll of the pollsDimensionsDirection to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollsDimensionsDirections.
func (o *PollsDimensionsDirection) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ParentPollID, o.PollDimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PollID = related.ParentPollID
	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollsDimensionsDirections: PollsDimensionsDirectionSlice{o},
		}
	} else {
		related.R.PollsDimensionsDirections = append(related.R.PollsDimensionsDirections, o)
	}

	return nil
}

// SetDimensionDirectionG of the pollsDimensionsDirection to the related item.
// Sets o.R.DimensionDirection to related.
// Adds o to related.R.PollsDimensionsDirections.
// Uses the global database handle.
func (o *PollsDimensionsDirection) SetDimensionDirectionG(ctx context.Context, insert bool, related *DimensionDirection) error {
	return o.SetDimensionDirection(ctx, boil.GetContextDB(), insert, related)
}

// SetDimensionDirection of the pollsDimensionsDirection to the related item.
// Sets o.R.DimensionDirection to related.
// Adds o to related.R.PollsDimensionsDirections.
func (o *PollsDimensionsDirection) SetDimensionDirection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DimensionDirection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dimension_direction_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.DimensionDirectionID, o.PollDimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DimensionDirectionID = related.DimensionDirectionID
	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			DimensionDirection: related,
		}
	} else {
		o.R.DimensionDirection = related
	}

	if related.R == nil {
		related.R = &dimensionDirectionR{
			PollsDimensionsDirections: PollsDimensionsDirectionSlice{o},
		}
	} else {
		related.R.PollsDimensionsDirections = append(related.R.PollsDimensionsDirections, o)
	}

	return nil
}

// SetEmojiG of the pollsDimensionsDirection to the related item.
// Sets o.R.Emoji to related.
// Adds o to related.R.PollsDimensionsDirections.
// Uses the global database handle.
func (o *PollsDimensionsDirection) SetEmojiG(ctx context.Context, insert bool, related *Emoji) error {
	return o.SetEmoji(ctx, boil.GetContextDB(), insert, related)
}

// SetEmoji of the pollsDimensionsDirection to the related item.
// Sets o.R.Emoji to related.
// Adds o to related.R.PollsDimensionsDirections.
func (o *PollsDimensionsDirection) SetEmoji(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Emoji) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"emoji_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.EmojiID, o.PollDimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmojiID = related.EmojiID
	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			Emoji: related,
		}
	} else {
		o.R.Emoji = related
	}

	if related.R == nil {
		related.R = &emojiR{
			PollsDimensionsDirections: PollsDimensionsDirectionSlice{o},
		}
	} else {
		related.R.PollsDimensionsDirections = append(related.R.PollsDimensionsDirections, o)
	}

	return nil
}

// SetDesignPatternG of the pollsDimensionsDirection to the related item.
// Sets o.R.DesignPattern to related.
// Adds o to related.R.PollsDimensionsDirections.
// Uses the global database handle.
func (o *PollsDimensionsDirection) SetDesignPatternG(ctx context.Context, insert bool, related *DesignPattern) error {
	return o.SetDesignPattern(ctx, boil.GetContextDB(), insert, related)
}

// SetDesignPattern of the pollsDimensionsDirection to the related item.
// Sets o.R.DesignPattern to related.
// Adds o to related.R.PollsDimensionsDirections.
func (o *PollsDimensionsDirection) SetDesignPattern(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DesignPattern) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"design_pattern_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.DesignPatternID, o.PollDimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DesignPatternID = related.DesignPatternID
	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			DesignPattern: related,
		}
	} else {
		o.R.DesignPattern = related
	}

	if related.R == nil {
		related.R = &designPatternR{
			PollsDimensionsDirections: PollsDimensionsDirectionSlice{o},
		}
	} else {
		related.R.PollsDimensionsDirections = append(related.R.PollsDimensionsDirections, o)
	}

	return nil
}

// SetColorG of the pollsDimensionsDirection to the related item.
// Sets o.R.Color to related.
// Adds o to related.R.PollsDimensionsDirections.
// Uses the global database handle.
func (o *PollsDimensionsDirection) SetColorG(ctx context.Context, insert bool, related *Color) error {
	return o.SetColor(ctx, boil.GetContextDB(), insert, related)
}

// SetColor of the pollsDimensionsDirection to the related item.
// Sets o.R.Color to related.
// Adds o to related.R.PollsDimensionsDirections.
func (o *PollsDimensionsDirection) SetColor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Color) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"color_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ColorID, o.PollDimensionDirectionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ColorID = related.ColorID
	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			Color: related,
		}
	} else {
		o.R.Color = related
	}

	if related.R == nil {
		related.R = &colorR{
			PollsDimensionsDirections: PollsDimensionsDirectionSlice{o},
		}
	} else {
		related.R.PollsDimensionsDirections = append(related.R.PollsDimensionsDirections, o)
	}

	return nil
}

// AddZPollDimensionDirectionVotesG adds the given related objects to the existing relationships
// of the polls_dimensions_direction, optionally inserting them as new records.
// Appends related to o.R.ZPollDimensionDirectionVotes.
// Sets related.R.ZPollDimensionDirection appropriately.
// Uses the global database handle.
func (o *PollsDimensionsDirection) AddZPollDimensionDirectionVotesG(ctx context.Context, insert bool, related ...*Vote) error {
	return o.AddZPollDimensionDirectionVotes(ctx, boil.GetContextDB(), insert, related...)
}

// AddZPollDimensionDirectionVotes adds the given related objects to the existing relationships
// of the polls_dimensions_direction, optionally inserting them as new records.
// Appends related to o.R.ZPollDimensionDirectionVotes.
// Sets related.R.ZPollDimensionDirection appropriately.
func (o *PollsDimensionsDirection) AddZPollDimensionDirectionVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ZPollDimensionDirectionID = o.PollDimensionDirectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"z_poll_dimension_direction_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.PollDimensionDirectionID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ZPollDimensionDirectionID = o.PollDimensionDirectionID
		}
	}

	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			ZPollDimensionDirectionVotes: related,
		}
	} else {
		o.R.ZPollDimensionDirectionVotes = append(o.R.ZPollDimensionDirectionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				ZPollDimensionDirection: o,
			}
		} else {
			rel.R.ZPollDimensionDirection = o
		}
	}
	return nil
}

// AddYPollDimensionDirectionVotesG adds the given related objects to the existing relationships
// of the polls_dimensions_direction, optionally inserting them as new records.
// Appends related to o.R.YPollDimensionDirectionVotes.
// Sets related.R.YPollDimensionDirection appropriately.
// Uses the global database handle.
func (o *PollsDimensionsDirection) AddYPollDimensionDirectionVotesG(ctx context.Context, insert bool, related ...*Vote) error {
	return o.AddYPollDimensionDirectionVotes(ctx, boil.GetContextDB(), insert, related...)
}

// AddYPollDimensionDirectionVotes adds the given related objects to the existing relationships
// of the polls_dimensions_direction, optionally inserting them as new records.
// Appends related to o.R.YPollDimensionDirectionVotes.
// Sets related.R.YPollDimensionDirection appropriately.
func (o *PollsDimensionsDirection) AddYPollDimensionDirectionVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.YPollDimensionDirectionID = o.PollDimensionDirectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y_poll_dimension_direction_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.PollDimensionDirectionID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.YPollDimensionDirectionID = o.PollDimensionDirectionID
		}
	}

	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			YPollDimensionDirectionVotes: related,
		}
	} else {
		o.R.YPollDimensionDirectionVotes = append(o.R.YPollDimensionDirectionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				YPollDimensionDirection: o,
			}
		} else {
			rel.R.YPollDimensionDirection = o
		}
	}
	return nil
}

// AddXPollDimensionDirectionVotesG adds the given related objects to the existing relationships
// of the polls_dimensions_direction, optionally inserting them as new records.
// Appends related to o.R.XPollDimensionDirectionVotes.
// Sets related.R.XPollDimensionDirection appropriately.
// Uses the global database handle.
func (o *PollsDimensionsDirection) AddXPollDimensionDirectionVotesG(ctx context.Context, insert bool, related ...*Vote) error {
	return o.AddXPollDimensionDirectionVotes(ctx, boil.GetContextDB(), insert, related...)
}

// AddXPollDimensionDirectionVotes adds the given related objects to the existing relationships
// of the polls_dimensions_direction, optionally inserting them as new records.
// Appends related to o.R.XPollDimensionDirectionVotes.
// Sets related.R.XPollDimensionDirection appropriately.
func (o *PollsDimensionsDirection) AddXPollDimensionDirectionVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.XPollDimensionDirectionID = o.PollDimensionDirectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x_poll_dimension_direction_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.PollDimensionDirectionID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.XPollDimensionDirectionID = o.PollDimensionDirectionID
		}
	}

	if o.R == nil {
		o.R = &pollsDimensionsDirectionR{
			XPollDimensionDirectionVotes: related,
		}
	} else {
		o.R.XPollDimensionDirectionVotes = append(o.R.XPollDimensionDirectionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				XPollDimensionDirection: o,
			}
		} else {
			rel.R.XPollDimensionDirection = o
		}
	}
	return nil
}

// PollsDimensionsDirections retrieves all the records using an executor.
func PollsDimensionsDirections(mods ...qm.QueryMod) pollsDimensionsDirectionQuery {
	mods = append(mods, qm.From("\"polls_dimensions_directions\""))
	return pollsDimensionsDirectionQuery{NewQuery(mods...)}
}

// FindPollsDimensionsDirectionG retrieves a single record by ID.
func FindPollsDimensionsDirectionG(ctx context.Context, pollDimensionDirectionID int64, selectCols ...string) (*PollsDimensionsDirection, error) {
	return FindPollsDimensionsDirection(ctx, boil.GetContextDB(), pollDimensionDirectionID, selectCols...)
}

// FindPollsDimensionsDirection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsDimensionsDirection(ctx context.Context, exec boil.ContextExecutor, pollDimensionDirectionID int64, selectCols ...string) (*PollsDimensionsDirection, error) {
	pollsDimensionsDirectionObj := &PollsDimensionsDirection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_dimensions_directions\" where \"poll_dimension_direction_id\"=$1", sel,
	)

	q := queries.Raw(query, pollDimensionDirectionID)

	err := q.Bind(ctx, exec, pollsDimensionsDirectionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_dimensions_directions")
	}

	return pollsDimensionsDirectionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PollsDimensionsDirection) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsDimensionsDirection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_dimensions_directions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsDimensionsDirectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsDimensionsDirectionInsertCacheMut.RLock()
	cache, cached := pollsDimensionsDirectionInsertCache[key]
	pollsDimensionsDirectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsDimensionsDirectionColumns,
			pollsDimensionsDirectionColumnsWithDefault,
			pollsDimensionsDirectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsDimensionsDirectionType, pollsDimensionsDirectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsDimensionsDirectionType, pollsDimensionsDirectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_dimensions_directions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_dimensions_directions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_dimensions_directions")
	}

	if !cached {
		pollsDimensionsDirectionInsertCacheMut.Lock()
		pollsDimensionsDirectionInsertCache[key] = cache
		pollsDimensionsDirectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PollsDimensionsDirection record using the global executor.
// See Update for more documentation.
func (o *PollsDimensionsDirection) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PollsDimensionsDirection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsDimensionsDirection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsDimensionsDirectionUpdateCacheMut.RLock()
	cache, cached := pollsDimensionsDirectionUpdateCache[key]
	pollsDimensionsDirectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsDimensionsDirectionColumns,
			pollsDimensionsDirectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_dimensions_directions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsDimensionsDirectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsDimensionsDirectionType, pollsDimensionsDirectionMapping, append(wl, pollsDimensionsDirectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_dimensions_directions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_dimensions_directions")
	}

	if !cached {
		pollsDimensionsDirectionUpdateCacheMut.Lock()
		pollsDimensionsDirectionUpdateCache[key] = cache
		pollsDimensionsDirectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsDimensionsDirectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_dimensions_directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_dimensions_directions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PollsDimensionsDirectionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsDimensionsDirectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsDimensionsDirectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsDimensionsDirectionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsDimensionsDirection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsDimensionsDirection")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PollsDimensionsDirection) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsDimensionsDirection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_dimensions_directions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsDimensionsDirectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsDimensionsDirectionUpsertCacheMut.RLock()
	cache, cached := pollsDimensionsDirectionUpsertCache[key]
	pollsDimensionsDirectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsDimensionsDirectionColumns,
			pollsDimensionsDirectionColumnsWithDefault,
			pollsDimensionsDirectionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsDimensionsDirectionColumns,
			pollsDimensionsDirectionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_dimensions_directions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsDimensionsDirectionPrimaryKeyColumns))
			copy(conflict, pollsDimensionsDirectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_dimensions_directions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsDimensionsDirectionType, pollsDimensionsDirectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsDimensionsDirectionType, pollsDimensionsDirectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_dimensions_directions")
	}

	if !cached {
		pollsDimensionsDirectionUpsertCacheMut.Lock()
		pollsDimensionsDirectionUpsertCache[key] = cache
		pollsDimensionsDirectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PollsDimensionsDirection record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PollsDimensionsDirection) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PollsDimensionsDirection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsDimensionsDirection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsDimensionsDirection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsDimensionsDirectionPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_dimensions_directions\" WHERE \"poll_dimension_direction_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_dimensions_directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_dimensions_directions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsDimensionsDirectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsDimensionsDirectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_dimensions_directions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_dimensions_directions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PollsDimensionsDirectionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsDimensionsDirectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsDimensionsDirection slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsDimensionsDirectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsDimensionsDirectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_dimensions_directions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsDimensionsDirectionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsDimensionsDirection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_dimensions_directions")
	}

	if len(pollsDimensionsDirectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PollsDimensionsDirection) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PollsDimensionsDirection provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsDimensionsDirection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsDimensionsDirection(ctx, exec, o.PollDimensionDirectionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsDimensionsDirectionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PollsDimensionsDirectionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsDimensionsDirectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsDimensionsDirectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsDimensionsDirectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_dimensions_directions\".* FROM \"polls_dimensions_directions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsDimensionsDirectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsDimensionsDirectionSlice")
	}

	*o = slice

	return nil
}

// PollsDimensionsDirectionExistsG checks if the PollsDimensionsDirection row exists.
func PollsDimensionsDirectionExistsG(ctx context.Context, pollDimensionDirectionID int64) (bool, error) {
	return PollsDimensionsDirectionExists(ctx, boil.GetContextDB(), pollDimensionDirectionID)
}

// PollsDimensionsDirectionExists checks if the PollsDimensionsDirection row exists.
func PollsDimensionsDirectionExists(ctx context.Context, exec boil.ContextExecutor, pollDimensionDirectionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_dimensions_directions\" where \"poll_dimension_direction_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollDimensionDirectionID)
	}

	row := exec.QueryRowContext(ctx, sql, pollDimensionDirectionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_dimensions_directions exists")
	}

	return exists, nil
}
