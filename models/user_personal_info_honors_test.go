// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserPersonalInfoHonors(t *testing.T) {
	t.Parallel()

	query := UserPersonalInfoHonors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserPersonalInfoHonorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPersonalInfoHonorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserPersonalInfoHonors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPersonalInfoHonorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPersonalInfoHonorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPersonalInfoHonorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserPersonalInfoHonorExists(ctx, tx, o.UserPersonalInfoHonorID)
	if err != nil {
		t.Errorf("Unable to check if UserPersonalInfoHonor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserPersonalInfoHonorExists to return true, but got false.")
	}
}

func testUserPersonalInfoHonorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userPersonalInfoHonorFound, err := FindUserPersonalInfoHonor(ctx, tx, o.UserPersonalInfoHonorID)
	if err != nil {
		t.Error(err)
	}

	if userPersonalInfoHonorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserPersonalInfoHonorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserPersonalInfoHonors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserPersonalInfoHonorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserPersonalInfoHonors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserPersonalInfoHonorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userPersonalInfoHonorOne := &UserPersonalInfoHonor{}
	userPersonalInfoHonorTwo := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, userPersonalInfoHonorOne, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}
	if err = randomize.Struct(seed, userPersonalInfoHonorTwo, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPersonalInfoHonorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPersonalInfoHonorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPersonalInfoHonors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserPersonalInfoHonorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userPersonalInfoHonorOne := &UserPersonalInfoHonor{}
	userPersonalInfoHonorTwo := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, userPersonalInfoHonorOne, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}
	if err = randomize.Struct(seed, userPersonalInfoHonorTwo, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPersonalInfoHonorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPersonalInfoHonorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userPersonalInfoHonorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func userPersonalInfoHonorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPersonalInfoHonor) error {
	*o = UserPersonalInfoHonor{}
	return nil
}

func testUserPersonalInfoHonorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserPersonalInfoHonor{}
	o := &UserPersonalInfoHonor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor object: %s", err)
	}

	AddUserPersonalInfoHonorHook(boil.BeforeInsertHook, userPersonalInfoHonorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorBeforeInsertHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.AfterInsertHook, userPersonalInfoHonorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorAfterInsertHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.AfterSelectHook, userPersonalInfoHonorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorAfterSelectHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.BeforeUpdateHook, userPersonalInfoHonorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorBeforeUpdateHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.AfterUpdateHook, userPersonalInfoHonorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorAfterUpdateHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.BeforeDeleteHook, userPersonalInfoHonorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorBeforeDeleteHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.AfterDeleteHook, userPersonalInfoHonorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorAfterDeleteHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.BeforeUpsertHook, userPersonalInfoHonorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorBeforeUpsertHooks = []UserPersonalInfoHonorHook{}

	AddUserPersonalInfoHonorHook(boil.AfterUpsertHook, userPersonalInfoHonorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userPersonalInfoHonorAfterUpsertHooks = []UserPersonalInfoHonorHook{}
}

func testUserPersonalInfoHonorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPersonalInfoHonorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userPersonalInfoHonorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPersonalInfoHonorToOneUserPersonalInfoUsingUserPersonalInfo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPersonalInfoHonor
	var foreign UserPersonalInfo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserPersonalInfoID = foreign.UserPersonalInfoID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserPersonalInfo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserPersonalInfoID != foreign.UserPersonalInfoID {
		t.Errorf("want: %v, got %v", foreign.UserPersonalInfoID, check.UserPersonalInfoID)
	}

	slice := UserPersonalInfoHonorSlice{&local}
	if err = local.L.LoadUserPersonalInfo(ctx, tx, false, (*[]*UserPersonalInfoHonor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserPersonalInfo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserPersonalInfo = nil
	if err = local.L.LoadUserPersonalInfo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserPersonalInfo == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserPersonalInfoHonorToOneHonorUsingHonor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPersonalInfoHonor
	var foreign Honor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, honorDBTypes, false, honorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Honor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HonorID = foreign.HonorID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Honor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.HonorID != foreign.HonorID {
		t.Errorf("want: %v, got %v", foreign.HonorID, check.HonorID)
	}

	slice := UserPersonalInfoHonorSlice{&local}
	if err = local.L.LoadHonor(ctx, tx, false, (*[]*UserPersonalInfoHonor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Honor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Honor = nil
	if err = local.L.LoadHonor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Honor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserPersonalInfoHonorToOneSetOpUserPersonalInfoUsingUserPersonalInfo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfoHonor
	var b, c UserPersonalInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoHonorDBTypes, false, strmangle.SetComplement(userPersonalInfoHonorPrimaryKeyColumns, userPersonalInfoHonorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserPersonalInfo{&b, &c} {
		err = a.SetUserPersonalInfo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserPersonalInfo != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPersonalInfoHonors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserPersonalInfoID != x.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserPersonalInfoID))
		reflect.Indirect(reflect.ValueOf(&a.UserPersonalInfoID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserPersonalInfoID != x.UserPersonalInfoID {
			t.Error("foreign key was wrong value", a.UserPersonalInfoID, x.UserPersonalInfoID)
		}
	}
}
func testUserPersonalInfoHonorToOneSetOpHonorUsingHonor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPersonalInfoHonor
	var b, c Honor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPersonalInfoHonorDBTypes, false, strmangle.SetComplement(userPersonalInfoHonorPrimaryKeyColumns, userPersonalInfoHonorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, honorDBTypes, false, strmangle.SetComplement(honorPrimaryKeyColumns, honorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, honorDBTypes, false, strmangle.SetComplement(honorPrimaryKeyColumns, honorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Honor{&b, &c} {
		err = a.SetHonor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Honor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPersonalInfoHonors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HonorID != x.HonorID {
			t.Error("foreign key was wrong value", a.HonorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HonorID))
		reflect.Indirect(reflect.ValueOf(&a.HonorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HonorID != x.HonorID {
			t.Error("foreign key was wrong value", a.HonorID, x.HonorID)
		}
	}
}

func testUserPersonalInfoHonorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPersonalInfoHonorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPersonalInfoHonorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPersonalInfoHonorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPersonalInfoHonors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userPersonalInfoHonorDBTypes = map[string]string{`HonorID`: `int8`, `HonorsPosition`: `int2`, `UserPersonalInfoHonorID`: `int8`, `UserPersonalInfoID`: `int8`}
	_                            = bytes.MinRead
)

func testUserPersonalInfoHonorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userPersonalInfoHonorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userPersonalInfoHonorColumns) == len(userPersonalInfoHonorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserPersonalInfoHonorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userPersonalInfoHonorColumns) == len(userPersonalInfoHonorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPersonalInfoHonorDBTypes, true, userPersonalInfoHonorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userPersonalInfoHonorColumns, userPersonalInfoHonorPrimaryKeyColumns) {
		fields = userPersonalInfoHonorColumns
	} else {
		fields = strmangle.SetComplement(
			userPersonalInfoHonorColumns,
			userPersonalInfoHonorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserPersonalInfoHonorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserPersonalInfoHonorsUpsert(t *testing.T) {
	t.Parallel()

	if len(userPersonalInfoHonorColumns) == len(userPersonalInfoHonorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserPersonalInfoHonor{}
	if err = randomize.Struct(seed, &o, userPersonalInfoHonorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPersonalInfoHonor: %s", err)
	}

	count, err := UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userPersonalInfoHonorDBTypes, false, userPersonalInfoHonorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPersonalInfoHonor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPersonalInfoHonor: %s", err)
	}

	count, err = UserPersonalInfoHonors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
