// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsCountries(t *testing.T) {
	t.Parallel()

	query := PollsCountries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsCountriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsCountriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsCountries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsCountriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsCountrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsCountriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsCountryExists(ctx, tx, o.PollCountryID)
	if err != nil {
		t.Errorf("Unable to check if PollsCountry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsCountryExists to return true, but got false.")
	}
}

func testPollsCountriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsCountryFound, err := FindPollsCountry(ctx, tx, o.PollCountryID)
	if err != nil {
		t.Error(err)
	}

	if pollsCountryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsCountriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsCountries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsCountriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsCountries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsCountriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsCountryOne := &PollsCountry{}
	pollsCountryTwo := &PollsCountry{}
	if err = randomize.Struct(seed, pollsCountryOne, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsCountryTwo, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsCountryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsCountryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsCountries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsCountriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsCountryOne := &PollsCountry{}
	pollsCountryTwo := &PollsCountry{}
	if err = randomize.Struct(seed, pollsCountryOne, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsCountryTwo, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsCountryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsCountryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsCountryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func pollsCountryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCountry) error {
	*o = PollsCountry{}
	return nil
}

func testPollsCountriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsCountry{}
	o := &PollsCountry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsCountry object: %s", err)
	}

	AddPollsCountryHook(boil.BeforeInsertHook, pollsCountryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsCountryBeforeInsertHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.AfterInsertHook, pollsCountryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsCountryAfterInsertHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.AfterSelectHook, pollsCountryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsCountryAfterSelectHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.BeforeUpdateHook, pollsCountryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsCountryBeforeUpdateHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.AfterUpdateHook, pollsCountryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsCountryAfterUpdateHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.BeforeDeleteHook, pollsCountryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsCountryBeforeDeleteHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.AfterDeleteHook, pollsCountryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsCountryAfterDeleteHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.BeforeUpsertHook, pollsCountryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsCountryBeforeUpsertHooks = []PollsCountryHook{}

	AddPollsCountryHook(boil.AfterUpsertHook, pollsCountryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsCountryAfterUpsertHooks = []PollsCountryHook{}
}

func testPollsCountriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsCountriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsCountryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsCountryToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsCountry
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.PollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollID != foreign.PollID {
		t.Errorf("want: %v, got %v", foreign.PollID, check.PollID)
	}

	slice := PollsCountrySlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsCountryToOneCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsCountry
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsCountryDBTypes, false, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CountryID = foreign.CountryID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CountryID != foreign.CountryID {
		t.Errorf("want: %v, got %v", foreign.CountryID, check.CountryID)
	}

	slice := PollsCountrySlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*PollsCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsCountryToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsCountry
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsCountryDBTypes, false, strmangle.SetComplement(pollsCountryPrimaryKeyColumns, pollsCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsCountries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID, x.PollID)
		}
	}
}
func testPollsCountryToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsCountry
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsCountryDBTypes, false, strmangle.SetComplement(pollsCountryPrimaryKeyColumns, pollsCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsCountries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID != x.CountryID {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID != x.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, x.CountryID)
		}
	}
}

func testPollsCountriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsCountriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsCountrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsCountriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsCountries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsCountryDBTypes = map[string]string{`CountryID`: `int8`, `PollCountryID`: `int8`, `PollID`: `int8`}
	_                   = bytes.MinRead
)

func testPollsCountriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsCountryColumns) == len(pollsCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsCountriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsCountryColumns) == len(pollsCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsCountry{}
	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsCountryDBTypes, true, pollsCountryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsCountryColumns, pollsCountryPrimaryKeyColumns) {
		fields = pollsCountryColumns
	} else {
		fields = strmangle.SetComplement(
			pollsCountryColumns,
			pollsCountryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsCountrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsCountriesUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsCountryColumns) == len(pollsCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsCountry{}
	if err = randomize.Struct(seed, &o, pollsCountryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsCountry: %s", err)
	}

	count, err := PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsCountryDBTypes, false, pollsCountryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsCountry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsCountry: %s", err)
	}

	count, err = PollsCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
