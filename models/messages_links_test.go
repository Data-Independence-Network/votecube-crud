// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMessagesLinks(t *testing.T) {
	t.Parallel()

	query := MessagesLinks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMessagesLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMessagesLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MessagesLinks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMessagesLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MessagesLinkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMessagesLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MessagesLinkExists(ctx, tx, o.MessageLinkID)
	if err != nil {
		t.Errorf("Unable to check if MessagesLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MessagesLinkExists to return true, but got false.")
	}
}

func testMessagesLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	messagesLinkFound, err := FindMessagesLink(ctx, tx, o.MessageLinkID)
	if err != nil {
		t.Error(err)
	}

	if messagesLinkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMessagesLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MessagesLinks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMessagesLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MessagesLinks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMessagesLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	messagesLinkOne := &MessagesLink{}
	messagesLinkTwo := &MessagesLink{}
	if err = randomize.Struct(seed, messagesLinkOne, messagesLinkDBTypes, false, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}
	if err = randomize.Struct(seed, messagesLinkTwo, messagesLinkDBTypes, false, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = messagesLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = messagesLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MessagesLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMessagesLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	messagesLinkOne := &MessagesLink{}
	messagesLinkTwo := &MessagesLink{}
	if err = randomize.Struct(seed, messagesLinkOne, messagesLinkDBTypes, false, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}
	if err = randomize.Struct(seed, messagesLinkTwo, messagesLinkDBTypes, false, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = messagesLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = messagesLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func messagesLinkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func messagesLinkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MessagesLink) error {
	*o = MessagesLink{}
	return nil
}

func testMessagesLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MessagesLink{}
	o := &MessagesLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MessagesLink object: %s", err)
	}

	AddMessagesLinkHook(boil.BeforeInsertHook, messagesLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	messagesLinkBeforeInsertHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.AfterInsertHook, messagesLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	messagesLinkAfterInsertHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.AfterSelectHook, messagesLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	messagesLinkAfterSelectHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.BeforeUpdateHook, messagesLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	messagesLinkBeforeUpdateHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.AfterUpdateHook, messagesLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	messagesLinkAfterUpdateHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.BeforeDeleteHook, messagesLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	messagesLinkBeforeDeleteHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.AfterDeleteHook, messagesLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	messagesLinkAfterDeleteHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.BeforeUpsertHook, messagesLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	messagesLinkBeforeUpsertHooks = []MessagesLinkHook{}

	AddMessagesLinkHook(boil.AfterUpsertHook, messagesLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	messagesLinkAfterUpsertHooks = []MessagesLinkHook{}
}

func testMessagesLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMessagesLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(messagesLinkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMessagesLinkToOneMessageUsingMessage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MessagesLink
	var foreign Message

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, messagesLinkDBTypes, false, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, messageDBTypes, false, messageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Message struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MessageID = foreign.MessageID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Message().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MessageID != foreign.MessageID {
		t.Errorf("want: %v, got %v", foreign.MessageID, check.MessageID)
	}

	slice := MessagesLinkSlice{&local}
	if err = local.L.LoadMessage(ctx, tx, false, (*[]*MessagesLink)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Message == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Message = nil
	if err = local.L.LoadMessage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Message == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMessagesLinkToOneLinkUsingLink(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MessagesLink
	var foreign Link

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, messagesLinkDBTypes, false, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Link struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LinkID = foreign.LinkID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Link().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.LinkID != foreign.LinkID {
		t.Errorf("want: %v, got %v", foreign.LinkID, check.LinkID)
	}

	slice := MessagesLinkSlice{&local}
	if err = local.L.LoadLink(ctx, tx, false, (*[]*MessagesLink)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Link == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Link = nil
	if err = local.L.LoadLink(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Link == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMessagesLinkToOneSetOpMessageUsingMessage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MessagesLink
	var b, c Message

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, messagesLinkDBTypes, false, strmangle.SetComplement(messagesLinkPrimaryKeyColumns, messagesLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, messageDBTypes, false, strmangle.SetComplement(messagePrimaryKeyColumns, messageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, messageDBTypes, false, strmangle.SetComplement(messagePrimaryKeyColumns, messageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Message{&b, &c} {
		err = a.SetMessage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Message != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MessagesLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MessageID != x.MessageID {
			t.Error("foreign key was wrong value", a.MessageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MessageID))
		reflect.Indirect(reflect.ValueOf(&a.MessageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MessageID != x.MessageID {
			t.Error("foreign key was wrong value", a.MessageID, x.MessageID)
		}
	}
}
func testMessagesLinkToOneSetOpLinkUsingLink(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MessagesLink
	var b, c Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, messagesLinkDBTypes, false, strmangle.SetComplement(messagesLinkPrimaryKeyColumns, messagesLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Link{&b, &c} {
		err = a.SetLink(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Link != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MessagesLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LinkID != x.LinkID {
			t.Error("foreign key was wrong value", a.LinkID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LinkID))
		reflect.Indirect(reflect.ValueOf(&a.LinkID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LinkID != x.LinkID {
			t.Error("foreign key was wrong value", a.LinkID, x.LinkID)
		}
	}
}

func testMessagesLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMessagesLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MessagesLinkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMessagesLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MessagesLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	messagesLinkDBTypes = map[string]string{`LinkID`: `int8`, `MessageID`: `int8`, `MessageLinkID`: `int8`}
	_                   = bytes.MinRead
)

func testMessagesLinksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(messagesLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(messagesLinkColumns) == len(messagesLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMessagesLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(messagesLinkColumns) == len(messagesLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MessagesLink{}
	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, messagesLinkDBTypes, true, messagesLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(messagesLinkColumns, messagesLinkPrimaryKeyColumns) {
		fields = messagesLinkColumns
	} else {
		fields = strmangle.SetComplement(
			messagesLinkColumns,
			messagesLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MessagesLinkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMessagesLinksUpsert(t *testing.T) {
	t.Parallel()

	if len(messagesLinkColumns) == len(messagesLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MessagesLink{}
	if err = randomize.Struct(seed, &o, messagesLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MessagesLink: %s", err)
	}

	count, err := MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, messagesLinkDBTypes, false, messagesLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MessagesLink struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MessagesLink: %s", err)
	}

	count, err = MessagesLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
