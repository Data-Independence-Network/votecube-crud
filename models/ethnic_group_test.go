// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEthnicGroups(t *testing.T) {
	t.Parallel()

	query := EthnicGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEthnicGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEthnicGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EthnicGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEthnicGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EthnicGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEthnicGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EthnicGroupExists(ctx, tx, o.EthnicGroupID)
	if err != nil {
		t.Errorf("Unable to check if EthnicGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EthnicGroupExists to return true, but got false.")
	}
}

func testEthnicGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ethnicGroupFound, err := FindEthnicGroup(ctx, tx, o.EthnicGroupID)
	if err != nil {
		t.Error(err)
	}

	if ethnicGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEthnicGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EthnicGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEthnicGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EthnicGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEthnicGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ethnicGroupOne := &EthnicGroup{}
	ethnicGroupTwo := &EthnicGroup{}
	if err = randomize.Struct(seed, ethnicGroupOne, ethnicGroupDBTypes, false, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, ethnicGroupTwo, ethnicGroupDBTypes, false, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ethnicGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ethnicGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EthnicGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEthnicGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ethnicGroupOne := &EthnicGroup{}
	ethnicGroupTwo := &EthnicGroup{}
	if err = randomize.Struct(seed, ethnicGroupOne, ethnicGroupDBTypes, false, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, ethnicGroupTwo, ethnicGroupDBTypes, false, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ethnicGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ethnicGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ethnicGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func ethnicGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EthnicGroup) error {
	*o = EthnicGroup{}
	return nil
}

func testEthnicGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EthnicGroup{}
	o := &EthnicGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EthnicGroup object: %s", err)
	}

	AddEthnicGroupHook(boil.BeforeInsertHook, ethnicGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ethnicGroupBeforeInsertHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.AfterInsertHook, ethnicGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ethnicGroupAfterInsertHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.AfterSelectHook, ethnicGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ethnicGroupAfterSelectHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.BeforeUpdateHook, ethnicGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ethnicGroupBeforeUpdateHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.AfterUpdateHook, ethnicGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ethnicGroupAfterUpdateHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.BeforeDeleteHook, ethnicGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ethnicGroupBeforeDeleteHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.AfterDeleteHook, ethnicGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ethnicGroupAfterDeleteHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.BeforeUpsertHook, ethnicGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ethnicGroupBeforeUpsertHooks = []EthnicGroupHook{}

	AddEthnicGroupHook(boil.AfterUpsertHook, ethnicGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ethnicGroupAfterUpsertHooks = []EthnicGroupHook{}
}

func testEthnicGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEthnicGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ethnicGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEthnicGroupToManyEthnicGroupCountries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EthnicGroup
	var b, c EthnicGroupCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ethnicGroupCountryDBTypes, false, ethnicGroupCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ethnicGroupCountryDBTypes, false, ethnicGroupCountryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EthnicGroupID = a.EthnicGroupID
	c.EthnicGroupID = a.EthnicGroupID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	ethnicGroupCountry, err := a.EthnicGroupCountries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ethnicGroupCountry {
		if v.EthnicGroupID == b.EthnicGroupID {
			bFound = true
		}
		if v.EthnicGroupID == c.EthnicGroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EthnicGroupSlice{&a}
	if err = a.L.LoadEthnicGroupCountries(ctx, tx, false, (*[]*EthnicGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EthnicGroupCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EthnicGroupCountries = nil
	if err = a.L.LoadEthnicGroupCountries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EthnicGroupCountries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ethnicGroupCountry)
	}
}

func testEthnicGroupToManyEthnicSubgroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EthnicGroup
	var b, c EthnicSubgroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ethnicSubgroupDBTypes, false, ethnicSubgroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ethnicSubgroupDBTypes, false, ethnicSubgroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EthnicGroupID = a.EthnicGroupID
	c.EthnicGroupID = a.EthnicGroupID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	ethnicSubgroup, err := a.EthnicSubgroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ethnicSubgroup {
		if v.EthnicGroupID == b.EthnicGroupID {
			bFound = true
		}
		if v.EthnicGroupID == c.EthnicGroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EthnicGroupSlice{&a}
	if err = a.L.LoadEthnicSubgroups(ctx, tx, false, (*[]*EthnicGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EthnicSubgroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EthnicSubgroups = nil
	if err = a.L.LoadEthnicSubgroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EthnicSubgroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ethnicSubgroup)
	}
}

func testEthnicGroupToManyAddOpEthnicGroupCountries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EthnicGroup
	var b, c, d, e EthnicGroupCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ethnicGroupDBTypes, false, strmangle.SetComplement(ethnicGroupPrimaryKeyColumns, ethnicGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EthnicGroupCountry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ethnicGroupCountryDBTypes, false, strmangle.SetComplement(ethnicGroupCountryPrimaryKeyColumns, ethnicGroupCountryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EthnicGroupCountry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEthnicGroupCountries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.EthnicGroupID != first.EthnicGroupID {
			t.Error("foreign key was wrong value", a.EthnicGroupID, first.EthnicGroupID)
		}
		if a.EthnicGroupID != second.EthnicGroupID {
			t.Error("foreign key was wrong value", a.EthnicGroupID, second.EthnicGroupID)
		}

		if first.R.EthnicGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.EthnicGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EthnicGroupCountries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EthnicGroupCountries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EthnicGroupCountries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEthnicGroupToManyAddOpEthnicSubgroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EthnicGroup
	var b, c, d, e EthnicSubgroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ethnicGroupDBTypes, false, strmangle.SetComplement(ethnicGroupPrimaryKeyColumns, ethnicGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EthnicSubgroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ethnicSubgroupDBTypes, false, strmangle.SetComplement(ethnicSubgroupPrimaryKeyColumns, ethnicSubgroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EthnicSubgroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEthnicSubgroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.EthnicGroupID != first.EthnicGroupID {
			t.Error("foreign key was wrong value", a.EthnicGroupID, first.EthnicGroupID)
		}
		if a.EthnicGroupID != second.EthnicGroupID {
			t.Error("foreign key was wrong value", a.EthnicGroupID, second.EthnicGroupID)
		}

		if first.R.EthnicGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.EthnicGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EthnicSubgroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EthnicSubgroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EthnicSubgroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEthnicGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEthnicGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EthnicGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEthnicGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EthnicGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ethnicGroupDBTypes = map[string]string{`EthnicGroupCode`: `varchar`, `EthnicGroupID`: `int8`, `EthnicGroupName`: `varchar`}
	_                  = bytes.MinRead
)

func testEthnicGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ethnicGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ethnicGroupColumns) == len(ethnicGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEthnicGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ethnicGroupColumns) == len(ethnicGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EthnicGroup{}
	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ethnicGroupDBTypes, true, ethnicGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ethnicGroupColumns, ethnicGroupPrimaryKeyColumns) {
		fields = ethnicGroupColumns
	} else {
		fields = strmangle.SetComplement(
			ethnicGroupColumns,
			ethnicGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EthnicGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEthnicGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(ethnicGroupColumns) == len(ethnicGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EthnicGroup{}
	if err = randomize.Struct(seed, &o, ethnicGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EthnicGroup: %s", err)
	}

	count, err := EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ethnicGroupDBTypes, false, ethnicGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EthnicGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EthnicGroup: %s", err)
	}

	count, err = EthnicGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
