// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EthnicSubgroup is an object representing the database table.
type EthnicSubgroup struct {
	EthnicSubgroupID   int64  `boil:"ethnic_subgroup_id" json:"ethnic_subgroup_id" toml:"ethnic_subgroup_id" yaml:"ethnic_subgroup_id"`
	EthnicSubgroupCode string `boil:"ethnic_subgroup_code" json:"ethnic_subgroup_code" toml:"ethnic_subgroup_code" yaml:"ethnic_subgroup_code"`
	EthnicSubgroupName string `boil:"ethnic_subgroup_name" json:"ethnic_subgroup_name" toml:"ethnic_subgroup_name" yaml:"ethnic_subgroup_name"`
	EthnicGroupID      int64  `boil:"ethnic_group_id" json:"ethnic_group_id" toml:"ethnic_group_id" yaml:"ethnic_group_id"`

	R *ethnicSubgroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ethnicSubgroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EthnicSubgroupColumns = struct {
	EthnicSubgroupID   string
	EthnicSubgroupCode string
	EthnicSubgroupName string
	EthnicGroupID      string
}{
	EthnicSubgroupID:   "ethnic_subgroup_id",
	EthnicSubgroupCode: "ethnic_subgroup_code",
	EthnicSubgroupName: "ethnic_subgroup_name",
	EthnicGroupID:      "ethnic_group_id",
}

// EthnicSubgroupRels is where relationship names are stored.
var EthnicSubgroupRels = struct {
	EthnicGroup            string
	UserAccountEthnicities string
}{
	EthnicGroup:            "EthnicGroup",
	UserAccountEthnicities: "UserAccountEthnicities",
}

// ethnicSubgroupR is where relationships are stored.
type ethnicSubgroupR struct {
	EthnicGroup            *EthnicGroup
	UserAccountEthnicities UserAccountEthnicitySlice
}

// NewStruct creates a new relationship struct
func (*ethnicSubgroupR) NewStruct() *ethnicSubgroupR {
	return &ethnicSubgroupR{}
}

// ethnicSubgroupL is where Load methods for each relationship are stored.
type ethnicSubgroupL struct{}

var (
	ethnicSubgroupColumns               = []string{"ethnic_subgroup_id", "ethnic_subgroup_code", "ethnic_subgroup_name", "ethnic_group_id"}
	ethnicSubgroupColumnsWithoutDefault = []string{"ethnic_subgroup_id", "ethnic_subgroup_code", "ethnic_subgroup_name", "ethnic_group_id"}
	ethnicSubgroupColumnsWithDefault    = []string{}
	ethnicSubgroupPrimaryKeyColumns     = []string{"ethnic_subgroup_id"}
)

type (
	// EthnicSubgroupSlice is an alias for a slice of pointers to EthnicSubgroup.
	// This should generally be used opposed to []EthnicSubgroup.
	EthnicSubgroupSlice []*EthnicSubgroup
	// EthnicSubgroupHook is the signature for custom EthnicSubgroup hook methods
	EthnicSubgroupHook func(context.Context, boil.ContextExecutor, *EthnicSubgroup) error

	ethnicSubgroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ethnicSubgroupType                 = reflect.TypeOf(&EthnicSubgroup{})
	ethnicSubgroupMapping              = queries.MakeStructMapping(ethnicSubgroupType)
	ethnicSubgroupPrimaryKeyMapping, _ = queries.BindMapping(ethnicSubgroupType, ethnicSubgroupMapping, ethnicSubgroupPrimaryKeyColumns)
	ethnicSubgroupInsertCacheMut       sync.RWMutex
	ethnicSubgroupInsertCache          = make(map[string]insertCache)
	ethnicSubgroupUpdateCacheMut       sync.RWMutex
	ethnicSubgroupUpdateCache          = make(map[string]updateCache)
	ethnicSubgroupUpsertCacheMut       sync.RWMutex
	ethnicSubgroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var ethnicSubgroupBeforeInsertHooks []EthnicSubgroupHook
var ethnicSubgroupBeforeUpdateHooks []EthnicSubgroupHook
var ethnicSubgroupBeforeDeleteHooks []EthnicSubgroupHook
var ethnicSubgroupBeforeUpsertHooks []EthnicSubgroupHook

var ethnicSubgroupAfterInsertHooks []EthnicSubgroupHook
var ethnicSubgroupAfterSelectHooks []EthnicSubgroupHook
var ethnicSubgroupAfterUpdateHooks []EthnicSubgroupHook
var ethnicSubgroupAfterDeleteHooks []EthnicSubgroupHook
var ethnicSubgroupAfterUpsertHooks []EthnicSubgroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EthnicSubgroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EthnicSubgroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EthnicSubgroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EthnicSubgroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EthnicSubgroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EthnicSubgroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EthnicSubgroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EthnicSubgroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EthnicSubgroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range ethnicSubgroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEthnicSubgroupHook registers your hook function for all future operations.
func AddEthnicSubgroupHook(hookPoint boil.HookPoint, ethnicSubgroupHook EthnicSubgroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ethnicSubgroupBeforeInsertHooks = append(ethnicSubgroupBeforeInsertHooks, ethnicSubgroupHook)
	case boil.BeforeUpdateHook:
		ethnicSubgroupBeforeUpdateHooks = append(ethnicSubgroupBeforeUpdateHooks, ethnicSubgroupHook)
	case boil.BeforeDeleteHook:
		ethnicSubgroupBeforeDeleteHooks = append(ethnicSubgroupBeforeDeleteHooks, ethnicSubgroupHook)
	case boil.BeforeUpsertHook:
		ethnicSubgroupBeforeUpsertHooks = append(ethnicSubgroupBeforeUpsertHooks, ethnicSubgroupHook)
	case boil.AfterInsertHook:
		ethnicSubgroupAfterInsertHooks = append(ethnicSubgroupAfterInsertHooks, ethnicSubgroupHook)
	case boil.AfterSelectHook:
		ethnicSubgroupAfterSelectHooks = append(ethnicSubgroupAfterSelectHooks, ethnicSubgroupHook)
	case boil.AfterUpdateHook:
		ethnicSubgroupAfterUpdateHooks = append(ethnicSubgroupAfterUpdateHooks, ethnicSubgroupHook)
	case boil.AfterDeleteHook:
		ethnicSubgroupAfterDeleteHooks = append(ethnicSubgroupAfterDeleteHooks, ethnicSubgroupHook)
	case boil.AfterUpsertHook:
		ethnicSubgroupAfterUpsertHooks = append(ethnicSubgroupAfterUpsertHooks, ethnicSubgroupHook)
	}
}

// One returns a single ethnicSubgroup record from the query.
func (q ethnicSubgroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EthnicSubgroup, error) {
	o := &EthnicSubgroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ethnic_subgroup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EthnicSubgroup records from the query.
func (q ethnicSubgroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (EthnicSubgroupSlice, error) {
	var o []*EthnicSubgroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EthnicSubgroup slice")
	}

	if len(ethnicSubgroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EthnicSubgroup records in the query.
func (q ethnicSubgroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ethnic_subgroup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ethnicSubgroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ethnic_subgroup exists")
	}

	return count > 0, nil
}

// EthnicGroup pointed to by the foreign key.
func (o *EthnicSubgroup) EthnicGroup(mods ...qm.QueryMod) ethnicGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("ethnic_group_id=?", o.EthnicGroupID),
	}

	queryMods = append(queryMods, mods...)

	query := EthnicGroups(queryMods...)
	queries.SetFrom(query.Query, "\"ethnic_group\"")

	return query
}

// UserAccountEthnicities retrieves all the user_account_ethnicity's UserAccountEthnicities with an executor.
func (o *EthnicSubgroup) UserAccountEthnicities(mods ...qm.QueryMod) userAccountEthnicityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_account_ethnicity\".\"ethnic_subgroup_id\"=?", o.EthnicSubgroupID),
	)

	query := UserAccountEthnicities(queryMods...)
	queries.SetFrom(query.Query, "\"user_account_ethnicity\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_account_ethnicity\".*"})
	}

	return query
}

// LoadEthnicGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ethnicSubgroupL) LoadEthnicGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEthnicSubgroup interface{}, mods queries.Applicator) error {
	var slice []*EthnicSubgroup
	var object *EthnicSubgroup

	if singular {
		object = maybeEthnicSubgroup.(*EthnicSubgroup)
	} else {
		slice = *maybeEthnicSubgroup.(*[]*EthnicSubgroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ethnicSubgroupR{}
		}
		args = append(args, object.EthnicGroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ethnicSubgroupR{}
			}

			for _, a := range args {
				if a == obj.EthnicGroupID {
					continue Outer
				}
			}

			args = append(args, obj.EthnicGroupID)
		}
	}

	query := NewQuery(qm.From(`ethnic_group`), qm.WhereIn(`ethnic_group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EthnicGroup")
	}

	var resultSlice []*EthnicGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EthnicGroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ethnic_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ethnic_group")
	}

	if len(ethnicSubgroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EthnicGroup = foreign
		if foreign.R == nil {
			foreign.R = &ethnicGroupR{}
		}
		foreign.R.EthnicSubgroups = append(foreign.R.EthnicSubgroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EthnicGroupID == foreign.EthnicGroupID {
				local.R.EthnicGroup = foreign
				if foreign.R == nil {
					foreign.R = &ethnicGroupR{}
				}
				foreign.R.EthnicSubgroups = append(foreign.R.EthnicSubgroups, local)
				break
			}
		}
	}

	return nil
}

// LoadUserAccountEthnicities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ethnicSubgroupL) LoadUserAccountEthnicities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEthnicSubgroup interface{}, mods queries.Applicator) error {
	var slice []*EthnicSubgroup
	var object *EthnicSubgroup

	if singular {
		object = maybeEthnicSubgroup.(*EthnicSubgroup)
	} else {
		slice = *maybeEthnicSubgroup.(*[]*EthnicSubgroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ethnicSubgroupR{}
		}
		args = append(args, object.EthnicSubgroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ethnicSubgroupR{}
			}

			for _, a := range args {
				if a == obj.EthnicSubgroupID {
					continue Outer
				}
			}

			args = append(args, obj.EthnicSubgroupID)
		}
	}

	query := NewQuery(qm.From(`user_account_ethnicity`), qm.WhereIn(`ethnic_subgroup_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_account_ethnicity")
	}

	var resultSlice []*UserAccountEthnicity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_account_ethnicity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_account_ethnicity")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account_ethnicity")
	}

	if len(userAccountEthnicityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAccountEthnicities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAccountEthnicityR{}
			}
			foreign.R.EthnicSubgroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EthnicSubgroupID == foreign.EthnicSubgroupID {
				local.R.UserAccountEthnicities = append(local.R.UserAccountEthnicities, foreign)
				if foreign.R == nil {
					foreign.R = &userAccountEthnicityR{}
				}
				foreign.R.EthnicSubgroup = local
				break
			}
		}
	}

	return nil
}

// SetEthnicGroup of the ethnicSubgroup to the related item.
// Sets o.R.EthnicGroup to related.
// Adds o to related.R.EthnicSubgroups.
func (o *EthnicSubgroup) SetEthnicGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *EthnicGroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ethnic_subgroup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ethnic_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, ethnicSubgroupPrimaryKeyColumns),
	)
	values := []interface{}{related.EthnicGroupID, o.EthnicSubgroupID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EthnicGroupID = related.EthnicGroupID
	if o.R == nil {
		o.R = &ethnicSubgroupR{
			EthnicGroup: related,
		}
	} else {
		o.R.EthnicGroup = related
	}

	if related.R == nil {
		related.R = &ethnicGroupR{
			EthnicSubgroups: EthnicSubgroupSlice{o},
		}
	} else {
		related.R.EthnicSubgroups = append(related.R.EthnicSubgroups, o)
	}

	return nil
}

// AddUserAccountEthnicities adds the given related objects to the existing relationships
// of the ethnic_subgroup, optionally inserting them as new records.
// Appends related to o.R.UserAccountEthnicities.
// Sets related.R.EthnicSubgroup appropriately.
func (o *EthnicSubgroup) AddUserAccountEthnicities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAccountEthnicity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EthnicSubgroupID = o.EthnicSubgroupID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_account_ethnicity\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ethnic_subgroup_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAccountEthnicityPrimaryKeyColumns),
			)
			values := []interface{}{o.EthnicSubgroupID, rel.UserAccountEthnicityID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EthnicSubgroupID = o.EthnicSubgroupID
		}
	}

	if o.R == nil {
		o.R = &ethnicSubgroupR{
			UserAccountEthnicities: related,
		}
	} else {
		o.R.UserAccountEthnicities = append(o.R.UserAccountEthnicities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAccountEthnicityR{
				EthnicSubgroup: o,
			}
		} else {
			rel.R.EthnicSubgroup = o
		}
	}
	return nil
}

// EthnicSubgroups retrieves all the records using an executor.
func EthnicSubgroups(mods ...qm.QueryMod) ethnicSubgroupQuery {
	mods = append(mods, qm.From("\"ethnic_subgroup\""))
	return ethnicSubgroupQuery{NewQuery(mods...)}
}

// FindEthnicSubgroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEthnicSubgroup(ctx context.Context, exec boil.ContextExecutor, ethnicSubgroupID int64, selectCols ...string) (*EthnicSubgroup, error) {
	ethnicSubgroupObj := &EthnicSubgroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ethnic_subgroup\" where \"ethnic_subgroup_id\"=$1", sel,
	)

	q := queries.Raw(query, ethnicSubgroupID)

	err := q.Bind(ctx, exec, ethnicSubgroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ethnic_subgroup")
	}

	return ethnicSubgroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EthnicSubgroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ethnic_subgroup provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ethnicSubgroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ethnicSubgroupInsertCacheMut.RLock()
	cache, cached := ethnicSubgroupInsertCache[key]
	ethnicSubgroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ethnicSubgroupColumns,
			ethnicSubgroupColumnsWithDefault,
			ethnicSubgroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ethnicSubgroupType, ethnicSubgroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ethnicSubgroupType, ethnicSubgroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ethnic_subgroup\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ethnic_subgroup\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ethnic_subgroup")
	}

	if !cached {
		ethnicSubgroupInsertCacheMut.Lock()
		ethnicSubgroupInsertCache[key] = cache
		ethnicSubgroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EthnicSubgroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EthnicSubgroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ethnicSubgroupUpdateCacheMut.RLock()
	cache, cached := ethnicSubgroupUpdateCache[key]
	ethnicSubgroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ethnicSubgroupColumns,
			ethnicSubgroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ethnic_subgroup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ethnic_subgroup\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ethnicSubgroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ethnicSubgroupType, ethnicSubgroupMapping, append(wl, ethnicSubgroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ethnic_subgroup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ethnic_subgroup")
	}

	if !cached {
		ethnicSubgroupUpdateCacheMut.Lock()
		ethnicSubgroupUpdateCache[key] = cache
		ethnicSubgroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ethnicSubgroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ethnic_subgroup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ethnic_subgroup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EthnicSubgroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicSubgroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ethnic_subgroup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ethnicSubgroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ethnicSubgroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ethnicSubgroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EthnicSubgroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ethnic_subgroup provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ethnicSubgroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ethnicSubgroupUpsertCacheMut.RLock()
	cache, cached := ethnicSubgroupUpsertCache[key]
	ethnicSubgroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ethnicSubgroupColumns,
			ethnicSubgroupColumnsWithDefault,
			ethnicSubgroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ethnicSubgroupColumns,
			ethnicSubgroupPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ethnic_subgroup, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ethnicSubgroupPrimaryKeyColumns))
			copy(conflict, ethnicSubgroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"ethnic_subgroup\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ethnicSubgroupType, ethnicSubgroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ethnicSubgroupType, ethnicSubgroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ethnic_subgroup")
	}

	if !cached {
		ethnicSubgroupUpsertCacheMut.Lock()
		ethnicSubgroupUpsertCache[key] = cache
		ethnicSubgroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EthnicSubgroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EthnicSubgroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EthnicSubgroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ethnicSubgroupPrimaryKeyMapping)
	sql := "DELETE FROM \"ethnic_subgroup\" WHERE \"ethnic_subgroup_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ethnic_subgroup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ethnic_subgroup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ethnicSubgroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ethnicSubgroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ethnic_subgroup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ethnic_subgroup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EthnicSubgroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EthnicSubgroup slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(ethnicSubgroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicSubgroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ethnic_subgroup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ethnicSubgroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ethnicSubgroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ethnic_subgroup")
	}

	if len(ethnicSubgroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EthnicSubgroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEthnicSubgroup(ctx, exec, o.EthnicSubgroupID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EthnicSubgroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EthnicSubgroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ethnicSubgroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ethnic_subgroup\".* FROM \"ethnic_subgroup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ethnicSubgroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EthnicSubgroupSlice")
	}

	*o = slice

	return nil
}

// EthnicSubgroupExists checks if the EthnicSubgroup row exists.
func EthnicSubgroupExists(ctx context.Context, exec boil.ContextExecutor, ethnicSubgroupID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ethnic_subgroup\" where \"ethnic_subgroup_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ethnicSubgroupID)
	}

	row := exec.QueryRowContext(ctx, sql, ethnicSubgroupID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ethnic_subgroup exists")
	}

	return exists, nil
}
