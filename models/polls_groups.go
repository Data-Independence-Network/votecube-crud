// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollsGroup is an object representing the database table.
type PollsGroup struct {
	PollGroupID          int64     `boil:"poll_group_id" json:"poll_group_id" toml:"poll_group_id" yaml:"poll_group_id"`
	PollGroupName        string    `boil:"poll_group_name" json:"poll_group_name" toml:"poll_group_name" yaml:"poll_group_name"`
	PollGroupDescription string    `boil:"poll_group_description" json:"poll_group_description" toml:"poll_group_description" yaml:"poll_group_description"`
	UserAccountID        int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	ThemeID              int64     `boil:"theme_id" json:"theme_id" toml:"theme_id" yaml:"theme_id"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *pollsGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollsGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollsGroupColumns = struct {
	PollGroupID          string
	PollGroupName        string
	PollGroupDescription string
	UserAccountID        string
	ThemeID              string
	CreatedAt            string
}{
	PollGroupID:          "poll_group_id",
	PollGroupName:        "poll_group_name",
	PollGroupDescription: "poll_group_description",
	UserAccountID:        "user_account_id",
	ThemeID:              "theme_id",
	CreatedAt:            "created_at",
}

// PollsGroupRels is where relationship names are stored.
var PollsGroupRels = struct {
	UserAccount               string
	Theme                     string
	PollGroupPollsPollsGroups string
}{
	UserAccount:               "UserAccount",
	Theme:                     "Theme",
	PollGroupPollsPollsGroups: "PollGroupPollsPollsGroups",
}

// pollsGroupR is where relationships are stored.
type pollsGroupR struct {
	UserAccount               *UserAccount
	Theme                     *Theme
	PollGroupPollsPollsGroups PollsPollsGroupSlice
}

// NewStruct creates a new relationship struct
func (*pollsGroupR) NewStruct() *pollsGroupR {
	return &pollsGroupR{}
}

// pollsGroupL is where Load methods for each relationship are stored.
type pollsGroupL struct{}

var (
	pollsGroupColumns               = []string{"poll_group_id", "poll_group_name", "poll_group_description", "user_account_id", "theme_id", "created_at"}
	pollsGroupColumnsWithoutDefault = []string{"poll_group_id", "poll_group_name", "poll_group_description", "user_account_id", "theme_id", "created_at"}
	pollsGroupColumnsWithDefault    = []string{}
	pollsGroupPrimaryKeyColumns     = []string{"poll_group_id"}
)

type (
	// PollsGroupSlice is an alias for a slice of pointers to PollsGroup.
	// This should generally be used opposed to []PollsGroup.
	PollsGroupSlice []*PollsGroup
	// PollsGroupHook is the signature for custom PollsGroup hook methods
	PollsGroupHook func(context.Context, boil.ContextExecutor, *PollsGroup) error

	pollsGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollsGroupType                 = reflect.TypeOf(&PollsGroup{})
	pollsGroupMapping              = queries.MakeStructMapping(pollsGroupType)
	pollsGroupPrimaryKeyMapping, _ = queries.BindMapping(pollsGroupType, pollsGroupMapping, pollsGroupPrimaryKeyColumns)
	pollsGroupInsertCacheMut       sync.RWMutex
	pollsGroupInsertCache          = make(map[string]insertCache)
	pollsGroupUpdateCacheMut       sync.RWMutex
	pollsGroupUpdateCache          = make(map[string]updateCache)
	pollsGroupUpsertCacheMut       sync.RWMutex
	pollsGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollsGroupBeforeInsertHooks []PollsGroupHook
var pollsGroupBeforeUpdateHooks []PollsGroupHook
var pollsGroupBeforeDeleteHooks []PollsGroupHook
var pollsGroupBeforeUpsertHooks []PollsGroupHook

var pollsGroupAfterInsertHooks []PollsGroupHook
var pollsGroupAfterSelectHooks []PollsGroupHook
var pollsGroupAfterUpdateHooks []PollsGroupHook
var pollsGroupAfterDeleteHooks []PollsGroupHook
var pollsGroupAfterUpsertHooks []PollsGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PollsGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PollsGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PollsGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PollsGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PollsGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PollsGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PollsGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PollsGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PollsGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollsGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollsGroupHook registers your hook function for all future operations.
func AddPollsGroupHook(hookPoint boil.HookPoint, pollsGroupHook PollsGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollsGroupBeforeInsertHooks = append(pollsGroupBeforeInsertHooks, pollsGroupHook)
	case boil.BeforeUpdateHook:
		pollsGroupBeforeUpdateHooks = append(pollsGroupBeforeUpdateHooks, pollsGroupHook)
	case boil.BeforeDeleteHook:
		pollsGroupBeforeDeleteHooks = append(pollsGroupBeforeDeleteHooks, pollsGroupHook)
	case boil.BeforeUpsertHook:
		pollsGroupBeforeUpsertHooks = append(pollsGroupBeforeUpsertHooks, pollsGroupHook)
	case boil.AfterInsertHook:
		pollsGroupAfterInsertHooks = append(pollsGroupAfterInsertHooks, pollsGroupHook)
	case boil.AfterSelectHook:
		pollsGroupAfterSelectHooks = append(pollsGroupAfterSelectHooks, pollsGroupHook)
	case boil.AfterUpdateHook:
		pollsGroupAfterUpdateHooks = append(pollsGroupAfterUpdateHooks, pollsGroupHook)
	case boil.AfterDeleteHook:
		pollsGroupAfterDeleteHooks = append(pollsGroupAfterDeleteHooks, pollsGroupHook)
	case boil.AfterUpsertHook:
		pollsGroupAfterUpsertHooks = append(pollsGroupAfterUpsertHooks, pollsGroupHook)
	}
}

// One returns a single pollsGroup record from the query.
func (q pollsGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollsGroup, error) {
	o := &PollsGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls_groups")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PollsGroup records from the query.
func (q pollsGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollsGroupSlice, error) {
	var o []*PollsGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollsGroup slice")
	}

	if len(pollsGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PollsGroup records in the query.
func (q pollsGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pollsGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls_groups exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *PollsGroup) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Theme pointed to by the foreign key.
func (o *PollsGroup) Theme(mods ...qm.QueryMod) themeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("theme_id=?", o.ThemeID),
	}

	queryMods = append(queryMods, mods...)

	query := Themes(queryMods...)
	queries.SetFrom(query.Query, "\"themes\"")

	return query
}

// PollGroupPollsPollsGroups retrieves all the polls_polls_group's PollsPollsGroups with an executor via poll_group_id column.
func (o *PollsGroup) PollGroupPollsPollsGroups(mods ...qm.QueryMod) pollsPollsGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_polls_groups\".\"poll_group_id\"=?", o.PollGroupID),
	)

	query := PollsPollsGroups(queryMods...)
	queries.SetFrom(query.Query, "\"polls_polls_groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_polls_groups\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsGroupL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsGroup interface{}, mods queries.Applicator) error {
	var slice []*PollsGroup
	var object *PollsGroup

	if singular {
		object = maybePollsGroup.(*PollsGroup)
	} else {
		slice = *maybePollsGroup.(*[]*PollsGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsGroupR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsGroupR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(pollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.PollsGroups = append(foreign.R.PollsGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.PollsGroups = append(foreign.R.PollsGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadTheme allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollsGroupL) LoadTheme(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsGroup interface{}, mods queries.Applicator) error {
	var slice []*PollsGroup
	var object *PollsGroup

	if singular {
		object = maybePollsGroup.(*PollsGroup)
	} else {
		slice = *maybePollsGroup.(*[]*PollsGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsGroupR{}
		}
		args = append(args, object.ThemeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsGroupR{}
			}

			for _, a := range args {
				if a == obj.ThemeID {
					continue Outer
				}
			}

			args = append(args, obj.ThemeID)
		}
	}

	query := NewQuery(qm.From(`themes`), qm.WhereIn(`theme_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Theme")
	}

	var resultSlice []*Theme
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Theme")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for themes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for themes")
	}

	if len(pollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Theme = foreign
		if foreign.R == nil {
			foreign.R = &themeR{}
		}
		foreign.R.PollsGroups = append(foreign.R.PollsGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ThemeID == foreign.ThemeID {
				local.R.Theme = foreign
				if foreign.R == nil {
					foreign.R = &themeR{}
				}
				foreign.R.PollsGroups = append(foreign.R.PollsGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadPollGroupPollsPollsGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollsGroupL) LoadPollGroupPollsPollsGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollsGroup interface{}, mods queries.Applicator) error {
	var slice []*PollsGroup
	var object *PollsGroup

	if singular {
		object = maybePollsGroup.(*PollsGroup)
	} else {
		slice = *maybePollsGroup.(*[]*PollsGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollsGroupR{}
		}
		args = append(args, object.PollGroupID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollsGroupR{}
			}

			for _, a := range args {
				if a == obj.PollGroupID {
					continue Outer
				}
			}

			args = append(args, obj.PollGroupID)
		}
	}

	query := NewQuery(qm.From(`polls_polls_groups`), qm.WhereIn(`poll_group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_polls_groups")
	}

	var resultSlice []*PollsPollsGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_polls_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_polls_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_polls_groups")
	}

	if len(pollsPollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollGroupPollsPollsGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsPollsGroupR{}
			}
			foreign.R.PollGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollGroupID == foreign.PollGroupID {
				local.R.PollGroupPollsPollsGroups = append(local.R.PollGroupPollsPollsGroups, foreign)
				if foreign.R == nil {
					foreign.R = &pollsPollsGroupR{}
				}
				foreign.R.PollGroup = local
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the pollsGroup to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.PollsGroups.
func (o *PollsGroup) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.PollGroupID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &pollsGroupR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			PollsGroups: PollsGroupSlice{o},
		}
	} else {
		related.R.PollsGroups = append(related.R.PollsGroups, o)
	}

	return nil
}

// SetTheme of the pollsGroup to the related item.
// Sets o.R.Theme to related.
// Adds o to related.R.PollsGroups.
func (o *PollsGroup) SetTheme(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Theme) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"theme_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollsGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ThemeID, o.PollGroupID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ThemeID = related.ThemeID
	if o.R == nil {
		o.R = &pollsGroupR{
			Theme: related,
		}
	} else {
		o.R.Theme = related
	}

	if related.R == nil {
		related.R = &themeR{
			PollsGroups: PollsGroupSlice{o},
		}
	} else {
		related.R.PollsGroups = append(related.R.PollsGroups, o)
	}

	return nil
}

// AddPollGroupPollsPollsGroups adds the given related objects to the existing relationships
// of the polls_group, optionally inserting them as new records.
// Appends related to o.R.PollGroupPollsPollsGroups.
// Sets related.R.PollGroup appropriately.
func (o *PollsGroup) AddPollGroupPollsPollsGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsPollsGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollGroupID = o.PollGroupID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_polls_groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsPollsGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.PollGroupID, rel.PollPollGroupID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollGroupID = o.PollGroupID
		}
	}

	if o.R == nil {
		o.R = &pollsGroupR{
			PollGroupPollsPollsGroups: related,
		}
	} else {
		o.R.PollGroupPollsPollsGroups = append(o.R.PollGroupPollsPollsGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsPollsGroupR{
				PollGroup: o,
			}
		} else {
			rel.R.PollGroup = o
		}
	}
	return nil
}

// PollsGroups retrieves all the records using an executor.
func PollsGroups(mods ...qm.QueryMod) pollsGroupQuery {
	mods = append(mods, qm.From("\"polls_groups\""))
	return pollsGroupQuery{NewQuery(mods...)}
}

// FindPollsGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollsGroup(ctx context.Context, exec boil.ContextExecutor, pollGroupID int64, selectCols ...string) (*PollsGroup, error) {
	pollsGroupObj := &PollsGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls_groups\" where \"poll_group_id\"=$1", sel,
	)

	q := queries.Raw(query, pollGroupID)

	err := q.Bind(ctx, exec, pollsGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls_groups")
	}

	return pollsGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollsGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_groups provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollsGroupInsertCacheMut.RLock()
	cache, cached := pollsGroupInsertCache[key]
	pollsGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollsGroupColumns,
			pollsGroupColumnsWithDefault,
			pollsGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollsGroupType, pollsGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollsGroupType, pollsGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls_groups")
	}

	if !cached {
		pollsGroupInsertCacheMut.Lock()
		pollsGroupInsertCache[key] = cache
		pollsGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PollsGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollsGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollsGroupUpdateCacheMut.RLock()
	cache, cached := pollsGroupUpdateCache[key]
	pollsGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollsGroupColumns,
			pollsGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollsGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollsGroupType, pollsGroupMapping, append(wl, pollsGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls_groups")
	}

	if !cached {
		pollsGroupUpdateCacheMut.Lock()
		pollsGroupUpdateCache[key] = cache
		pollsGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollsGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls_groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollsGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollsGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollsGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollsGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollsGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls_groups provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollsGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollsGroupUpsertCacheMut.RLock()
	cache, cached := pollsGroupUpsertCache[key]
	pollsGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollsGroupColumns,
			pollsGroupColumnsWithDefault,
			pollsGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollsGroupColumns,
			pollsGroupPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollsGroupPrimaryKeyColumns))
			copy(conflict, pollsGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollsGroupType, pollsGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollsGroupType, pollsGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls_groups")
	}

	if !cached {
		pollsGroupUpsertCacheMut.Lock()
		pollsGroupUpsertCache[key] = cache
		pollsGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PollsGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollsGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollsGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"polls_groups\" WHERE \"poll_group_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls_groups")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollsGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollsGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollsGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollsGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollsGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollsGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls_groups")
	}

	if len(pollsGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollsGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollsGroup(ctx, exec, o.PollGroupID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollsGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollsGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollsGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls_groups\".* FROM \"polls_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollsGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollsGroupSlice")
	}

	*o = slice

	return nil
}

// PollsGroupExists checks if the PollsGroup row exists.
func PollsGroupExists(ctx context.Context, exec boil.ContextExecutor, pollGroupID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls_groups\" where \"poll_group_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollGroupID)
	}

	row := exec.QueryRowContext(ctx, sql, pollGroupID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls_groups exists")
	}

	return exists, nil
}
