// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPersonTypes(t *testing.T) {
	t.Parallel()

	query := PersonTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPersonTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PersonTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PersonTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PersonTypeExists(ctx, tx, o.PersonTypeID)
	if err != nil {
		t.Errorf("Unable to check if PersonType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PersonTypeExists to return true, but got false.")
	}
}

func testPersonTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	personTypeFound, err := FindPersonType(ctx, tx, o.PersonTypeID)
	if err != nil {
		t.Error(err)
	}

	if personTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPersonTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PersonTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPersonTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PersonTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPersonTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	personTypeOne := &PersonType{}
	personTypeTwo := &PersonType{}
	if err = randomize.Struct(seed, personTypeOne, personTypeDBTypes, false, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}
	if err = randomize.Struct(seed, personTypeTwo, personTypeDBTypes, false, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = personTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = personTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PersonTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPersonTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	personTypeOne := &PersonType{}
	personTypeTwo := &PersonType{}
	if err = randomize.Struct(seed, personTypeOne, personTypeDBTypes, false, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}
	if err = randomize.Struct(seed, personTypeTwo, personTypeDBTypes, false, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = personTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = personTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func personTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func personTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PersonType) error {
	*o = PersonType{}
	return nil
}

func testPersonTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PersonType{}
	o := &PersonType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, personTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PersonType object: %s", err)
	}

	AddPersonTypeHook(boil.BeforeInsertHook, personTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	personTypeBeforeInsertHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.AfterInsertHook, personTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	personTypeAfterInsertHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.AfterSelectHook, personTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	personTypeAfterSelectHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.BeforeUpdateHook, personTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	personTypeBeforeUpdateHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.AfterUpdateHook, personTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	personTypeAfterUpdateHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.BeforeDeleteHook, personTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	personTypeBeforeDeleteHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.AfterDeleteHook, personTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	personTypeAfterDeleteHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.BeforeUpsertHook, personTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	personTypeBeforeUpsertHooks = []PersonTypeHook{}

	AddPersonTypeHook(boil.AfterUpsertHook, personTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	personTypeAfterUpsertHooks = []PersonTypeHook{}
}

func testPersonTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(personTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonTypeToManyUserPersonalInfos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PersonType
	var b, c UserPersonalInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoDBTypes, false, userPersonalInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PersonTypeID = a.PersonTypeID
	c.PersonTypeID = a.PersonTypeID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userPersonalInfo, err := a.UserPersonalInfos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userPersonalInfo {
		if v.PersonTypeID == b.PersonTypeID {
			bFound = true
		}
		if v.PersonTypeID == c.PersonTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonTypeSlice{&a}
	if err = a.L.LoadUserPersonalInfos(ctx, tx, false, (*[]*PersonType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserPersonalInfos = nil
	if err = a.L.LoadUserPersonalInfos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userPersonalInfo)
	}
}

func testPersonTypeToManyAddOpUserPersonalInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PersonType
	var b, c, d, e UserPersonalInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personTypeDBTypes, false, strmangle.SetComplement(personTypePrimaryKeyColumns, personTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserPersonalInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userPersonalInfoDBTypes, false, strmangle.SetComplement(userPersonalInfoPrimaryKeyColumns, userPersonalInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserPersonalInfo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserPersonalInfos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PersonTypeID != first.PersonTypeID {
			t.Error("foreign key was wrong value", a.PersonTypeID, first.PersonTypeID)
		}
		if a.PersonTypeID != second.PersonTypeID {
			t.Error("foreign key was wrong value", a.PersonTypeID, second.PersonTypeID)
		}

		if first.R.PersonType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PersonType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserPersonalInfos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserPersonalInfos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserPersonalInfos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPersonTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PersonTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPersonTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PersonTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	personTypeDBTypes = map[string]string{`PersonTypeID`: `int8`, `PersonTypeName`: `varchar`}
	_                 = bytes.MinRead
)

func testPersonTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(personTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(personTypeColumns) == len(personTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPersonTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(personTypeColumns) == len(personTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PersonType{}
	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, personTypeDBTypes, true, personTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(personTypeColumns, personTypePrimaryKeyColumns) {
		fields = personTypeColumns
	} else {
		fields = strmangle.SetComplement(
			personTypeColumns,
			personTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PersonTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPersonTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(personTypeColumns) == len(personTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PersonType{}
	if err = randomize.Struct(seed, &o, personTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PersonType: %s", err)
	}

	count, err := PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, personTypeDBTypes, false, personTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PersonType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PersonType: %s", err)
	}

	count, err = PersonTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
