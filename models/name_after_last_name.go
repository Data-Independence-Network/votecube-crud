// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NameAfterLastName is an object representing the database table.
type NameAfterLastName struct {
	NameAfterLastNameID int64  `boil:"name_after_last_name_id" json:"name_after_last_name_id" toml:"name_after_last_name_id" yaml:"name_after_last_name_id"`
	NameAfterLastName   string `boil:"name_after_last_name" json:"name_after_last_name" toml:"name_after_last_name" yaml:"name_after_last_name"`

	R *nameAfterLastNameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nameAfterLastNameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NameAfterLastNameColumns = struct {
	NameAfterLastNameID string
	NameAfterLastName   string
}{
	NameAfterLastNameID: "name_after_last_name_id",
	NameAfterLastName:   "name_after_last_name",
}

// NameAfterLastNameRels is where relationship names are stored.
var NameAfterLastNameRels = struct {
	UserAccounts string
}{
	UserAccounts: "UserAccounts",
}

// nameAfterLastNameR is where relationships are stored.
type nameAfterLastNameR struct {
	UserAccounts UserAccountSlice
}

// NewStruct creates a new relationship struct
func (*nameAfterLastNameR) NewStruct() *nameAfterLastNameR {
	return &nameAfterLastNameR{}
}

// nameAfterLastNameL is where Load methods for each relationship are stored.
type nameAfterLastNameL struct{}

var (
	nameAfterLastNameColumns               = []string{"name_after_last_name_id", "name_after_last_name"}
	nameAfterLastNameColumnsWithoutDefault = []string{"name_after_last_name_id", "name_after_last_name"}
	nameAfterLastNameColumnsWithDefault    = []string{}
	nameAfterLastNamePrimaryKeyColumns     = []string{"name_after_last_name_id"}
)

type (
	// NameAfterLastNameSlice is an alias for a slice of pointers to NameAfterLastName.
	// This should generally be used opposed to []NameAfterLastName.
	NameAfterLastNameSlice []*NameAfterLastName
	// NameAfterLastNameHook is the signature for custom NameAfterLastName hook methods
	NameAfterLastNameHook func(context.Context, boil.ContextExecutor, *NameAfterLastName) error

	nameAfterLastNameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nameAfterLastNameType                 = reflect.TypeOf(&NameAfterLastName{})
	nameAfterLastNameMapping              = queries.MakeStructMapping(nameAfterLastNameType)
	nameAfterLastNamePrimaryKeyMapping, _ = queries.BindMapping(nameAfterLastNameType, nameAfterLastNameMapping, nameAfterLastNamePrimaryKeyColumns)
	nameAfterLastNameInsertCacheMut       sync.RWMutex
	nameAfterLastNameInsertCache          = make(map[string]insertCache)
	nameAfterLastNameUpdateCacheMut       sync.RWMutex
	nameAfterLastNameUpdateCache          = make(map[string]updateCache)
	nameAfterLastNameUpsertCacheMut       sync.RWMutex
	nameAfterLastNameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var nameAfterLastNameBeforeInsertHooks []NameAfterLastNameHook
var nameAfterLastNameBeforeUpdateHooks []NameAfterLastNameHook
var nameAfterLastNameBeforeDeleteHooks []NameAfterLastNameHook
var nameAfterLastNameBeforeUpsertHooks []NameAfterLastNameHook

var nameAfterLastNameAfterInsertHooks []NameAfterLastNameHook
var nameAfterLastNameAfterSelectHooks []NameAfterLastNameHook
var nameAfterLastNameAfterUpdateHooks []NameAfterLastNameHook
var nameAfterLastNameAfterDeleteHooks []NameAfterLastNameHook
var nameAfterLastNameAfterUpsertHooks []NameAfterLastNameHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NameAfterLastName) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NameAfterLastName) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NameAfterLastName) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NameAfterLastName) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NameAfterLastName) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NameAfterLastName) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NameAfterLastName) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NameAfterLastName) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NameAfterLastName) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range nameAfterLastNameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNameAfterLastNameHook registers your hook function for all future operations.
func AddNameAfterLastNameHook(hookPoint boil.HookPoint, nameAfterLastNameHook NameAfterLastNameHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nameAfterLastNameBeforeInsertHooks = append(nameAfterLastNameBeforeInsertHooks, nameAfterLastNameHook)
	case boil.BeforeUpdateHook:
		nameAfterLastNameBeforeUpdateHooks = append(nameAfterLastNameBeforeUpdateHooks, nameAfterLastNameHook)
	case boil.BeforeDeleteHook:
		nameAfterLastNameBeforeDeleteHooks = append(nameAfterLastNameBeforeDeleteHooks, nameAfterLastNameHook)
	case boil.BeforeUpsertHook:
		nameAfterLastNameBeforeUpsertHooks = append(nameAfterLastNameBeforeUpsertHooks, nameAfterLastNameHook)
	case boil.AfterInsertHook:
		nameAfterLastNameAfterInsertHooks = append(nameAfterLastNameAfterInsertHooks, nameAfterLastNameHook)
	case boil.AfterSelectHook:
		nameAfterLastNameAfterSelectHooks = append(nameAfterLastNameAfterSelectHooks, nameAfterLastNameHook)
	case boil.AfterUpdateHook:
		nameAfterLastNameAfterUpdateHooks = append(nameAfterLastNameAfterUpdateHooks, nameAfterLastNameHook)
	case boil.AfterDeleteHook:
		nameAfterLastNameAfterDeleteHooks = append(nameAfterLastNameAfterDeleteHooks, nameAfterLastNameHook)
	case boil.AfterUpsertHook:
		nameAfterLastNameAfterUpsertHooks = append(nameAfterLastNameAfterUpsertHooks, nameAfterLastNameHook)
	}
}

// OneG returns a single nameAfterLastName record from the query using the global executor.
func (q nameAfterLastNameQuery) OneG(ctx context.Context) (*NameAfterLastName, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single nameAfterLastName record from the query.
func (q nameAfterLastNameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NameAfterLastName, error) {
	o := &NameAfterLastName{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for name_after_last_name")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all NameAfterLastName records from the query using the global executor.
func (q nameAfterLastNameQuery) AllG(ctx context.Context) (NameAfterLastNameSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all NameAfterLastName records from the query.
func (q nameAfterLastNameQuery) All(ctx context.Context, exec boil.ContextExecutor) (NameAfterLastNameSlice, error) {
	var o []*NameAfterLastName

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NameAfterLastName slice")
	}

	if len(nameAfterLastNameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all NameAfterLastName records in the query, and panics on error.
func (q nameAfterLastNameQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all NameAfterLastName records in the query.
func (q nameAfterLastNameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count name_after_last_name rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q nameAfterLastNameQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q nameAfterLastNameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if name_after_last_name exists")
	}

	return count > 0, nil
}

// UserAccounts retrieves all the user_account's UserAccounts with an executor.
func (o *NameAfterLastName) UserAccounts(mods ...qm.QueryMod) userAccountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_account\".\"name_after_last_name_id\"=?", o.NameAfterLastNameID),
	)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_account\".*"})
	}

	return query
}

// LoadUserAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nameAfterLastNameL) LoadUserAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNameAfterLastName interface{}, mods queries.Applicator) error {
	var slice []*NameAfterLastName
	var object *NameAfterLastName

	if singular {
		object = maybeNameAfterLastName.(*NameAfterLastName)
	} else {
		slice = *maybeNameAfterLastName.(*[]*NameAfterLastName)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nameAfterLastNameR{}
		}
		args = append(args, object.NameAfterLastNameID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nameAfterLastNameR{}
			}

			for _, a := range args {
				if a == obj.NameAfterLastNameID {
					continue Outer
				}
			}

			args = append(args, obj.NameAfterLastNameID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`name_after_last_name_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_account")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(userAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAccountR{}
			}
			foreign.R.NameAfterLastName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.NameAfterLastNameID == foreign.NameAfterLastNameID {
				local.R.UserAccounts = append(local.R.UserAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.NameAfterLastName = local
				break
			}
		}
	}

	return nil
}

// AddUserAccountsG adds the given related objects to the existing relationships
// of the name_after_last_name, optionally inserting them as new records.
// Appends related to o.R.UserAccounts.
// Sets related.R.NameAfterLastName appropriately.
// Uses the global database handle.
func (o *NameAfterLastName) AddUserAccountsG(ctx context.Context, insert bool, related ...*UserAccount) error {
	return o.AddUserAccounts(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserAccounts adds the given related objects to the existing relationships
// of the name_after_last_name, optionally inserting them as new records.
// Appends related to o.R.UserAccounts.
// Sets related.R.NameAfterLastName appropriately.
func (o *NameAfterLastName) AddUserAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAccount) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NameAfterLastNameID = o.NameAfterLastNameID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_account\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"name_after_last_name_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAccountPrimaryKeyColumns),
			)
			values := []interface{}{o.NameAfterLastNameID, rel.UserAccountID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NameAfterLastNameID = o.NameAfterLastNameID
		}
	}

	if o.R == nil {
		o.R = &nameAfterLastNameR{
			UserAccounts: related,
		}
	} else {
		o.R.UserAccounts = append(o.R.UserAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAccountR{
				NameAfterLastName: o,
			}
		} else {
			rel.R.NameAfterLastName = o
		}
	}
	return nil
}

// NameAfterLastNames retrieves all the records using an executor.
func NameAfterLastNames(mods ...qm.QueryMod) nameAfterLastNameQuery {
	mods = append(mods, qm.From("\"name_after_last_name\""))
	return nameAfterLastNameQuery{NewQuery(mods...)}
}

// FindNameAfterLastNameG retrieves a single record by ID.
func FindNameAfterLastNameG(ctx context.Context, nameAfterLastNameID int64, selectCols ...string) (*NameAfterLastName, error) {
	return FindNameAfterLastName(ctx, boil.GetContextDB(), nameAfterLastNameID, selectCols...)
}

// FindNameAfterLastName retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNameAfterLastName(ctx context.Context, exec boil.ContextExecutor, nameAfterLastNameID int64, selectCols ...string) (*NameAfterLastName, error) {
	nameAfterLastNameObj := &NameAfterLastName{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"name_after_last_name\" where \"name_after_last_name_id\"=$1", sel,
	)

	q := queries.Raw(query, nameAfterLastNameID)

	err := q.Bind(ctx, exec, nameAfterLastNameObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from name_after_last_name")
	}

	return nameAfterLastNameObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *NameAfterLastName) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NameAfterLastName) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no name_after_last_name provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nameAfterLastNameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nameAfterLastNameInsertCacheMut.RLock()
	cache, cached := nameAfterLastNameInsertCache[key]
	nameAfterLastNameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nameAfterLastNameColumns,
			nameAfterLastNameColumnsWithDefault,
			nameAfterLastNameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nameAfterLastNameType, nameAfterLastNameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nameAfterLastNameType, nameAfterLastNameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"name_after_last_name\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"name_after_last_name\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into name_after_last_name")
	}

	if !cached {
		nameAfterLastNameInsertCacheMut.Lock()
		nameAfterLastNameInsertCache[key] = cache
		nameAfterLastNameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single NameAfterLastName record using the global executor.
// See Update for more documentation.
func (o *NameAfterLastName) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the NameAfterLastName.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NameAfterLastName) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nameAfterLastNameUpdateCacheMut.RLock()
	cache, cached := nameAfterLastNameUpdateCache[key]
	nameAfterLastNameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nameAfterLastNameColumns,
			nameAfterLastNamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update name_after_last_name, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"name_after_last_name\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nameAfterLastNamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nameAfterLastNameType, nameAfterLastNameMapping, append(wl, nameAfterLastNamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update name_after_last_name row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for name_after_last_name")
	}

	if !cached {
		nameAfterLastNameUpdateCacheMut.Lock()
		nameAfterLastNameUpdateCache[key] = cache
		nameAfterLastNameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nameAfterLastNameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for name_after_last_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for name_after_last_name")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NameAfterLastNameSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NameAfterLastNameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nameAfterLastNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"name_after_last_name\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nameAfterLastNamePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nameAfterLastName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nameAfterLastName")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *NameAfterLastName) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NameAfterLastName) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no name_after_last_name provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nameAfterLastNameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nameAfterLastNameUpsertCacheMut.RLock()
	cache, cached := nameAfterLastNameUpsertCache[key]
	nameAfterLastNameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nameAfterLastNameColumns,
			nameAfterLastNameColumnsWithDefault,
			nameAfterLastNameColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			nameAfterLastNameColumns,
			nameAfterLastNamePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert name_after_last_name, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nameAfterLastNamePrimaryKeyColumns))
			copy(conflict, nameAfterLastNamePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"name_after_last_name\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nameAfterLastNameType, nameAfterLastNameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nameAfterLastNameType, nameAfterLastNameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert name_after_last_name")
	}

	if !cached {
		nameAfterLastNameUpsertCacheMut.Lock()
		nameAfterLastNameUpsertCache[key] = cache
		nameAfterLastNameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single NameAfterLastName record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *NameAfterLastName) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single NameAfterLastName record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NameAfterLastName) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NameAfterLastName provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nameAfterLastNamePrimaryKeyMapping)
	sql := "DELETE FROM \"name_after_last_name\" WHERE \"name_after_last_name_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from name_after_last_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for name_after_last_name")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nameAfterLastNameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nameAfterLastNameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from name_after_last_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for name_after_last_name")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NameAfterLastNameSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NameAfterLastNameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NameAfterLastName slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(nameAfterLastNameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nameAfterLastNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"name_after_last_name\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nameAfterLastNamePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nameAfterLastName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for name_after_last_name")
	}

	if len(nameAfterLastNameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *NameAfterLastName) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no NameAfterLastName provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NameAfterLastName) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNameAfterLastName(ctx, exec, o.NameAfterLastNameID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NameAfterLastNameSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty NameAfterLastNameSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NameAfterLastNameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NameAfterLastNameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nameAfterLastNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"name_after_last_name\".* FROM \"name_after_last_name\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nameAfterLastNamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NameAfterLastNameSlice")
	}

	*o = slice

	return nil
}

// NameAfterLastNameExistsG checks if the NameAfterLastName row exists.
func NameAfterLastNameExistsG(ctx context.Context, nameAfterLastNameID int64) (bool, error) {
	return NameAfterLastNameExists(ctx, boil.GetContextDB(), nameAfterLastNameID)
}

// NameAfterLastNameExists checks if the NameAfterLastName row exists.
func NameAfterLastNameExists(ctx context.Context, exec boil.ContextExecutor, nameAfterLastNameID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"name_after_last_name\" where \"name_after_last_name_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, nameAfterLastNameID)
	}

	row := exec.QueryRowContext(ctx, sql, nameAfterLastNameID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if name_after_last_name exists")
	}

	return exists, nil
}
