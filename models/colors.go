// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Color is an object representing the database table.
type Color struct {
	ColorID     int64  `boil:"color_id" json:"color_id" toml:"color_id" yaml:"color_id"`
	RGBHexValue string `boil:"rgb_hex_value" json:"rgb_hex_value" toml:"rgb_hex_value" yaml:"rgb_hex_value"`

	R *colorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L colorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ColorColumns = struct {
	ColorID     string
	RGBHexValue string
}{
	ColorID:     "color_id",
	RGBHexValue: "rgb_hex_value",
}

// ColorRels is where relationship names are stored.
var ColorRels = struct {
	PollsDimensionsDirections string
}{
	PollsDimensionsDirections: "PollsDimensionsDirections",
}

// colorR is where relationships are stored.
type colorR struct {
	PollsDimensionsDirections PollsDimensionsDirectionSlice
}

// NewStruct creates a new relationship struct
func (*colorR) NewStruct() *colorR {
	return &colorR{}
}

// colorL is where Load methods for each relationship are stored.
type colorL struct{}

var (
	colorColumns               = []string{"color_id", "rgb_hex_value"}
	colorColumnsWithoutDefault = []string{"color_id", "rgb_hex_value"}
	colorColumnsWithDefault    = []string{}
	colorPrimaryKeyColumns     = []string{"color_id"}
)

type (
	// ColorSlice is an alias for a slice of pointers to Color.
	// This should generally be used opposed to []Color.
	ColorSlice []*Color
	// ColorHook is the signature for custom Color hook methods
	ColorHook func(context.Context, boil.ContextExecutor, *Color) error

	colorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	colorType                 = reflect.TypeOf(&Color{})
	colorMapping              = queries.MakeStructMapping(colorType)
	colorPrimaryKeyMapping, _ = queries.BindMapping(colorType, colorMapping, colorPrimaryKeyColumns)
	colorInsertCacheMut       sync.RWMutex
	colorInsertCache          = make(map[string]insertCache)
	colorUpdateCacheMut       sync.RWMutex
	colorUpdateCache          = make(map[string]updateCache)
	colorUpsertCacheMut       sync.RWMutex
	colorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var colorBeforeInsertHooks []ColorHook
var colorBeforeUpdateHooks []ColorHook
var colorBeforeDeleteHooks []ColorHook
var colorBeforeUpsertHooks []ColorHook

var colorAfterInsertHooks []ColorHook
var colorAfterSelectHooks []ColorHook
var colorAfterUpdateHooks []ColorHook
var colorAfterDeleteHooks []ColorHook
var colorAfterUpsertHooks []ColorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Color) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Color) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Color) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Color) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Color) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Color) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Color) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Color) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Color) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range colorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddColorHook registers your hook function for all future operations.
func AddColorHook(hookPoint boil.HookPoint, colorHook ColorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		colorBeforeInsertHooks = append(colorBeforeInsertHooks, colorHook)
	case boil.BeforeUpdateHook:
		colorBeforeUpdateHooks = append(colorBeforeUpdateHooks, colorHook)
	case boil.BeforeDeleteHook:
		colorBeforeDeleteHooks = append(colorBeforeDeleteHooks, colorHook)
	case boil.BeforeUpsertHook:
		colorBeforeUpsertHooks = append(colorBeforeUpsertHooks, colorHook)
	case boil.AfterInsertHook:
		colorAfterInsertHooks = append(colorAfterInsertHooks, colorHook)
	case boil.AfterSelectHook:
		colorAfterSelectHooks = append(colorAfterSelectHooks, colorHook)
	case boil.AfterUpdateHook:
		colorAfterUpdateHooks = append(colorAfterUpdateHooks, colorHook)
	case boil.AfterDeleteHook:
		colorAfterDeleteHooks = append(colorAfterDeleteHooks, colorHook)
	case boil.AfterUpsertHook:
		colorAfterUpsertHooks = append(colorAfterUpsertHooks, colorHook)
	}
}

// One returns a single color record from the query.
func (q colorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Color, error) {
	o := &Color{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for colors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Color records from the query.
func (q colorQuery) All(ctx context.Context, exec boil.ContextExecutor) (ColorSlice, error) {
	var o []*Color

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Color slice")
	}

	if len(colorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Color records in the query.
func (q colorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count colors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q colorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if colors exists")
	}

	return count > 0, nil
}

// PollsDimensionsDirections retrieves all the polls_dimensions_direction's PollsDimensionsDirections with an executor.
func (o *Color) PollsDimensionsDirections(mods ...qm.QueryMod) pollsDimensionsDirectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_dimensions_directions\".\"color_id\"=?", o.ColorID),
	)

	query := PollsDimensionsDirections(queryMods...)
	queries.SetFrom(query.Query, "\"polls_dimensions_directions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_dimensions_directions\".*"})
	}

	return query
}

// LoadPollsDimensionsDirections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (colorL) LoadPollsDimensionsDirections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeColor interface{}, mods queries.Applicator) error {
	var slice []*Color
	var object *Color

	if singular {
		object = maybeColor.(*Color)
	} else {
		slice = *maybeColor.(*[]*Color)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &colorR{}
		}
		args = append(args, object.ColorID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &colorR{}
			}

			for _, a := range args {
				if a == obj.ColorID {
					continue Outer
				}
			}

			args = append(args, obj.ColorID)
		}
	}

	query := NewQuery(qm.From(`polls_dimensions_directions`), qm.WhereIn(`color_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_dimensions_directions")
	}

	var resultSlice []*PollsDimensionsDirection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_dimensions_directions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_dimensions_directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_dimensions_directions")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsDimensionsDirections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsDimensionsDirectionR{}
			}
			foreign.R.Color = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ColorID == foreign.ColorID {
				local.R.PollsDimensionsDirections = append(local.R.PollsDimensionsDirections, foreign)
				if foreign.R == nil {
					foreign.R = &pollsDimensionsDirectionR{}
				}
				foreign.R.Color = local
				break
			}
		}
	}

	return nil
}

// AddPollsDimensionsDirections adds the given related objects to the existing relationships
// of the color, optionally inserting them as new records.
// Appends related to o.R.PollsDimensionsDirections.
// Sets related.R.Color appropriately.
func (o *Color) AddPollsDimensionsDirections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsDimensionsDirection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ColorID = o.ColorID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"color_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ColorID, rel.PollDimensionDirectionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ColorID = o.ColorID
		}
	}

	if o.R == nil {
		o.R = &colorR{
			PollsDimensionsDirections: related,
		}
	} else {
		o.R.PollsDimensionsDirections = append(o.R.PollsDimensionsDirections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsDimensionsDirectionR{
				Color: o,
			}
		} else {
			rel.R.Color = o
		}
	}
	return nil
}

// Colors retrieves all the records using an executor.
func Colors(mods ...qm.QueryMod) colorQuery {
	mods = append(mods, qm.From("\"colors\""))
	return colorQuery{NewQuery(mods...)}
}

// FindColor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindColor(ctx context.Context, exec boil.ContextExecutor, colorID int64, selectCols ...string) (*Color, error) {
	colorObj := &Color{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"colors\" where \"color_id\"=$1", sel,
	)

	q := queries.Raw(query, colorID)

	err := q.Bind(ctx, exec, colorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from colors")
	}

	return colorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Color) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no colors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(colorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	colorInsertCacheMut.RLock()
	cache, cached := colorInsertCache[key]
	colorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			colorColumns,
			colorColumnsWithDefault,
			colorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(colorType, colorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(colorType, colorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"colors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"colors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into colors")
	}

	if !cached {
		colorInsertCacheMut.Lock()
		colorInsertCache[key] = cache
		colorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Color.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Color) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	colorUpdateCacheMut.RLock()
	cache, cached := colorUpdateCache[key]
	colorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			colorColumns,
			colorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update colors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"colors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, colorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(colorType, colorMapping, append(wl, colorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update colors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for colors")
	}

	if !cached {
		colorUpdateCacheMut.Lock()
		colorUpdateCache[key] = cache
		colorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q colorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for colors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for colors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ColorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"colors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, colorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in color slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all color")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Color) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no colors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(colorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	colorUpsertCacheMut.RLock()
	cache, cached := colorUpsertCache[key]
	colorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			colorColumns,
			colorColumnsWithDefault,
			colorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			colorColumns,
			colorPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert colors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(colorPrimaryKeyColumns))
			copy(conflict, colorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"colors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(colorType, colorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(colorType, colorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert colors")
	}

	if !cached {
		colorUpsertCacheMut.Lock()
		colorUpsertCache[key] = cache
		colorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Color record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Color) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Color provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), colorPrimaryKeyMapping)
	sql := "DELETE FROM \"colors\" WHERE \"color_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from colors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for colors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q colorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no colorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from colors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for colors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ColorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Color slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(colorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"colors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, colorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from color slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for colors")
	}

	if len(colorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Color) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindColor(ctx, exec, o.ColorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ColorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ColorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"colors\".* FROM \"colors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, colorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ColorSlice")
	}

	*o = slice

	return nil
}

// ColorExists checks if the Color row exists.
func ColorExists(ctx context.Context, exec boil.ContextExecutor, colorID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"colors\" where \"color_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, colorID)
	}

	row := exec.QueryRowContext(ctx, sql, colorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if colors exists")
	}

	return exists, nil
}
