// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Poll is an object representing the database table.
type Poll struct {
	PollID          int64     `boil:"poll_id" json:"poll_id" toml:"poll_id" yaml:"poll_id"`
	ParentPollID    int64     `boil:"parent_poll_id" json:"parent_poll_id" toml:"parent_poll_id" yaml:"parent_poll_id"`
	UserAccountID   int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	PollTitle       string    `boil:"poll_title" json:"poll_title" toml:"poll_title" yaml:"poll_title"`
	PollDescription string    `boil:"poll_description" json:"poll_description" toml:"poll_description" yaml:"poll_description"`
	ThemeID         int64     `boil:"theme_id" json:"theme_id" toml:"theme_id" yaml:"theme_id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	StartDate       time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate         time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`

	R *pollR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollColumns = struct {
	PollID          string
	ParentPollID    string
	UserAccountID   string
	PollTitle       string
	PollDescription string
	ThemeID         string
	CreatedAt       string
	StartDate       string
	EndDate         string
}{
	PollID:          "poll_id",
	ParentPollID:    "parent_poll_id",
	UserAccountID:   "user_account_id",
	PollTitle:       "poll_title",
	PollDescription: "poll_description",
	ThemeID:         "theme_id",
	CreatedAt:       "created_at",
	StartDate:       "start_date",
	EndDate:         "end_date",
}

// PollRels is where relationship names are stored.
var PollRels = struct {
	UserAccount               string
	ParentPoll                string
	Theme                     string
	ParentPollPoll            string
	PollsContinents           string
	PollsCountries            string
	PollsCounties             string
	PollsDimensionsDirections string
	PollsLabels               string
	PollsLinks                string
	PollsMessages             string
	PollsPollsGroups          string
	PollsStates               string
	PollsTowns                string
	Votes                     string
}{
	UserAccount:               "UserAccount",
	ParentPoll:                "ParentPoll",
	Theme:                     "Theme",
	ParentPollPoll:            "ParentPollPoll",
	PollsContinents:           "PollsContinents",
	PollsCountries:            "PollsCountries",
	PollsCounties:             "PollsCounties",
	PollsDimensionsDirections: "PollsDimensionsDirections",
	PollsLabels:               "PollsLabels",
	PollsLinks:                "PollsLinks",
	PollsMessages:             "PollsMessages",
	PollsPollsGroups:          "PollsPollsGroups",
	PollsStates:               "PollsStates",
	PollsTowns:                "PollsTowns",
	Votes:                     "Votes",
}

// pollR is where relationships are stored.
type pollR struct {
	UserAccount               *UserAccount
	ParentPoll                *Poll
	Theme                     *Theme
	ParentPollPoll            *Poll
	PollsContinents           PollsContinentSlice
	PollsCountries            PollsCountrySlice
	PollsCounties             PollsCountySlice
	PollsDimensionsDirections PollsDimensionsDirectionSlice
	PollsLabels               PollsLabelSlice
	PollsLinks                PollsLinkSlice
	PollsMessages             PollsMessageSlice
	PollsPollsGroups          PollsPollsGroupSlice
	PollsStates               PollsStateSlice
	PollsTowns                PollsTownSlice
	Votes                     VoteSlice
}

// NewStruct creates a new relationship struct
func (*pollR) NewStruct() *pollR {
	return &pollR{}
}

// pollL is where Load methods for each relationship are stored.
type pollL struct{}

var (
	pollColumns               = []string{"poll_id", "parent_poll_id", "user_account_id", "poll_title", "poll_description", "theme_id", "created_at", "start_date", "end_date"}
	pollColumnsWithoutDefault = []string{"poll_id", "parent_poll_id", "user_account_id", "poll_title", "poll_description", "theme_id", "created_at", "start_date", "end_date"}
	pollColumnsWithDefault    = []string{}
	pollPrimaryKeyColumns     = []string{"poll_id"}
)

type (
	// PollSlice is an alias for a slice of pointers to Poll.
	// This should generally be used opposed to []Poll.
	PollSlice []*Poll
	// PollHook is the signature for custom Poll hook methods
	PollHook func(context.Context, boil.ContextExecutor, *Poll) error

	pollQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollType                 = reflect.TypeOf(&Poll{})
	pollMapping              = queries.MakeStructMapping(pollType)
	pollPrimaryKeyMapping, _ = queries.BindMapping(pollType, pollMapping, pollPrimaryKeyColumns)
	pollInsertCacheMut       sync.RWMutex
	pollInsertCache          = make(map[string]insertCache)
	pollUpdateCacheMut       sync.RWMutex
	pollUpdateCache          = make(map[string]updateCache)
	pollUpsertCacheMut       sync.RWMutex
	pollUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var pollBeforeInsertHooks []PollHook
var pollBeforeUpdateHooks []PollHook
var pollBeforeDeleteHooks []PollHook
var pollBeforeUpsertHooks []PollHook

var pollAfterInsertHooks []PollHook
var pollAfterSelectHooks []PollHook
var pollAfterUpdateHooks []PollHook
var pollAfterDeleteHooks []PollHook
var pollAfterUpsertHooks []PollHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Poll) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Poll) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Poll) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Poll) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Poll) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Poll) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Poll) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Poll) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Poll) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range pollAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPollHook registers your hook function for all future operations.
func AddPollHook(hookPoint boil.HookPoint, pollHook PollHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pollBeforeInsertHooks = append(pollBeforeInsertHooks, pollHook)
	case boil.BeforeUpdateHook:
		pollBeforeUpdateHooks = append(pollBeforeUpdateHooks, pollHook)
	case boil.BeforeDeleteHook:
		pollBeforeDeleteHooks = append(pollBeforeDeleteHooks, pollHook)
	case boil.BeforeUpsertHook:
		pollBeforeUpsertHooks = append(pollBeforeUpsertHooks, pollHook)
	case boil.AfterInsertHook:
		pollAfterInsertHooks = append(pollAfterInsertHooks, pollHook)
	case boil.AfterSelectHook:
		pollAfterSelectHooks = append(pollAfterSelectHooks, pollHook)
	case boil.AfterUpdateHook:
		pollAfterUpdateHooks = append(pollAfterUpdateHooks, pollHook)
	case boil.AfterDeleteHook:
		pollAfterDeleteHooks = append(pollAfterDeleteHooks, pollHook)
	case boil.AfterUpsertHook:
		pollAfterUpsertHooks = append(pollAfterUpsertHooks, pollHook)
	}
}

// OneG returns a single poll record from the query using the global executor.
func (q pollQuery) OneG(ctx context.Context) (*Poll, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single poll record from the query.
func (q pollQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Poll, error) {
	o := &Poll{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for polls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Poll records from the query using the global executor.
func (q pollQuery) AllG(ctx context.Context) (PollSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Poll records from the query.
func (q pollQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollSlice, error) {
	var o []*Poll

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Poll slice")
	}

	if len(pollAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Poll records in the query, and panics on error.
func (q pollQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Poll records in the query.
func (q pollQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count polls rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q pollQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pollQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if polls exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *Poll) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// ParentPoll pointed to by the foreign key.
func (o *Poll) ParentPoll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("poll_id=?", o.ParentPollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// Theme pointed to by the foreign key.
func (o *Poll) Theme(mods ...qm.QueryMod) themeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("theme_id=?", o.ThemeID),
	}

	queryMods = append(queryMods, mods...)

	query := Themes(queryMods...)
	queries.SetFrom(query.Query, "\"themes\"")

	return query
}

// ParentPollPoll pointed to by the foreign key.
func (o *Poll) ParentPollPoll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("parent_poll_id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"polls\"")

	return query
}

// PollsContinents retrieves all the polls_continent's PollsContinents with an executor.
func (o *Poll) PollsContinents(mods ...qm.QueryMod) pollsContinentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_continent\".\"poll_id\"=?", o.PollID),
	)

	query := PollsContinents(queryMods...)
	queries.SetFrom(query.Query, "\"polls_continent\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_continent\".*"})
	}

	return query
}

// PollsCountries retrieves all the polls_country's PollsCountries with an executor.
func (o *Poll) PollsCountries(mods ...qm.QueryMod) pollsCountryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_country\".\"poll_id\"=?", o.PollID),
	)

	query := PollsCountries(queryMods...)
	queries.SetFrom(query.Query, "\"polls_country\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_country\".*"})
	}

	return query
}

// PollsCounties retrieves all the polls_county's PollsCounties with an executor.
func (o *Poll) PollsCounties(mods ...qm.QueryMod) pollsCountyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_county\".\"poll_id\"=?", o.PollID),
	)

	query := PollsCounties(queryMods...)
	queries.SetFrom(query.Query, "\"polls_county\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_county\".*"})
	}

	return query
}

// PollsDimensionsDirections retrieves all the polls_dimensions_direction's PollsDimensionsDirections with an executor.
func (o *Poll) PollsDimensionsDirections(mods ...qm.QueryMod) pollsDimensionsDirectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_dimensions_directions\".\"poll_id\"=?", o.ParentPollID),
	)

	query := PollsDimensionsDirections(queryMods...)
	queries.SetFrom(query.Query, "\"polls_dimensions_directions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_dimensions_directions\".*"})
	}

	return query
}

// PollsLabels retrieves all the polls_label's PollsLabels with an executor.
func (o *Poll) PollsLabels(mods ...qm.QueryMod) pollsLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_labels\".\"poll_id\"=?", o.PollID),
	)

	query := PollsLabels(queryMods...)
	queries.SetFrom(query.Query, "\"polls_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_labels\".*"})
	}

	return query
}

// PollsLinks retrieves all the polls_link's PollsLinks with an executor.
func (o *Poll) PollsLinks(mods ...qm.QueryMod) pollsLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_links\".\"poll_id\"=?", o.PollID),
	)

	query := PollsLinks(queryMods...)
	queries.SetFrom(query.Query, "\"polls_links\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_links\".*"})
	}

	return query
}

// PollsMessages retrieves all the polls_message's PollsMessages with an executor.
func (o *Poll) PollsMessages(mods ...qm.QueryMod) pollsMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_messages\".\"poll_id\"=?", o.PollID),
	)

	query := PollsMessages(queryMods...)
	queries.SetFrom(query.Query, "\"polls_messages\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_messages\".*"})
	}

	return query
}

// PollsPollsGroups retrieves all the polls_polls_group's PollsPollsGroups with an executor.
func (o *Poll) PollsPollsGroups(mods ...qm.QueryMod) pollsPollsGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_polls_groups\".\"poll_id\"=?", o.PollID),
	)

	query := PollsPollsGroups(queryMods...)
	queries.SetFrom(query.Query, "\"polls_polls_groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_polls_groups\".*"})
	}

	return query
}

// PollsStates retrieves all the polls_state's PollsStates with an executor.
func (o *Poll) PollsStates(mods ...qm.QueryMod) pollsStateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_state\".\"poll_id\"=?", o.PollID),
	)

	query := PollsStates(queryMods...)
	queries.SetFrom(query.Query, "\"polls_state\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_state\".*"})
	}

	return query
}

// PollsTowns retrieves all the polls_town's PollsTowns with an executor.
func (o *Poll) PollsTowns(mods ...qm.QueryMod) pollsTownQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"polls_town\".\"poll_id\"=?", o.PollID),
	)

	query := PollsTowns(queryMods...)
	queries.SetFrom(query.Query, "\"polls_town\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"polls_town\".*"})
	}

	return query
}

// Votes retrieves all the vote's Votes with an executor.
func (o *Poll) Votes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vote\".\"poll_id\"=?", o.ParentPollID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"vote\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"vote\".*"})
	}

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(pollAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Polls = append(foreign.R.Polls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Polls = append(foreign.R.Polls, local)
				break
			}
		}
	}

	return nil
}

// LoadParentPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollL) LoadParentPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.ParentPollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.ParentPollID {
					continue Outer
				}
			}

			args = append(args, obj.ParentPollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentPoll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.ParentPollPoll = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentPollID == foreign.PollID {
				local.R.ParentPoll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.ParentPollPoll = local
				break
			}
		}
	}

	return nil
}

// LoadTheme allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollL) LoadTheme(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.ThemeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.ThemeID {
					continue Outer
				}
			}

			args = append(args, obj.ThemeID)
		}
	}

	query := NewQuery(qm.From(`themes`), qm.WhereIn(`theme_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Theme")
	}

	var resultSlice []*Theme
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Theme")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for themes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for themes")
	}

	if len(pollAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Theme = foreign
		if foreign.R == nil {
			foreign.R = &themeR{}
		}
		foreign.R.Polls = append(foreign.R.Polls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ThemeID == foreign.ThemeID {
				local.R.Theme = foreign
				if foreign.R == nil {
					foreign.R = &themeR{}
				}
				foreign.R.Polls = append(foreign.R.Polls, local)
				break
			}
		}
	}

	return nil
}

// LoadParentPollPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (pollL) LoadParentPollPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls`), qm.WhereIn(`parent_poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for polls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls")
	}

	if len(pollAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentPollPoll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.ParentPoll = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PollID == foreign.ParentPollID {
				local.R.ParentPollPoll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.ParentPoll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsContinents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsContinents(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_continent`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_continent")
	}

	var resultSlice []*PollsContinent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_continent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_continent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_continent")
	}

	if len(pollsContinentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsContinents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsContinentR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsContinents = append(local.R.PollsContinents, foreign)
				if foreign.R == nil {
					foreign.R = &pollsContinentR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsCountries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsCountries(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_country`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_country")
	}

	var resultSlice []*PollsCountry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_country")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_country")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_country")
	}

	if len(pollsCountryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsCountries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsCountryR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsCountries = append(local.R.PollsCountries, foreign)
				if foreign.R == nil {
					foreign.R = &pollsCountryR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsCounties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsCounties(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_county`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_county")
	}

	var resultSlice []*PollsCounty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_county")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_county")
	}

	if len(pollsCountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsCounties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsCountyR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsCounties = append(local.R.PollsCounties, foreign)
				if foreign.R == nil {
					foreign.R = &pollsCountyR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsDimensionsDirections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsDimensionsDirections(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.ParentPollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.ParentPollID {
					continue Outer
				}
			}

			args = append(args, obj.ParentPollID)
		}
	}

	query := NewQuery(qm.From(`polls_dimensions_directions`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_dimensions_directions")
	}

	var resultSlice []*PollsDimensionsDirection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_dimensions_directions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_dimensions_directions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_dimensions_directions")
	}

	if len(pollsDimensionsDirectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsDimensionsDirections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsDimensionsDirectionR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ParentPollID == foreign.PollID {
				local.R.PollsDimensionsDirections = append(local.R.PollsDimensionsDirections, foreign)
				if foreign.R == nil {
					foreign.R = &pollsDimensionsDirectionR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_labels`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_labels")
	}

	var resultSlice []*PollsLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_labels")
	}

	if len(pollsLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsLabelR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsLabels = append(local.R.PollsLabels, foreign)
				if foreign.R == nil {
					foreign.R = &pollsLabelR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_links`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_links")
	}

	var resultSlice []*PollsLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_links")
	}

	if len(pollsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsLinkR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsLinks = append(local.R.PollsLinks, foreign)
				if foreign.R == nil {
					foreign.R = &pollsLinkR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_messages`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_messages")
	}

	var resultSlice []*PollsMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_messages")
	}

	if len(pollsMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsMessageR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsMessages = append(local.R.PollsMessages, foreign)
				if foreign.R == nil {
					foreign.R = &pollsMessageR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsPollsGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsPollsGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_polls_groups`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_polls_groups")
	}

	var resultSlice []*PollsPollsGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_polls_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_polls_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_polls_groups")
	}

	if len(pollsPollsGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsPollsGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsPollsGroupR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsPollsGroups = append(local.R.PollsPollsGroups, foreign)
				if foreign.R == nil {
					foreign.R = &pollsPollsGroupR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsStates(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_state`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_state")
	}

	var resultSlice []*PollsState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_state")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_state")
	}

	if len(pollsStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsStates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsStateR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsStates = append(local.R.PollsStates, foreign)
				if foreign.R == nil {
					foreign.R = &pollsStateR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadPollsTowns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollsTowns(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.PollID {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`polls_town`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load polls_town")
	}

	var resultSlice []*PollsTown
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice polls_town")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on polls_town")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for polls_town")
	}

	if len(pollsTownAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PollsTowns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollsTownR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PollID == foreign.PollID {
				local.R.PollsTowns = append(local.R.PollsTowns, foreign)
				if foreign.R == nil {
					foreign.R = &pollsTownR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// LoadVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.ParentPollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.ParentPollID {
					continue Outer
				}
			}

			args = append(args, obj.ParentPollID)
		}
	}

	query := NewQuery(qm.From(`vote`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote")
	}

	if len(voteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Votes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ParentPollID == foreign.PollID {
				local.R.Votes = append(local.R.Votes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// SetUserAccountG of the poll to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Polls.
// Uses the global database handle.
func (o *Poll) SetUserAccountG(ctx context.Context, insert bool, related *UserAccount) error {
	return o.SetUserAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetUserAccount of the poll to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.Polls.
func (o *Poll) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.PollID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &pollR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Polls: PollSlice{o},
		}
	} else {
		related.R.Polls = append(related.R.Polls, o)
	}

	return nil
}

// SetParentPollG of the poll to the related item.
// Sets o.R.ParentPoll to related.
// Adds o to related.R.ParentPollPoll.
// Uses the global database handle.
func (o *Poll) SetParentPollG(ctx context.Context, insert bool, related *Poll) error {
	return o.SetParentPoll(ctx, boil.GetContextDB(), insert, related)
}

// SetParentPoll of the poll to the related item.
// Sets o.R.ParentPoll to related.
// Adds o to related.R.ParentPollPoll.
func (o *Poll) SetParentPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollPrimaryKeyColumns),
	)
	values := []interface{}{related.PollID, o.PollID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentPollID = related.PollID
	if o.R == nil {
		o.R = &pollR{
			ParentPoll: related,
		}
	} else {
		o.R.ParentPoll = related
	}

	if related.R == nil {
		related.R = &pollR{
			ParentPollPoll: o,
		}
	} else {
		related.R.ParentPollPoll = o
	}

	return nil
}

// SetThemeG of the poll to the related item.
// Sets o.R.Theme to related.
// Adds o to related.R.Polls.
// Uses the global database handle.
func (o *Poll) SetThemeG(ctx context.Context, insert bool, related *Theme) error {
	return o.SetTheme(ctx, boil.GetContextDB(), insert, related)
}

// SetTheme of the poll to the related item.
// Sets o.R.Theme to related.
// Adds o to related.R.Polls.
func (o *Poll) SetTheme(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Theme) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"polls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"theme_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollPrimaryKeyColumns),
	)
	values := []interface{}{related.ThemeID, o.PollID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ThemeID = related.ThemeID
	if o.R == nil {
		o.R = &pollR{
			Theme: related,
		}
	} else {
		o.R.Theme = related
	}

	if related.R == nil {
		related.R = &themeR{
			Polls: PollSlice{o},
		}
	} else {
		related.R.Polls = append(related.R.Polls, o)
	}

	return nil
}

// SetParentPollPollG of the poll to the related item.
// Sets o.R.ParentPollPoll to related.
// Adds o to related.R.ParentPoll.
// Uses the global database handle.
func (o *Poll) SetParentPollPollG(ctx context.Context, insert bool, related *Poll) error {
	return o.SetParentPollPoll(ctx, boil.GetContextDB(), insert, related)
}

// SetParentPollPoll of the poll to the related item.
// Sets o.R.ParentPollPoll to related.
// Adds o to related.R.ParentPoll.
func (o *Poll) SetParentPollPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error

	if insert {
		related.ParentPollID = o.PollID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"polls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"parent_poll_id"}),
			strmangle.WhereClause("\"", "\"", 2, pollPrimaryKeyColumns),
		)
		values := []interface{}{o.PollID, related.PollID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ParentPollID = o.PollID

	}

	if o.R == nil {
		o.R = &pollR{
			ParentPollPoll: related,
		}
	} else {
		o.R.ParentPollPoll = related
	}

	if related.R == nil {
		related.R = &pollR{
			ParentPoll: o,
		}
	} else {
		related.R.ParentPoll = o
	}
	return nil
}

// AddPollsContinentsG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsContinents.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsContinentsG(ctx context.Context, insert bool, related ...*PollsContinent) error {
	return o.AddPollsContinents(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsContinents adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsContinents.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsContinents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsContinent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_continent\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsContinentPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollContinentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsContinents: related,
		}
	} else {
		o.R.PollsContinents = append(o.R.PollsContinents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsContinentR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsCountriesG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsCountries.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsCountriesG(ctx context.Context, insert bool, related ...*PollsCountry) error {
	return o.AddPollsCountries(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsCountries adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsCountries.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsCountries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsCountry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_country\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsCountryPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollCountryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsCountries: related,
		}
	} else {
		o.R.PollsCountries = append(o.R.PollsCountries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsCountryR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsCountiesG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsCounties.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsCountiesG(ctx context.Context, insert bool, related ...*PollsCounty) error {
	return o.AddPollsCounties(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsCounties adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsCounties.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsCounties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsCounty) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_county\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsCountyPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollCountyID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsCounties: related,
		}
	} else {
		o.R.PollsCounties = append(o.R.PollsCounties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsCountyR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsDimensionsDirectionsG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsDimensionsDirections.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsDimensionsDirectionsG(ctx context.Context, insert bool, related ...*PollsDimensionsDirection) error {
	return o.AddPollsDimensionsDirections(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsDimensionsDirections adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsDimensionsDirections.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsDimensionsDirections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsDimensionsDirection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.ParentPollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_dimensions_directions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsDimensionsDirectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ParentPollID, rel.PollDimensionDirectionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.ParentPollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsDimensionsDirections: related,
		}
	} else {
		o.R.PollsDimensionsDirections = append(o.R.PollsDimensionsDirections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsDimensionsDirectionR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsLabelsG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsLabels.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsLabelsG(ctx context.Context, insert bool, related ...*PollsLabel) error {
	return o.AddPollsLabels(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsLabels adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsLabels.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollLabelID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsLabels: related,
		}
	} else {
		o.R.PollsLabels = append(o.R.PollsLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsLabelR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsLinksG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsLinks.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsLinksG(ctx context.Context, insert bool, related ...*PollsLink) error {
	return o.AddPollsLinks(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsLinks adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsLinks.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollLinkID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsLinks: related,
		}
	} else {
		o.R.PollsLinks = append(o.R.PollsLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsLinkR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsMessagesG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsMessages.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsMessagesG(ctx context.Context, insert bool, related ...*PollsMessage) error {
	return o.AddPollsMessages(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsMessages adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsMessages.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollMessageID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsMessages: related,
		}
	} else {
		o.R.PollsMessages = append(o.R.PollsMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsMessageR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsPollsGroupsG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsPollsGroups.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsPollsGroupsG(ctx context.Context, insert bool, related ...*PollsPollsGroup) error {
	return o.AddPollsPollsGroups(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsPollsGroups adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsPollsGroups.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsPollsGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsPollsGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_polls_groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsPollsGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollPollGroupID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsPollsGroups: related,
		}
	} else {
		o.R.PollsPollsGroups = append(o.R.PollsPollsGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsPollsGroupR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsStatesG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsStates.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsStatesG(ctx context.Context, insert bool, related ...*PollsState) error {
	return o.AddPollsStates(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsStates adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsStates.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsState) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_state\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsStatePrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollStateID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsStates: related,
		}
	} else {
		o.R.PollsStates = append(o.R.PollsStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsStateR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddPollsTownsG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsTowns.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddPollsTownsG(ctx context.Context, insert bool, related ...*PollsTown) error {
	return o.AddPollsTowns(ctx, boil.GetContextDB(), insert, related...)
}

// AddPollsTowns adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollsTowns.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollsTowns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollsTown) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.PollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"polls_town\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollsTownPrimaryKeyColumns),
			)
			values := []interface{}{o.PollID, rel.PollTownID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.PollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollsTowns: related,
		}
	} else {
		o.R.PollsTowns = append(o.R.PollsTowns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollsTownR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// AddVotesG adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.Votes.
// Sets related.R.Poll appropriately.
// Uses the global database handle.
func (o *Poll) AddVotesG(ctx context.Context, insert bool, related ...*Vote) error {
	return o.AddVotes(ctx, boil.GetContextDB(), insert, related...)
}

// AddVotes adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.Votes.
// Sets related.R.Poll appropriately.
func (o *Poll) AddVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PollID = o.ParentPollID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vote\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.ParentPollID, rel.VoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PollID = o.ParentPollID
		}
	}

	if o.R == nil {
		o.R = &pollR{
			Votes: related,
		}
	} else {
		o.R.Votes = append(o.R.Votes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// Polls retrieves all the records using an executor.
func Polls(mods ...qm.QueryMod) pollQuery {
	mods = append(mods, qm.From("\"polls\""))
	return pollQuery{NewQuery(mods...)}
}

// FindPollG retrieves a single record by ID.
func FindPollG(ctx context.Context, pollID int64, selectCols ...string) (*Poll, error) {
	return FindPoll(ctx, boil.GetContextDB(), pollID, selectCols...)
}

// FindPoll retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPoll(ctx context.Context, exec boil.ContextExecutor, pollID int64, selectCols ...string) (*Poll, error) {
	pollObj := &Poll{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"polls\" where \"poll_id\"=$1", sel,
	)

	q := queries.Raw(query, pollID)

	err := q.Bind(ctx, exec, pollObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from polls")
	}

	return pollObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Poll) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Poll) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollInsertCacheMut.RLock()
	cache, cached := pollInsertCache[key]
	pollInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollColumns,
			pollColumnsWithDefault,
			pollColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollType, pollMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollType, pollMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"polls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"polls\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into polls")
	}

	if !cached {
		pollInsertCacheMut.Lock()
		pollInsertCache[key] = cache
		pollInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Poll record using the global executor.
// See Update for more documentation.
func (o *Poll) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Poll.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Poll) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pollUpdateCacheMut.RLock()
	cache, cached := pollUpdateCache[key]
	pollUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollColumns,
			pollPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update polls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"polls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollType, pollMapping, append(wl, pollPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update polls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for polls")
	}

	if !cached {
		pollUpdateCacheMut.Lock()
		pollUpdateCache[key] = cache
		pollUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pollQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for polls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for polls")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PollSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"polls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in poll slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all poll")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Poll) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Poll) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no polls provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pollColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollUpsertCacheMut.RLock()
	cache, cached := pollUpsertCache[key]
	pollUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollColumns,
			pollColumnsWithDefault,
			pollColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollColumns,
			pollPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert polls, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollPrimaryKeyColumns))
			copy(conflict, pollPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"polls\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollType, pollMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollType, pollMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert polls")
	}

	if !cached {
		pollUpsertCacheMut.Lock()
		pollUpsertCache[key] = cache
		pollUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Poll record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Poll) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Poll record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Poll) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Poll provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollPrimaryKeyMapping)
	sql := "DELETE FROM \"polls\" WHERE \"poll_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from polls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for polls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from polls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PollSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Poll slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pollBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"polls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poll slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for polls")
	}

	if len(pollAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Poll) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Poll provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Poll) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPoll(ctx, exec, o.PollID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PollSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"polls\".* FROM \"polls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollSlice")
	}

	*o = slice

	return nil
}

// PollExistsG checks if the Poll row exists.
func PollExistsG(ctx context.Context, pollID int64) (bool, error) {
	return PollExists(ctx, boil.GetContextDB(), pollID)
}

// PollExists checks if the Poll row exists.
func PollExists(ctx context.Context, exec boil.ContextExecutor, pollID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"polls\" where \"poll_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pollID)
	}

	row := exec.QueryRowContext(ctx, sql, pollID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if polls exists")
	}

	return exists, nil
}
