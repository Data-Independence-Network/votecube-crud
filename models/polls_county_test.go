// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPollsCounties(t *testing.T) {
	t.Parallel()

	query := PollsCounties()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPollsCountiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsCountiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PollsCounties().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsCountiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsCountySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPollsCountiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PollsCountyExists(ctx, tx, o.PollCountyID)
	if err != nil {
		t.Errorf("Unable to check if PollsCounty exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PollsCountyExists to return true, but got false.")
	}
}

func testPollsCountiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pollsCountyFound, err := FindPollsCounty(ctx, tx, o.PollCountyID)
	if err != nil {
		t.Error(err)
	}

	if pollsCountyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPollsCountiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PollsCounties().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPollsCountiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PollsCounties().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPollsCountiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pollsCountyOne := &PollsCounty{}
	pollsCountyTwo := &PollsCounty{}
	if err = randomize.Struct(seed, pollsCountyOne, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsCountyTwo, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsCountyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsCountyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsCounties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPollsCountiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pollsCountyOne := &PollsCounty{}
	pollsCountyTwo := &PollsCounty{}
	if err = randomize.Struct(seed, pollsCountyOne, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}
	if err = randomize.Struct(seed, pollsCountyTwo, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pollsCountyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pollsCountyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pollsCountyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func pollsCountyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PollsCounty) error {
	*o = PollsCounty{}
	return nil
}

func testPollsCountiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PollsCounty{}
	o := &PollsCounty{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PollsCounty object: %s", err)
	}

	AddPollsCountyHook(boil.BeforeInsertHook, pollsCountyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pollsCountyBeforeInsertHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.AfterInsertHook, pollsCountyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pollsCountyAfterInsertHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.AfterSelectHook, pollsCountyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pollsCountyAfterSelectHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.BeforeUpdateHook, pollsCountyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pollsCountyBeforeUpdateHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.AfterUpdateHook, pollsCountyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pollsCountyAfterUpdateHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.BeforeDeleteHook, pollsCountyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pollsCountyBeforeDeleteHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.AfterDeleteHook, pollsCountyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pollsCountyAfterDeleteHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.BeforeUpsertHook, pollsCountyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pollsCountyBeforeUpsertHooks = []PollsCountyHook{}

	AddPollsCountyHook(boil.AfterUpsertHook, pollsCountyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pollsCountyAfterUpsertHooks = []PollsCountyHook{}
}

func testPollsCountiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsCountiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pollsCountyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPollsCountyToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsCounty
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.PollID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PollID != foreign.PollID {
		t.Errorf("want: %v, got %v", foreign.PollID, check.PollID)
	}

	slice := PollsCountySlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*PollsCounty)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsCountyToOneCountyUsingCounty(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PollsCounty
	var foreign County

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pollsCountyDBTypes, false, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countyDBTypes, false, countyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize County struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CountyID = foreign.CountyID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.County().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CountyID != foreign.CountyID {
		t.Errorf("want: %v, got %v", foreign.CountyID, check.CountyID)
	}

	slice := PollsCountySlice{&local}
	if err = local.L.LoadCounty(ctx, tx, false, (*[]*PollsCounty)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.County == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.County = nil
	if err = local.L.LoadCounty(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.County == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPollsCountyToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsCounty
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsCountyDBTypes, false, strmangle.SetComplement(pollsCountyPrimaryKeyColumns, pollsCountyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsCounties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.PollID {
			t.Error("foreign key was wrong value", a.PollID, x.PollID)
		}
	}
}
func testPollsCountyToOneSetOpCountyUsingCounty(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PollsCounty
	var b, c County

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pollsCountyDBTypes, false, strmangle.SetComplement(pollsCountyPrimaryKeyColumns, pollsCountyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countyDBTypes, false, strmangle.SetComplement(countyPrimaryKeyColumns, countyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countyDBTypes, false, strmangle.SetComplement(countyPrimaryKeyColumns, countyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*County{&b, &c} {
		err = a.SetCounty(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.County != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PollsCounties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountyID != x.CountyID {
			t.Error("foreign key was wrong value", a.CountyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountyID))
		reflect.Indirect(reflect.ValueOf(&a.CountyID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountyID != x.CountyID {
			t.Error("foreign key was wrong value", a.CountyID, x.CountyID)
		}
	}
}

func testPollsCountiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsCountiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PollsCountySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPollsCountiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PollsCounties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pollsCountyDBTypes = map[string]string{`CountyID`: `int8`, `PollCountyID`: `int8`, `PollID`: `int8`}
	_                  = bytes.MinRead
)

func testPollsCountiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pollsCountyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pollsCountyColumns) == len(pollsCountyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPollsCountiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pollsCountyColumns) == len(pollsCountyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PollsCounty{}
	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pollsCountyDBTypes, true, pollsCountyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pollsCountyColumns, pollsCountyPrimaryKeyColumns) {
		fields = pollsCountyColumns
	} else {
		fields = strmangle.SetComplement(
			pollsCountyColumns,
			pollsCountyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PollsCountySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPollsCountiesUpsert(t *testing.T) {
	t.Parallel()

	if len(pollsCountyColumns) == len(pollsCountyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PollsCounty{}
	if err = randomize.Struct(seed, &o, pollsCountyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsCounty: %s", err)
	}

	count, err := PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pollsCountyDBTypes, false, pollsCountyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PollsCounty struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PollsCounty: %s", err)
	}

	count, err = PollsCounties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
