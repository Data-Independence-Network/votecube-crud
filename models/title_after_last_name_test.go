// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTitleAfterLastNames(t *testing.T) {
	t.Parallel()

	query := TitleAfterLastNames()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTitleAfterLastNamesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTitleAfterLastNamesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TitleAfterLastNames().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTitleAfterLastNamesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TitleAfterLastNameSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTitleAfterLastNamesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TitleAfterLastNameExists(ctx, tx, o.TitleAfterLastNameID)
	if err != nil {
		t.Errorf("Unable to check if TitleAfterLastName exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TitleAfterLastNameExists to return true, but got false.")
	}
}

func testTitleAfterLastNamesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	titleAfterLastNameFound, err := FindTitleAfterLastName(ctx, tx, o.TitleAfterLastNameID)
	if err != nil {
		t.Error(err)
	}

	if titleAfterLastNameFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTitleAfterLastNamesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TitleAfterLastNames().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTitleAfterLastNamesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TitleAfterLastNames().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTitleAfterLastNamesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	titleAfterLastNameOne := &TitleAfterLastName{}
	titleAfterLastNameTwo := &TitleAfterLastName{}
	if err = randomize.Struct(seed, titleAfterLastNameOne, titleAfterLastNameDBTypes, false, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}
	if err = randomize.Struct(seed, titleAfterLastNameTwo, titleAfterLastNameDBTypes, false, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = titleAfterLastNameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = titleAfterLastNameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TitleAfterLastNames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTitleAfterLastNamesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	titleAfterLastNameOne := &TitleAfterLastName{}
	titleAfterLastNameTwo := &TitleAfterLastName{}
	if err = randomize.Struct(seed, titleAfterLastNameOne, titleAfterLastNameDBTypes, false, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}
	if err = randomize.Struct(seed, titleAfterLastNameTwo, titleAfterLastNameDBTypes, false, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = titleAfterLastNameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = titleAfterLastNameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func titleAfterLastNameBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func titleAfterLastNameAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TitleAfterLastName) error {
	*o = TitleAfterLastName{}
	return nil
}

func testTitleAfterLastNamesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TitleAfterLastName{}
	o := &TitleAfterLastName{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName object: %s", err)
	}

	AddTitleAfterLastNameHook(boil.BeforeInsertHook, titleAfterLastNameBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameBeforeInsertHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.AfterInsertHook, titleAfterLastNameAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameAfterInsertHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.AfterSelectHook, titleAfterLastNameAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameAfterSelectHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.BeforeUpdateHook, titleAfterLastNameBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameBeforeUpdateHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.AfterUpdateHook, titleAfterLastNameAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameAfterUpdateHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.BeforeDeleteHook, titleAfterLastNameBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameBeforeDeleteHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.AfterDeleteHook, titleAfterLastNameAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameAfterDeleteHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.BeforeUpsertHook, titleAfterLastNameBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameBeforeUpsertHooks = []TitleAfterLastNameHook{}

	AddTitleAfterLastNameHook(boil.AfterUpsertHook, titleAfterLastNameAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	titleAfterLastNameAfterUpsertHooks = []TitleAfterLastNameHook{}
}

func testTitleAfterLastNamesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTitleAfterLastNamesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(titleAfterLastNameColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTitleAfterLastNameToManyUserPersonalInfoTitleAfterLastNames(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TitleAfterLastName
	var b, c UserPersonalInfoTitleAfterLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userPersonalInfoTitleAfterLastNameDBTypes, false, userPersonalInfoTitleAfterLastNameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userPersonalInfoTitleAfterLastNameDBTypes, false, userPersonalInfoTitleAfterLastNameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TitleAfterLastNameID = a.TitleAfterLastNameID
	c.TitleAfterLastNameID = a.TitleAfterLastNameID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userPersonalInfoTitleAfterLastName, err := a.UserPersonalInfoTitleAfterLastNames().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userPersonalInfoTitleAfterLastName {
		if v.TitleAfterLastNameID == b.TitleAfterLastNameID {
			bFound = true
		}
		if v.TitleAfterLastNameID == c.TitleAfterLastNameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TitleAfterLastNameSlice{&a}
	if err = a.L.LoadUserPersonalInfoTitleAfterLastNames(ctx, tx, false, (*[]*TitleAfterLastName)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoTitleAfterLastNames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserPersonalInfoTitleAfterLastNames = nil
	if err = a.L.LoadUserPersonalInfoTitleAfterLastNames(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserPersonalInfoTitleAfterLastNames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userPersonalInfoTitleAfterLastName)
	}
}

func testTitleAfterLastNameToManyAddOpUserPersonalInfoTitleAfterLastNames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TitleAfterLastName
	var b, c, d, e UserPersonalInfoTitleAfterLastName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, titleAfterLastNameDBTypes, false, strmangle.SetComplement(titleAfterLastNamePrimaryKeyColumns, titleAfterLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserPersonalInfoTitleAfterLastName{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userPersonalInfoTitleAfterLastNameDBTypes, false, strmangle.SetComplement(userPersonalInfoTitleAfterLastNamePrimaryKeyColumns, userPersonalInfoTitleAfterLastNameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserPersonalInfoTitleAfterLastName{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserPersonalInfoTitleAfterLastNames(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TitleAfterLastNameID != first.TitleAfterLastNameID {
			t.Error("foreign key was wrong value", a.TitleAfterLastNameID, first.TitleAfterLastNameID)
		}
		if a.TitleAfterLastNameID != second.TitleAfterLastNameID {
			t.Error("foreign key was wrong value", a.TitleAfterLastNameID, second.TitleAfterLastNameID)
		}

		if first.R.TitleAfterLastName != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TitleAfterLastName != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserPersonalInfoTitleAfterLastNames[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserPersonalInfoTitleAfterLastNames[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserPersonalInfoTitleAfterLastNames().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTitleAfterLastNamesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTitleAfterLastNamesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TitleAfterLastNameSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTitleAfterLastNamesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TitleAfterLastNames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	titleAfterLastNameDBTypes = map[string]string{`TitleAfterLastName`: `varchar`, `TitleAfterLastNameID`: `int8`}
	_                         = bytes.MinRead
)

func testTitleAfterLastNamesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(titleAfterLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(titleAfterLastNameColumns) == len(titleAfterLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTitleAfterLastNamesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(titleAfterLastNameColumns) == len(titleAfterLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TitleAfterLastName{}
	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, titleAfterLastNameDBTypes, true, titleAfterLastNamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(titleAfterLastNameColumns, titleAfterLastNamePrimaryKeyColumns) {
		fields = titleAfterLastNameColumns
	} else {
		fields = strmangle.SetComplement(
			titleAfterLastNameColumns,
			titleAfterLastNamePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TitleAfterLastNameSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTitleAfterLastNamesUpsert(t *testing.T) {
	t.Parallel()

	if len(titleAfterLastNameColumns) == len(titleAfterLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TitleAfterLastName{}
	if err = randomize.Struct(seed, &o, titleAfterLastNameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TitleAfterLastName: %s", err)
	}

	count, err := TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, titleAfterLastNameDBTypes, false, titleAfterLastNamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TitleAfterLastName struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TitleAfterLastName: %s", err)
	}

	count, err = TitleAfterLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
