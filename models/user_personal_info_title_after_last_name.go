// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserPersonalInfoTitleAfterLastName is an object representing the database table.
type UserPersonalInfoTitleAfterLastName struct {
	UserPersonalInfoTitleAfterLastNameID int64 `boil:"user_personal_info_title_after_last_name_id" json:"user_personal_info_title_after_last_name_id" toml:"user_personal_info_title_after_last_name_id" yaml:"user_personal_info_title_after_last_name_id"`
	TitleAfterLastNameID                 int64 `boil:"title_after_last_name_id" json:"title_after_last_name_id" toml:"title_after_last_name_id" yaml:"title_after_last_name_id"`
	UserPersonalInfoID                   int64 `boil:"user_personal_info_id" json:"user_personal_info_id" toml:"user_personal_info_id" yaml:"user_personal_info_id"`
	TitleAfterLastNamePosition           int16 `boil:"title_after_last_name_position" json:"title_after_last_name_position" toml:"title_after_last_name_position" yaml:"title_after_last_name_position"`

	R *userPersonalInfoTitleAfterLastNameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPersonalInfoTitleAfterLastNameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPersonalInfoTitleAfterLastNameColumns = struct {
	UserPersonalInfoTitleAfterLastNameID string
	TitleAfterLastNameID                 string
	UserPersonalInfoID                   string
	TitleAfterLastNamePosition           string
}{
	UserPersonalInfoTitleAfterLastNameID: "user_personal_info_title_after_last_name_id",
	TitleAfterLastNameID:                 "title_after_last_name_id",
	UserPersonalInfoID:                   "user_personal_info_id",
	TitleAfterLastNamePosition:           "title_after_last_name_position",
}

// UserPersonalInfoTitleAfterLastNameRels is where relationship names are stored.
var UserPersonalInfoTitleAfterLastNameRels = struct {
	UserPersonalInfo   string
	TitleAfterLastName string
}{
	UserPersonalInfo:   "UserPersonalInfo",
	TitleAfterLastName: "TitleAfterLastName",
}

// userPersonalInfoTitleAfterLastNameR is where relationships are stored.
type userPersonalInfoTitleAfterLastNameR struct {
	UserPersonalInfo   *UserPersonalInfo
	TitleAfterLastName *TitleAfterLastName
}

// NewStruct creates a new relationship struct
func (*userPersonalInfoTitleAfterLastNameR) NewStruct() *userPersonalInfoTitleAfterLastNameR {
	return &userPersonalInfoTitleAfterLastNameR{}
}

// userPersonalInfoTitleAfterLastNameL is where Load methods for each relationship are stored.
type userPersonalInfoTitleAfterLastNameL struct{}

var (
	userPersonalInfoTitleAfterLastNameColumns               = []string{"user_personal_info_title_after_last_name_id", "title_after_last_name_id", "user_personal_info_id", "title_after_last_name_position"}
	userPersonalInfoTitleAfterLastNameColumnsWithoutDefault = []string{"user_personal_info_title_after_last_name_id", "title_after_last_name_id", "user_personal_info_id", "title_after_last_name_position"}
	userPersonalInfoTitleAfterLastNameColumnsWithDefault    = []string{}
	userPersonalInfoTitleAfterLastNamePrimaryKeyColumns     = []string{"user_personal_info_title_after_last_name_id"}
)

type (
	// UserPersonalInfoTitleAfterLastNameSlice is an alias for a slice of pointers to UserPersonalInfoTitleAfterLastName.
	// This should generally be used opposed to []UserPersonalInfoTitleAfterLastName.
	UserPersonalInfoTitleAfterLastNameSlice []*UserPersonalInfoTitleAfterLastName
	// UserPersonalInfoTitleAfterLastNameHook is the signature for custom UserPersonalInfoTitleAfterLastName hook methods
	UserPersonalInfoTitleAfterLastNameHook func(context.Context, boil.ContextExecutor, *UserPersonalInfoTitleAfterLastName) error

	userPersonalInfoTitleAfterLastNameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPersonalInfoTitleAfterLastNameType                 = reflect.TypeOf(&UserPersonalInfoTitleAfterLastName{})
	userPersonalInfoTitleAfterLastNameMapping              = queries.MakeStructMapping(userPersonalInfoTitleAfterLastNameType)
	userPersonalInfoTitleAfterLastNamePrimaryKeyMapping, _ = queries.BindMapping(userPersonalInfoTitleAfterLastNameType, userPersonalInfoTitleAfterLastNameMapping, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns)
	userPersonalInfoTitleAfterLastNameInsertCacheMut       sync.RWMutex
	userPersonalInfoTitleAfterLastNameInsertCache          = make(map[string]insertCache)
	userPersonalInfoTitleAfterLastNameUpdateCacheMut       sync.RWMutex
	userPersonalInfoTitleAfterLastNameUpdateCache          = make(map[string]updateCache)
	userPersonalInfoTitleAfterLastNameUpsertCacheMut       sync.RWMutex
	userPersonalInfoTitleAfterLastNameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userPersonalInfoTitleAfterLastNameBeforeInsertHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameBeforeUpdateHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameBeforeDeleteHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameBeforeUpsertHooks []UserPersonalInfoTitleAfterLastNameHook

var userPersonalInfoTitleAfterLastNameAfterInsertHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameAfterSelectHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameAfterUpdateHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameAfterDeleteHooks []UserPersonalInfoTitleAfterLastNameHook
var userPersonalInfoTitleAfterLastNameAfterUpsertHooks []UserPersonalInfoTitleAfterLastNameHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPersonalInfoTitleAfterLastName) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range userPersonalInfoTitleAfterLastNameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPersonalInfoTitleAfterLastNameHook registers your hook function for all future operations.
func AddUserPersonalInfoTitleAfterLastNameHook(hookPoint boil.HookPoint, userPersonalInfoTitleAfterLastNameHook UserPersonalInfoTitleAfterLastNameHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userPersonalInfoTitleAfterLastNameBeforeInsertHooks = append(userPersonalInfoTitleAfterLastNameBeforeInsertHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.BeforeUpdateHook:
		userPersonalInfoTitleAfterLastNameBeforeUpdateHooks = append(userPersonalInfoTitleAfterLastNameBeforeUpdateHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.BeforeDeleteHook:
		userPersonalInfoTitleAfterLastNameBeforeDeleteHooks = append(userPersonalInfoTitleAfterLastNameBeforeDeleteHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.BeforeUpsertHook:
		userPersonalInfoTitleAfterLastNameBeforeUpsertHooks = append(userPersonalInfoTitleAfterLastNameBeforeUpsertHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.AfterInsertHook:
		userPersonalInfoTitleAfterLastNameAfterInsertHooks = append(userPersonalInfoTitleAfterLastNameAfterInsertHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.AfterSelectHook:
		userPersonalInfoTitleAfterLastNameAfterSelectHooks = append(userPersonalInfoTitleAfterLastNameAfterSelectHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.AfterUpdateHook:
		userPersonalInfoTitleAfterLastNameAfterUpdateHooks = append(userPersonalInfoTitleAfterLastNameAfterUpdateHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.AfterDeleteHook:
		userPersonalInfoTitleAfterLastNameAfterDeleteHooks = append(userPersonalInfoTitleAfterLastNameAfterDeleteHooks, userPersonalInfoTitleAfterLastNameHook)
	case boil.AfterUpsertHook:
		userPersonalInfoTitleAfterLastNameAfterUpsertHooks = append(userPersonalInfoTitleAfterLastNameAfterUpsertHooks, userPersonalInfoTitleAfterLastNameHook)
	}
}

// OneG returns a single userPersonalInfoTitleAfterLastName record from the query using the global executor.
func (q userPersonalInfoTitleAfterLastNameQuery) OneG(ctx context.Context) (*UserPersonalInfoTitleAfterLastName, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userPersonalInfoTitleAfterLastName record from the query.
func (q userPersonalInfoTitleAfterLastNameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPersonalInfoTitleAfterLastName, error) {
	o := &UserPersonalInfoTitleAfterLastName{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_personal_info_title_after_last_name")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserPersonalInfoTitleAfterLastName records from the query using the global executor.
func (q userPersonalInfoTitleAfterLastNameQuery) AllG(ctx context.Context) (UserPersonalInfoTitleAfterLastNameSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserPersonalInfoTitleAfterLastName records from the query.
func (q userPersonalInfoTitleAfterLastNameQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPersonalInfoTitleAfterLastNameSlice, error) {
	var o []*UserPersonalInfoTitleAfterLastName

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserPersonalInfoTitleAfterLastName slice")
	}

	if len(userPersonalInfoTitleAfterLastNameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserPersonalInfoTitleAfterLastName records in the query, and panics on error.
func (q userPersonalInfoTitleAfterLastNameQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserPersonalInfoTitleAfterLastName records in the query.
func (q userPersonalInfoTitleAfterLastNameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_personal_info_title_after_last_name rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userPersonalInfoTitleAfterLastNameQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userPersonalInfoTitleAfterLastNameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_personal_info_title_after_last_name exists")
	}

	return count > 0, nil
}

// UserPersonalInfo pointed to by the foreign key.
func (o *UserPersonalInfoTitleAfterLastName) UserPersonalInfo(mods ...qm.QueryMod) userPersonalInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_personal_info_id=?", o.UserPersonalInfoID),
	}

	queryMods = append(queryMods, mods...)

	query := UserPersonalInfos(queryMods...)
	queries.SetFrom(query.Query, "\"user_personal_info\"")

	return query
}

// TitleAfterLastName pointed to by the foreign key.
func (o *UserPersonalInfoTitleAfterLastName) TitleAfterLastName(mods ...qm.QueryMod) titleAfterLastNameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("title_after_last_name_id=?", o.TitleAfterLastNameID),
	}

	queryMods = append(queryMods, mods...)

	query := TitleAfterLastNames(queryMods...)
	queries.SetFrom(query.Query, "\"title_after_last_name\"")

	return query
}

// LoadUserPersonalInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoTitleAfterLastNameL) LoadUserPersonalInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfoTitleAfterLastName interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfoTitleAfterLastName
	var object *UserPersonalInfoTitleAfterLastName

	if singular {
		object = maybeUserPersonalInfoTitleAfterLastName.(*UserPersonalInfoTitleAfterLastName)
	} else {
		slice = *maybeUserPersonalInfoTitleAfterLastName.(*[]*UserPersonalInfoTitleAfterLastName)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoTitleAfterLastNameR{}
		}
		args = append(args, object.UserPersonalInfoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoTitleAfterLastNameR{}
			}

			for _, a := range args {
				if a == obj.UserPersonalInfoID {
					continue Outer
				}
			}

			args = append(args, obj.UserPersonalInfoID)
		}
	}

	query := NewQuery(qm.From(`user_personal_info`), qm.WhereIn(`user_personal_info_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserPersonalInfo")
	}

	var resultSlice []*UserPersonalInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserPersonalInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_personal_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_personal_info")
	}

	if len(userPersonalInfoTitleAfterLastNameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserPersonalInfo = foreign
		if foreign.R == nil {
			foreign.R = &userPersonalInfoR{}
		}
		foreign.R.UserPersonalInfoTitleAfterLastNames = append(foreign.R.UserPersonalInfoTitleAfterLastNames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserPersonalInfoID == foreign.UserPersonalInfoID {
				local.R.UserPersonalInfo = foreign
				if foreign.R == nil {
					foreign.R = &userPersonalInfoR{}
				}
				foreign.R.UserPersonalInfoTitleAfterLastNames = append(foreign.R.UserPersonalInfoTitleAfterLastNames, local)
				break
			}
		}
	}

	return nil
}

// LoadTitleAfterLastName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPersonalInfoTitleAfterLastNameL) LoadTitleAfterLastName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPersonalInfoTitleAfterLastName interface{}, mods queries.Applicator) error {
	var slice []*UserPersonalInfoTitleAfterLastName
	var object *UserPersonalInfoTitleAfterLastName

	if singular {
		object = maybeUserPersonalInfoTitleAfterLastName.(*UserPersonalInfoTitleAfterLastName)
	} else {
		slice = *maybeUserPersonalInfoTitleAfterLastName.(*[]*UserPersonalInfoTitleAfterLastName)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPersonalInfoTitleAfterLastNameR{}
		}
		args = append(args, object.TitleAfterLastNameID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPersonalInfoTitleAfterLastNameR{}
			}

			for _, a := range args {
				if a == obj.TitleAfterLastNameID {
					continue Outer
				}
			}

			args = append(args, obj.TitleAfterLastNameID)
		}
	}

	query := NewQuery(qm.From(`title_after_last_name`), qm.WhereIn(`title_after_last_name_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TitleAfterLastName")
	}

	var resultSlice []*TitleAfterLastName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TitleAfterLastName")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for title_after_last_name")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for title_after_last_name")
	}

	if len(userPersonalInfoTitleAfterLastNameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TitleAfterLastName = foreign
		if foreign.R == nil {
			foreign.R = &titleAfterLastNameR{}
		}
		foreign.R.UserPersonalInfoTitleAfterLastNames = append(foreign.R.UserPersonalInfoTitleAfterLastNames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TitleAfterLastNameID == foreign.TitleAfterLastNameID {
				local.R.TitleAfterLastName = foreign
				if foreign.R == nil {
					foreign.R = &titleAfterLastNameR{}
				}
				foreign.R.UserPersonalInfoTitleAfterLastNames = append(foreign.R.UserPersonalInfoTitleAfterLastNames, local)
				break
			}
		}
	}

	return nil
}

// SetUserPersonalInfoG of the userPersonalInfoTitleAfterLastName to the related item.
// Sets o.R.UserPersonalInfo to related.
// Adds o to related.R.UserPersonalInfoTitleAfterLastNames.
// Uses the global database handle.
func (o *UserPersonalInfoTitleAfterLastName) SetUserPersonalInfoG(ctx context.Context, insert bool, related *UserPersonalInfo) error {
	return o.SetUserPersonalInfo(ctx, boil.GetContextDB(), insert, related)
}

// SetUserPersonalInfo of the userPersonalInfoTitleAfterLastName to the related item.
// Sets o.R.UserPersonalInfo to related.
// Adds o to related.R.UserPersonalInfoTitleAfterLastNames.
func (o *UserPersonalInfoTitleAfterLastName) SetUserPersonalInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserPersonalInfo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info_title_after_last_name\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_personal_info_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns),
	)
	values := []interface{}{related.UserPersonalInfoID, o.UserPersonalInfoTitleAfterLastNameID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserPersonalInfoID = related.UserPersonalInfoID
	if o.R == nil {
		o.R = &userPersonalInfoTitleAfterLastNameR{
			UserPersonalInfo: related,
		}
	} else {
		o.R.UserPersonalInfo = related
	}

	if related.R == nil {
		related.R = &userPersonalInfoR{
			UserPersonalInfoTitleAfterLastNames: UserPersonalInfoTitleAfterLastNameSlice{o},
		}
	} else {
		related.R.UserPersonalInfoTitleAfterLastNames = append(related.R.UserPersonalInfoTitleAfterLastNames, o)
	}

	return nil
}

// SetTitleAfterLastNameG of the userPersonalInfoTitleAfterLastName to the related item.
// Sets o.R.TitleAfterLastName to related.
// Adds o to related.R.UserPersonalInfoTitleAfterLastNames.
// Uses the global database handle.
func (o *UserPersonalInfoTitleAfterLastName) SetTitleAfterLastNameG(ctx context.Context, insert bool, related *TitleAfterLastName) error {
	return o.SetTitleAfterLastName(ctx, boil.GetContextDB(), insert, related)
}

// SetTitleAfterLastName of the userPersonalInfoTitleAfterLastName to the related item.
// Sets o.R.TitleAfterLastName to related.
// Adds o to related.R.UserPersonalInfoTitleAfterLastNames.
func (o *UserPersonalInfoTitleAfterLastName) SetTitleAfterLastName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TitleAfterLastName) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_personal_info_title_after_last_name\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"title_after_last_name_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns),
	)
	values := []interface{}{related.TitleAfterLastNameID, o.UserPersonalInfoTitleAfterLastNameID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TitleAfterLastNameID = related.TitleAfterLastNameID
	if o.R == nil {
		o.R = &userPersonalInfoTitleAfterLastNameR{
			TitleAfterLastName: related,
		}
	} else {
		o.R.TitleAfterLastName = related
	}

	if related.R == nil {
		related.R = &titleAfterLastNameR{
			UserPersonalInfoTitleAfterLastNames: UserPersonalInfoTitleAfterLastNameSlice{o},
		}
	} else {
		related.R.UserPersonalInfoTitleAfterLastNames = append(related.R.UserPersonalInfoTitleAfterLastNames, o)
	}

	return nil
}

// UserPersonalInfoTitleAfterLastNames retrieves all the records using an executor.
func UserPersonalInfoTitleAfterLastNames(mods ...qm.QueryMod) userPersonalInfoTitleAfterLastNameQuery {
	mods = append(mods, qm.From("\"user_personal_info_title_after_last_name\""))
	return userPersonalInfoTitleAfterLastNameQuery{NewQuery(mods...)}
}

// FindUserPersonalInfoTitleAfterLastNameG retrieves a single record by ID.
func FindUserPersonalInfoTitleAfterLastNameG(ctx context.Context, userPersonalInfoTitleAfterLastNameID int64, selectCols ...string) (*UserPersonalInfoTitleAfterLastName, error) {
	return FindUserPersonalInfoTitleAfterLastName(ctx, boil.GetContextDB(), userPersonalInfoTitleAfterLastNameID, selectCols...)
}

// FindUserPersonalInfoTitleAfterLastName retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPersonalInfoTitleAfterLastName(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoTitleAfterLastNameID int64, selectCols ...string) (*UserPersonalInfoTitleAfterLastName, error) {
	userPersonalInfoTitleAfterLastNameObj := &UserPersonalInfoTitleAfterLastName{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_personal_info_title_after_last_name\" where \"user_personal_info_title_after_last_name_id\"=$1", sel,
	)

	q := queries.Raw(query, userPersonalInfoTitleAfterLastNameID)

	err := q.Bind(ctx, exec, userPersonalInfoTitleAfterLastNameObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_personal_info_title_after_last_name")
	}

	return userPersonalInfoTitleAfterLastNameObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserPersonalInfoTitleAfterLastName) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPersonalInfoTitleAfterLastName) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info_title_after_last_name provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoTitleAfterLastNameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPersonalInfoTitleAfterLastNameInsertCacheMut.RLock()
	cache, cached := userPersonalInfoTitleAfterLastNameInsertCache[key]
	userPersonalInfoTitleAfterLastNameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPersonalInfoTitleAfterLastNameColumns,
			userPersonalInfoTitleAfterLastNameColumnsWithDefault,
			userPersonalInfoTitleAfterLastNameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoTitleAfterLastNameType, userPersonalInfoTitleAfterLastNameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPersonalInfoTitleAfterLastNameType, userPersonalInfoTitleAfterLastNameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_personal_info_title_after_last_name\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_personal_info_title_after_last_name\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_personal_info_title_after_last_name")
	}

	if !cached {
		userPersonalInfoTitleAfterLastNameInsertCacheMut.Lock()
		userPersonalInfoTitleAfterLastNameInsertCache[key] = cache
		userPersonalInfoTitleAfterLastNameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserPersonalInfoTitleAfterLastName record using the global executor.
// See Update for more documentation.
func (o *UserPersonalInfoTitleAfterLastName) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserPersonalInfoTitleAfterLastName.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPersonalInfoTitleAfterLastName) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPersonalInfoTitleAfterLastNameUpdateCacheMut.RLock()
	cache, cached := userPersonalInfoTitleAfterLastNameUpdateCache[key]
	userPersonalInfoTitleAfterLastNameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPersonalInfoTitleAfterLastNameColumns,
			userPersonalInfoTitleAfterLastNamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_personal_info_title_after_last_name, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_personal_info_title_after_last_name\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPersonalInfoTitleAfterLastNameType, userPersonalInfoTitleAfterLastNameMapping, append(wl, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_personal_info_title_after_last_name row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_personal_info_title_after_last_name")
	}

	if !cached {
		userPersonalInfoTitleAfterLastNameUpdateCacheMut.Lock()
		userPersonalInfoTitleAfterLastNameUpdateCache[key] = cache
		userPersonalInfoTitleAfterLastNameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPersonalInfoTitleAfterLastNameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_personal_info_title_after_last_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_personal_info_title_after_last_name")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserPersonalInfoTitleAfterLastNameSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPersonalInfoTitleAfterLastNameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoTitleAfterLastNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_personal_info_title_after_last_name\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userPersonalInfoTitleAfterLastName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userPersonalInfoTitleAfterLastName")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserPersonalInfoTitleAfterLastName) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPersonalInfoTitleAfterLastName) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_personal_info_title_after_last_name provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPersonalInfoTitleAfterLastNameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPersonalInfoTitleAfterLastNameUpsertCacheMut.RLock()
	cache, cached := userPersonalInfoTitleAfterLastNameUpsertCache[key]
	userPersonalInfoTitleAfterLastNameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userPersonalInfoTitleAfterLastNameColumns,
			userPersonalInfoTitleAfterLastNameColumnsWithDefault,
			userPersonalInfoTitleAfterLastNameColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userPersonalInfoTitleAfterLastNameColumns,
			userPersonalInfoTitleAfterLastNamePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_personal_info_title_after_last_name, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPersonalInfoTitleAfterLastNamePrimaryKeyColumns))
			copy(conflict, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"user_personal_info_title_after_last_name\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userPersonalInfoTitleAfterLastNameType, userPersonalInfoTitleAfterLastNameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPersonalInfoTitleAfterLastNameType, userPersonalInfoTitleAfterLastNameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_personal_info_title_after_last_name")
	}

	if !cached {
		userPersonalInfoTitleAfterLastNameUpsertCacheMut.Lock()
		userPersonalInfoTitleAfterLastNameUpsertCache[key] = cache
		userPersonalInfoTitleAfterLastNameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserPersonalInfoTitleAfterLastName record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserPersonalInfoTitleAfterLastName) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UserPersonalInfoTitleAfterLastName record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPersonalInfoTitleAfterLastName) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfoTitleAfterLastName provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPersonalInfoTitleAfterLastNamePrimaryKeyMapping)
	sql := "DELETE FROM \"user_personal_info_title_after_last_name\" WHERE \"user_personal_info_title_after_last_name_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_personal_info_title_after_last_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_personal_info_title_after_last_name")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPersonalInfoTitleAfterLastNameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userPersonalInfoTitleAfterLastNameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_personal_info_title_after_last_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info_title_after_last_name")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserPersonalInfoTitleAfterLastNameSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPersonalInfoTitleAfterLastNameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPersonalInfoTitleAfterLastName slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userPersonalInfoTitleAfterLastNameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoTitleAfterLastNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_personal_info_title_after_last_name\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userPersonalInfoTitleAfterLastName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_personal_info_title_after_last_name")
	}

	if len(userPersonalInfoTitleAfterLastNameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserPersonalInfoTitleAfterLastName) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserPersonalInfoTitleAfterLastName provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPersonalInfoTitleAfterLastName) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPersonalInfoTitleAfterLastName(ctx, exec, o.UserPersonalInfoTitleAfterLastNameID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPersonalInfoTitleAfterLastNameSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserPersonalInfoTitleAfterLastNameSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPersonalInfoTitleAfterLastNameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPersonalInfoTitleAfterLastNameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPersonalInfoTitleAfterLastNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_personal_info_title_after_last_name\".* FROM \"user_personal_info_title_after_last_name\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPersonalInfoTitleAfterLastNamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserPersonalInfoTitleAfterLastNameSlice")
	}

	*o = slice

	return nil
}

// UserPersonalInfoTitleAfterLastNameExistsG checks if the UserPersonalInfoTitleAfterLastName row exists.
func UserPersonalInfoTitleAfterLastNameExistsG(ctx context.Context, userPersonalInfoTitleAfterLastNameID int64) (bool, error) {
	return UserPersonalInfoTitleAfterLastNameExists(ctx, boil.GetContextDB(), userPersonalInfoTitleAfterLastNameID)
}

// UserPersonalInfoTitleAfterLastNameExists checks if the UserPersonalInfoTitleAfterLastName row exists.
func UserPersonalInfoTitleAfterLastNameExists(ctx context.Context, exec boil.ContextExecutor, userPersonalInfoTitleAfterLastNameID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_personal_info_title_after_last_name\" where \"user_personal_info_title_after_last_name_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userPersonalInfoTitleAfterLastNameID)
	}

	row := exec.QueryRowContext(ctx, sql, userPersonalInfoTitleAfterLastNameID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_personal_info_title_after_last_name exists")
	}

	return exists, nil
}
