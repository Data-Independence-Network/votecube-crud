// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSuffixes(t *testing.T) {
	t.Parallel()

	query := Suffixes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSuffixesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuffixesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Suffixes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuffixesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SuffixSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuffixesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SuffixExists(ctx, tx, o.SuffixID)
	if err != nil {
		t.Errorf("Unable to check if Suffix exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SuffixExists to return true, but got false.")
	}
}

func testSuffixesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	suffixFound, err := FindSuffix(ctx, tx, o.SuffixID)
	if err != nil {
		t.Error(err)
	}

	if suffixFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSuffixesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Suffixes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSuffixesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Suffixes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSuffixesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	suffixOne := &Suffix{}
	suffixTwo := &Suffix{}
	if err = randomize.Struct(seed, suffixOne, suffixDBTypes, false, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}
	if err = randomize.Struct(seed, suffixTwo, suffixDBTypes, false, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = suffixOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = suffixTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Suffixes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSuffixesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	suffixOne := &Suffix{}
	suffixTwo := &Suffix{}
	if err = randomize.Struct(seed, suffixOne, suffixDBTypes, false, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}
	if err = randomize.Struct(seed, suffixTwo, suffixDBTypes, false, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = suffixOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = suffixTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func suffixBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func suffixAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Suffix) error {
	*o = Suffix{}
	return nil
}

func testSuffixesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Suffix{}
	o := &Suffix{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, suffixDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Suffix object: %s", err)
	}

	AddSuffixHook(boil.BeforeInsertHook, suffixBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	suffixBeforeInsertHooks = []SuffixHook{}

	AddSuffixHook(boil.AfterInsertHook, suffixAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	suffixAfterInsertHooks = []SuffixHook{}

	AddSuffixHook(boil.AfterSelectHook, suffixAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	suffixAfterSelectHooks = []SuffixHook{}

	AddSuffixHook(boil.BeforeUpdateHook, suffixBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	suffixBeforeUpdateHooks = []SuffixHook{}

	AddSuffixHook(boil.AfterUpdateHook, suffixAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	suffixAfterUpdateHooks = []SuffixHook{}

	AddSuffixHook(boil.BeforeDeleteHook, suffixBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	suffixBeforeDeleteHooks = []SuffixHook{}

	AddSuffixHook(boil.AfterDeleteHook, suffixAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	suffixAfterDeleteHooks = []SuffixHook{}

	AddSuffixHook(boil.BeforeUpsertHook, suffixBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	suffixBeforeUpsertHooks = []SuffixHook{}

	AddSuffixHook(boil.AfterUpsertHook, suffixAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	suffixAfterUpsertHooks = []SuffixHook{}
}

func testSuffixesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuffixesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(suffixColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuffixToManyUserAccountSuffixes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Suffix
	var b, c UserAccountSuffix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountSuffixDBTypes, false, userAccountSuffixColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SuffixID = a.SuffixID
	c.SuffixID = a.SuffixID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userAccountSuffix, err := a.UserAccountSuffixes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userAccountSuffix {
		if v.SuffixID == b.SuffixID {
			bFound = true
		}
		if v.SuffixID == c.SuffixID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SuffixSlice{&a}
	if err = a.L.LoadUserAccountSuffixes(ctx, tx, false, (*[]*Suffix)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccountSuffixes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserAccountSuffixes = nil
	if err = a.L.LoadUserAccountSuffixes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccountSuffixes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userAccountSuffix)
	}
}

func testSuffixToManyAddOpUserAccountSuffixes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Suffix
	var b, c, d, e UserAccountSuffix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, suffixDBTypes, false, strmangle.SetComplement(suffixPrimaryKeyColumns, suffixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAccountSuffix{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAccountSuffixDBTypes, false, strmangle.SetComplement(userAccountSuffixPrimaryKeyColumns, userAccountSuffixColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserAccountSuffix{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserAccountSuffixes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.SuffixID != first.SuffixID {
			t.Error("foreign key was wrong value", a.SuffixID, first.SuffixID)
		}
		if a.SuffixID != second.SuffixID {
			t.Error("foreign key was wrong value", a.SuffixID, second.SuffixID)
		}

		if first.R.Suffix != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Suffix != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserAccountSuffixes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserAccountSuffixes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserAccountSuffixes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSuffixesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSuffixesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SuffixSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSuffixesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Suffixes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	suffixDBTypes = map[string]string{`SuffixID`: `int8`, `SuffixName`: `varchar`}
	_             = bytes.MinRead
)

func testSuffixesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(suffixPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(suffixColumns) == len(suffixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSuffixesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(suffixColumns) == len(suffixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Suffix{}
	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, suffixDBTypes, true, suffixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(suffixColumns, suffixPrimaryKeyColumns) {
		fields = suffixColumns
	} else {
		fields = strmangle.SetComplement(
			suffixColumns,
			suffixPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SuffixSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSuffixesUpsert(t *testing.T) {
	t.Parallel()

	if len(suffixColumns) == len(suffixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Suffix{}
	if err = randomize.Struct(seed, &o, suffixDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Suffix: %s", err)
	}

	count, err := Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, suffixDBTypes, false, suffixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Suffix struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Suffix: %s", err)
	}

	count, err = Suffixes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
