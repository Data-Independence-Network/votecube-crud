// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPrefixLastNames(t *testing.T) {
	t.Parallel()

	query := PrefixLastNames()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPrefixLastNamesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefixLastNamesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PrefixLastNames().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefixLastNamesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrefixLastNameSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPrefixLastNamesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PrefixLastNameExists(ctx, tx, o.PrefixLastNameID)
	if err != nil {
		t.Errorf("Unable to check if PrefixLastName exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PrefixLastNameExists to return true, but got false.")
	}
}

func testPrefixLastNamesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	prefixLastNameFound, err := FindPrefixLastName(ctx, tx, o.PrefixLastNameID)
	if err != nil {
		t.Error(err)
	}

	if prefixLastNameFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPrefixLastNamesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PrefixLastNames().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPrefixLastNamesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PrefixLastNames().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPrefixLastNamesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	prefixLastNameOne := &PrefixLastName{}
	prefixLastNameTwo := &PrefixLastName{}
	if err = randomize.Struct(seed, prefixLastNameOne, prefixLastNameDBTypes, false, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}
	if err = randomize.Struct(seed, prefixLastNameTwo, prefixLastNameDBTypes, false, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prefixLastNameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prefixLastNameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PrefixLastNames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPrefixLastNamesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	prefixLastNameOne := &PrefixLastName{}
	prefixLastNameTwo := &PrefixLastName{}
	if err = randomize.Struct(seed, prefixLastNameOne, prefixLastNameDBTypes, false, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}
	if err = randomize.Struct(seed, prefixLastNameTwo, prefixLastNameDBTypes, false, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = prefixLastNameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = prefixLastNameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func prefixLastNameBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func prefixLastNameAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PrefixLastName) error {
	*o = PrefixLastName{}
	return nil
}

func testPrefixLastNamesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PrefixLastName{}
	o := &PrefixLastName{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PrefixLastName object: %s", err)
	}

	AddPrefixLastNameHook(boil.BeforeInsertHook, prefixLastNameBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	prefixLastNameBeforeInsertHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.AfterInsertHook, prefixLastNameAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	prefixLastNameAfterInsertHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.AfterSelectHook, prefixLastNameAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	prefixLastNameAfterSelectHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.BeforeUpdateHook, prefixLastNameBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	prefixLastNameBeforeUpdateHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.AfterUpdateHook, prefixLastNameAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	prefixLastNameAfterUpdateHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.BeforeDeleteHook, prefixLastNameBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	prefixLastNameBeforeDeleteHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.AfterDeleteHook, prefixLastNameAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	prefixLastNameAfterDeleteHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.BeforeUpsertHook, prefixLastNameBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	prefixLastNameBeforeUpsertHooks = []PrefixLastNameHook{}

	AddPrefixLastNameHook(boil.AfterUpsertHook, prefixLastNameAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	prefixLastNameAfterUpsertHooks = []PrefixLastNameHook{}
}

func testPrefixLastNamesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrefixLastNamesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(prefixLastNameColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPrefixLastNameToManyUserAccounts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PrefixLastName
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PrefixLastNameID = a.PrefixLastNameID
	c.PrefixLastNameID = a.PrefixLastNameID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	userAccount, err := a.UserAccounts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range userAccount {
		if v.PrefixLastNameID == b.PrefixLastNameID {
			bFound = true
		}
		if v.PrefixLastNameID == c.PrefixLastNameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PrefixLastNameSlice{&a}
	if err = a.L.LoadUserAccounts(ctx, tx, false, (*[]*PrefixLastName)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserAccounts = nil
	if err = a.L.LoadUserAccounts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserAccounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", userAccount)
	}
}

func testPrefixLastNameToManyAddOpUserAccounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PrefixLastName
	var b, c, d, e UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, prefixLastNameDBTypes, false, strmangle.SetComplement(prefixLastNamePrimaryKeyColumns, prefixLastNameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAccount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserAccount{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserAccounts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PrefixLastNameID != first.PrefixLastNameID {
			t.Error("foreign key was wrong value", a.PrefixLastNameID, first.PrefixLastNameID)
		}
		if a.PrefixLastNameID != second.PrefixLastNameID {
			t.Error("foreign key was wrong value", a.PrefixLastNameID, second.PrefixLastNameID)
		}

		if first.R.PrefixLastName != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PrefixLastName != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserAccounts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserAccounts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserAccounts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPrefixLastNamesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrefixLastNamesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PrefixLastNameSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPrefixLastNamesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PrefixLastNames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	prefixLastNameDBTypes = map[string]string{`PrefixLastName`: `varchar`, `PrefixLastNameID`: `int8`}
	_                     = bytes.MinRead
)

func testPrefixLastNamesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(prefixLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(prefixLastNameColumns) == len(prefixLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPrefixLastNamesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(prefixLastNameColumns) == len(prefixLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PrefixLastName{}
	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, prefixLastNameDBTypes, true, prefixLastNamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(prefixLastNameColumns, prefixLastNamePrimaryKeyColumns) {
		fields = prefixLastNameColumns
	} else {
		fields = strmangle.SetComplement(
			prefixLastNameColumns,
			prefixLastNamePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PrefixLastNameSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPrefixLastNamesUpsert(t *testing.T) {
	t.Parallel()

	if len(prefixLastNameColumns) == len(prefixLastNamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PrefixLastName{}
	if err = randomize.Struct(seed, &o, prefixLastNameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PrefixLastName: %s", err)
	}

	count, err := PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, prefixLastNameDBTypes, false, prefixLastNamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PrefixLastName struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PrefixLastName: %s", err)
	}

	count, err = PrefixLastNames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
