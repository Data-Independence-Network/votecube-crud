// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserAccountEthnicities(t *testing.T) {
	t.Parallel()

	query := UserAccountEthnicities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserAccountEthnicitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountEthnicitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserAccountEthnicities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountEthnicitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountEthnicitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountEthnicitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserAccountEthnicityExists(ctx, tx, o.UserAccountEthnicityID)
	if err != nil {
		t.Errorf("Unable to check if UserAccountEthnicity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAccountEthnicityExists to return true, but got false.")
	}
}

func testUserAccountEthnicitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userAccountEthnicityFound, err := FindUserAccountEthnicity(ctx, tx, o.UserAccountEthnicityID)
	if err != nil {
		t.Error(err)
	}

	if userAccountEthnicityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserAccountEthnicitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserAccountEthnicities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserAccountEthnicitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserAccountEthnicities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAccountEthnicitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountEthnicityOne := &UserAccountEthnicity{}
	userAccountEthnicityTwo := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, userAccountEthnicityOne, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountEthnicityTwo, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountEthnicityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountEthnicityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccountEthnicities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAccountEthnicitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAccountEthnicityOne := &UserAccountEthnicity{}
	userAccountEthnicityTwo := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, userAccountEthnicityOne, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountEthnicityTwo, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountEthnicityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountEthnicityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userAccountEthnicityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func userAccountEthnicityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccountEthnicity) error {
	*o = UserAccountEthnicity{}
	return nil
}

func testUserAccountEthnicitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserAccountEthnicity{}
	o := &UserAccountEthnicity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity object: %s", err)
	}

	AddUserAccountEthnicityHook(boil.BeforeInsertHook, userAccountEthnicityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityBeforeInsertHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.AfterInsertHook, userAccountEthnicityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityAfterInsertHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.AfterSelectHook, userAccountEthnicityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityAfterSelectHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.BeforeUpdateHook, userAccountEthnicityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityBeforeUpdateHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.AfterUpdateHook, userAccountEthnicityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityAfterUpdateHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.BeforeDeleteHook, userAccountEthnicityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityBeforeDeleteHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.AfterDeleteHook, userAccountEthnicityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityAfterDeleteHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.BeforeUpsertHook, userAccountEthnicityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityBeforeUpsertHooks = []UserAccountEthnicityHook{}

	AddUserAccountEthnicityHook(boil.AfterUpsertHook, userAccountEthnicityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountEthnicityAfterUpsertHooks = []UserAccountEthnicityHook{}
}

func testUserAccountEthnicitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountEthnicitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userAccountEthnicityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountEthnicityToOneUserAccountUsingUserAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAccountEthnicity
	var foreign UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserAccountID = foreign.UserAccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserAccountID != foreign.UserAccountID {
		t.Errorf("want: %v, got %v", foreign.UserAccountID, check.UserAccountID)
	}

	slice := UserAccountEthnicitySlice{&local}
	if err = local.L.LoadUserAccount(ctx, tx, false, (*[]*UserAccountEthnicity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserAccount = nil
	if err = local.L.LoadUserAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountEthnicityToOneEthnicSubgroupUsingEthnicSubgroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAccountEthnicity
	var foreign EthnicSubgroup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountEthnicityDBTypes, false, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ethnicSubgroupDBTypes, false, ethnicSubgroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EthnicSubgroup struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EthnicSubgroupID = foreign.EthnicSubgroupID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.EthnicSubgroup().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.EthnicSubgroupID != foreign.EthnicSubgroupID {
		t.Errorf("want: %v, got %v", foreign.EthnicSubgroupID, check.EthnicSubgroupID)
	}

	slice := UserAccountEthnicitySlice{&local}
	if err = local.L.LoadEthnicSubgroup(ctx, tx, false, (*[]*UserAccountEthnicity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EthnicSubgroup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EthnicSubgroup = nil
	if err = local.L.LoadEthnicSubgroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EthnicSubgroup == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountEthnicityToOneSetOpUserAccountUsingUserAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccountEthnicity
	var b, c UserAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountEthnicityDBTypes, false, strmangle.SetComplement(userAccountEthnicityPrimaryKeyColumns, userAccountEthnicityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserAccount{&b, &c} {
		err = a.SetUserAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccountEthnicities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserAccountID))
		reflect.Indirect(reflect.ValueOf(&a.UserAccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserAccountID != x.UserAccountID {
			t.Error("foreign key was wrong value", a.UserAccountID, x.UserAccountID)
		}
	}
}
func testUserAccountEthnicityToOneSetOpEthnicSubgroupUsingEthnicSubgroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccountEthnicity
	var b, c EthnicSubgroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountEthnicityDBTypes, false, strmangle.SetComplement(userAccountEthnicityPrimaryKeyColumns, userAccountEthnicityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ethnicSubgroupDBTypes, false, strmangle.SetComplement(ethnicSubgroupPrimaryKeyColumns, ethnicSubgroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ethnicSubgroupDBTypes, false, strmangle.SetComplement(ethnicSubgroupPrimaryKeyColumns, ethnicSubgroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*EthnicSubgroup{&b, &c} {
		err = a.SetEthnicSubgroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EthnicSubgroup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccountEthnicities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EthnicSubgroupID != x.EthnicSubgroupID {
			t.Error("foreign key was wrong value", a.EthnicSubgroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EthnicSubgroupID))
		reflect.Indirect(reflect.ValueOf(&a.EthnicSubgroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EthnicSubgroupID != x.EthnicSubgroupID {
			t.Error("foreign key was wrong value", a.EthnicSubgroupID, x.EthnicSubgroupID)
		}
	}
}

func testUserAccountEthnicitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountEthnicitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountEthnicitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountEthnicitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccountEthnicities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAccountEthnicityDBTypes = map[string]string{`EthnicSubgroupID`: `int8`, `EthnicityPercent`: `int2`, `UserAccountEthnicityID`: `int8`, `UserAccountID`: `int8`}
	_                           = bytes.MinRead
)

func testUserAccountEthnicitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userAccountEthnicityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAccountEthnicityColumns) == len(userAccountEthnicityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserAccountEthnicitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAccountEthnicityColumns) == len(userAccountEthnicityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccountEthnicity{}
	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountEthnicityDBTypes, true, userAccountEthnicityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAccountEthnicityColumns, userAccountEthnicityPrimaryKeyColumns) {
		fields = userAccountEthnicityColumns
	} else {
		fields = strmangle.SetComplement(
			userAccountEthnicityColumns,
			userAccountEthnicityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserAccountEthnicitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserAccountEthnicitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(userAccountEthnicityColumns) == len(userAccountEthnicityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserAccountEthnicity{}
	if err = randomize.Struct(seed, &o, userAccountEthnicityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccountEthnicity: %s", err)
	}

	count, err := UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userAccountEthnicityDBTypes, false, userAccountEthnicityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountEthnicity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccountEthnicity: %s", err)
	}

	count, err = UserAccountEthnicities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
