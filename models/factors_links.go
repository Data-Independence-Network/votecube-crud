// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FactorsLink is an object representing the database table.
type FactorsLink struct {
	FactorsLinkID int64     `boil:"factors_link_id" json:"factors_link_id" toml:"factors_link_id" yaml:"factors_link_id"`
	FactorsID     int64     `boil:"factors_id" json:"factors_id" toml:"factors_id" yaml:"factors_id"`
	LinksID       int64     `boil:"links_id" json:"links_id" toml:"links_id" yaml:"links_id"`
	UserAccountID int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *factorsLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L factorsLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactorsLinkColumns = struct {
	FactorsLinkID string
	FactorsID     string
	LinksID       string
	UserAccountID string
	CreatedAt     string
}{
	FactorsLinkID: "factors_link_id",
	FactorsID:     "factors_id",
	LinksID:       "links_id",
	UserAccountID: "user_account_id",
	CreatedAt:     "created_at",
}

// FactorsLinkRels is where relationship names are stored.
var FactorsLinkRels = struct {
	UserAccount string
	Link        string
	Factor      string
}{
	UserAccount: "UserAccount",
	Link:        "Link",
	Factor:      "Factor",
}

// factorsLinkR is where relationships are stored.
type factorsLinkR struct {
	UserAccount *UserAccount
	Link        *Link
	Factor      *Factor
}

// NewStruct creates a new relationship struct
func (*factorsLinkR) NewStruct() *factorsLinkR {
	return &factorsLinkR{}
}

// factorsLinkL is where Load methods for each relationship are stored.
type factorsLinkL struct{}

var (
	factorsLinkColumns               = []string{"factors_link_id", "factors_id", "links_id", "user_account_id", "created_at"}
	factorsLinkColumnsWithoutDefault = []string{"factors_link_id", "factors_id", "links_id", "user_account_id", "created_at"}
	factorsLinkColumnsWithDefault    = []string{}
	factorsLinkPrimaryKeyColumns     = []string{"factors_link_id"}
)

type (
	// FactorsLinkSlice is an alias for a slice of pointers to FactorsLink.
	// This should generally be used opposed to []FactorsLink.
	FactorsLinkSlice []*FactorsLink
	// FactorsLinkHook is the signature for custom FactorsLink hook methods
	FactorsLinkHook func(context.Context, boil.ContextExecutor, *FactorsLink) error

	factorsLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factorsLinkType                 = reflect.TypeOf(&FactorsLink{})
	factorsLinkMapping              = queries.MakeStructMapping(factorsLinkType)
	factorsLinkPrimaryKeyMapping, _ = queries.BindMapping(factorsLinkType, factorsLinkMapping, factorsLinkPrimaryKeyColumns)
	factorsLinkInsertCacheMut       sync.RWMutex
	factorsLinkInsertCache          = make(map[string]insertCache)
	factorsLinkUpdateCacheMut       sync.RWMutex
	factorsLinkUpdateCache          = make(map[string]updateCache)
	factorsLinkUpsertCacheMut       sync.RWMutex
	factorsLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var factorsLinkBeforeInsertHooks []FactorsLinkHook
var factorsLinkBeforeUpdateHooks []FactorsLinkHook
var factorsLinkBeforeDeleteHooks []FactorsLinkHook
var factorsLinkBeforeUpsertHooks []FactorsLinkHook

var factorsLinkAfterInsertHooks []FactorsLinkHook
var factorsLinkAfterSelectHooks []FactorsLinkHook
var factorsLinkAfterUpdateHooks []FactorsLinkHook
var factorsLinkAfterDeleteHooks []FactorsLinkHook
var factorsLinkAfterUpsertHooks []FactorsLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FactorsLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FactorsLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FactorsLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FactorsLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FactorsLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FactorsLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FactorsLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FactorsLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FactorsLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range factorsLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactorsLinkHook registers your hook function for all future operations.
func AddFactorsLinkHook(hookPoint boil.HookPoint, factorsLinkHook FactorsLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		factorsLinkBeforeInsertHooks = append(factorsLinkBeforeInsertHooks, factorsLinkHook)
	case boil.BeforeUpdateHook:
		factorsLinkBeforeUpdateHooks = append(factorsLinkBeforeUpdateHooks, factorsLinkHook)
	case boil.BeforeDeleteHook:
		factorsLinkBeforeDeleteHooks = append(factorsLinkBeforeDeleteHooks, factorsLinkHook)
	case boil.BeforeUpsertHook:
		factorsLinkBeforeUpsertHooks = append(factorsLinkBeforeUpsertHooks, factorsLinkHook)
	case boil.AfterInsertHook:
		factorsLinkAfterInsertHooks = append(factorsLinkAfterInsertHooks, factorsLinkHook)
	case boil.AfterSelectHook:
		factorsLinkAfterSelectHooks = append(factorsLinkAfterSelectHooks, factorsLinkHook)
	case boil.AfterUpdateHook:
		factorsLinkAfterUpdateHooks = append(factorsLinkAfterUpdateHooks, factorsLinkHook)
	case boil.AfterDeleteHook:
		factorsLinkAfterDeleteHooks = append(factorsLinkAfterDeleteHooks, factorsLinkHook)
	case boil.AfterUpsertHook:
		factorsLinkAfterUpsertHooks = append(factorsLinkAfterUpsertHooks, factorsLinkHook)
	}
}

// One returns a single factorsLink record from the query.
func (q factorsLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FactorsLink, error) {
	o := &FactorsLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for factors_links")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FactorsLink records from the query.
func (q factorsLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (FactorsLinkSlice, error) {
	var o []*FactorsLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FactorsLink slice")
	}

	if len(factorsLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FactorsLink records in the query.
func (q factorsLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count factors_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factorsLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if factors_links exists")
	}

	return count > 0, nil
}

// UserAccount pointed to by the foreign key.
func (o *FactorsLink) UserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_account_id=?", o.UserAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := UserAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Link pointed to by the foreign key.
func (o *FactorsLink) Link(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("link_id=?", o.LinksID),
	}

	queryMods = append(queryMods, mods...)

	query := Links(queryMods...)
	queries.SetFrom(query.Query, "\"links\"")

	return query
}

// Factor pointed to by the foreign key.
func (o *FactorsLink) Factor(mods ...qm.QueryMod) factorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("factor_id=?", o.FactorsID),
	}

	queryMods = append(queryMods, mods...)

	query := Factors(queryMods...)
	queries.SetFrom(query.Query, "\"factors\"")

	return query
}

// LoadUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factorsLinkL) LoadUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactorsLink interface{}, mods queries.Applicator) error {
	var slice []*FactorsLink
	var object *FactorsLink

	if singular {
		object = maybeFactorsLink.(*FactorsLink)
	} else {
		slice = *maybeFactorsLink.(*[]*FactorsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorsLinkR{}
		}
		args = append(args, object.UserAccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorsLinkR{}
			}

			for _, a := range args {
				if a == obj.UserAccountID {
					continue Outer
				}
			}

			args = append(args, obj.UserAccountID)
		}
	}

	query := NewQuery(qm.From(`user_account`), qm.WhereIn(`user_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(factorsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.FactorsLinks = append(foreign.R.FactorsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserAccountID == foreign.UserAccountID {
				local.R.UserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.FactorsLinks = append(foreign.R.FactorsLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factorsLinkL) LoadLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactorsLink interface{}, mods queries.Applicator) error {
	var slice []*FactorsLink
	var object *FactorsLink

	if singular {
		object = maybeFactorsLink.(*FactorsLink)
	} else {
		slice = *maybeFactorsLink.(*[]*FactorsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorsLinkR{}
		}
		args = append(args, object.LinksID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorsLinkR{}
			}

			for _, a := range args {
				if a == obj.LinksID {
					continue Outer
				}
			}

			args = append(args, obj.LinksID)
		}
	}

	query := NewQuery(qm.From(`links`), qm.WhereIn(`link_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(factorsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Link = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.FactorsLinks = append(foreign.R.FactorsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinksID == foreign.LinkID {
				local.R.Link = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.FactorsLinks = append(foreign.R.FactorsLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadFactor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factorsLinkL) LoadFactor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFactorsLink interface{}, mods queries.Applicator) error {
	var slice []*FactorsLink
	var object *FactorsLink

	if singular {
		object = maybeFactorsLink.(*FactorsLink)
	} else {
		slice = *maybeFactorsLink.(*[]*FactorsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factorsLinkR{}
		}
		args = append(args, object.FactorsID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factorsLinkR{}
			}

			for _, a := range args {
				if a == obj.FactorsID {
					continue Outer
				}
			}

			args = append(args, obj.FactorsID)
		}
	}

	query := NewQuery(qm.From(`factors`), qm.WhereIn(`factor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Factor")
	}

	var resultSlice []*Factor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Factor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factors")
	}

	if len(factorsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Factor = foreign
		if foreign.R == nil {
			foreign.R = &factorR{}
		}
		foreign.R.FactorsLinks = append(foreign.R.FactorsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactorsID == foreign.FactorID {
				local.R.Factor = foreign
				if foreign.R == nil {
					foreign.R = &factorR{}
				}
				foreign.R.FactorsLinks = append(foreign.R.FactorsLinks, local)
				break
			}
		}
	}

	return nil
}

// SetUserAccount of the factorsLink to the related item.
// Sets o.R.UserAccount to related.
// Adds o to related.R.FactorsLinks.
func (o *FactorsLink) SetUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factors_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, factorsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.UserAccountID, o.FactorsLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserAccountID = related.UserAccountID
	if o.R == nil {
		o.R = &factorsLinkR{
			UserAccount: related,
		}
	} else {
		o.R.UserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			FactorsLinks: FactorsLinkSlice{o},
		}
	} else {
		related.R.FactorsLinks = append(related.R.FactorsLinks, o)
	}

	return nil
}

// SetLink of the factorsLink to the related item.
// Sets o.R.Link to related.
// Adds o to related.R.FactorsLinks.
func (o *FactorsLink) SetLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factors_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"links_id"}),
		strmangle.WhereClause("\"", "\"", 2, factorsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.LinkID, o.FactorsLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinksID = related.LinkID
	if o.R == nil {
		o.R = &factorsLinkR{
			Link: related,
		}
	} else {
		o.R.Link = related
	}

	if related.R == nil {
		related.R = &linkR{
			FactorsLinks: FactorsLinkSlice{o},
		}
	} else {
		related.R.FactorsLinks = append(related.R.FactorsLinks, o)
	}

	return nil
}

// SetFactor of the factorsLink to the related item.
// Sets o.R.Factor to related.
// Adds o to related.R.FactorsLinks.
func (o *FactorsLink) SetFactor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Factor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"factors_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"factors_id"}),
		strmangle.WhereClause("\"", "\"", 2, factorsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.FactorID, o.FactorsLinkID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactorsID = related.FactorID
	if o.R == nil {
		o.R = &factorsLinkR{
			Factor: related,
		}
	} else {
		o.R.Factor = related
	}

	if related.R == nil {
		related.R = &factorR{
			FactorsLinks: FactorsLinkSlice{o},
		}
	} else {
		related.R.FactorsLinks = append(related.R.FactorsLinks, o)
	}

	return nil
}

// FactorsLinks retrieves all the records using an executor.
func FactorsLinks(mods ...qm.QueryMod) factorsLinkQuery {
	mods = append(mods, qm.From("\"factors_links\""))
	return factorsLinkQuery{NewQuery(mods...)}
}

// FindFactorsLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFactorsLink(ctx context.Context, exec boil.ContextExecutor, factorsLinkID int64, selectCols ...string) (*FactorsLink, error) {
	factorsLinkObj := &FactorsLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"factors_links\" where \"factors_link_id\"=$1", sel,
	)

	q := queries.Raw(query, factorsLinkID)

	err := q.Bind(ctx, exec, factorsLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from factors_links")
	}

	return factorsLinkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FactorsLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no factors_links provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factorsLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factorsLinkInsertCacheMut.RLock()
	cache, cached := factorsLinkInsertCache[key]
	factorsLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factorsLinkColumns,
			factorsLinkColumnsWithDefault,
			factorsLinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factorsLinkType, factorsLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factorsLinkType, factorsLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"factors_links\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"factors_links\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into factors_links")
	}

	if !cached {
		factorsLinkInsertCacheMut.Lock()
		factorsLinkInsertCache[key] = cache
		factorsLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FactorsLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FactorsLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factorsLinkUpdateCacheMut.RLock()
	cache, cached := factorsLinkUpdateCache[key]
	factorsLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factorsLinkColumns,
			factorsLinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update factors_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"factors_links\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factorsLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factorsLinkType, factorsLinkMapping, append(wl, factorsLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update factors_links row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for factors_links")
	}

	if !cached {
		factorsLinkUpdateCacheMut.Lock()
		factorsLinkUpdateCache[key] = cache
		factorsLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factorsLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for factors_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for factors_links")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactorsLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"factors_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factorsLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in factorsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all factorsLink")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FactorsLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no factors_links provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factorsLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factorsLinkUpsertCacheMut.RLock()
	cache, cached := factorsLinkUpsertCache[key]
	factorsLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factorsLinkColumns,
			factorsLinkColumnsWithDefault,
			factorsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			factorsLinkColumns,
			factorsLinkPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert factors_links, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factorsLinkPrimaryKeyColumns))
			copy(conflict, factorsLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"factors_links\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factorsLinkType, factorsLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factorsLinkType, factorsLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert factors_links")
	}

	if !cached {
		factorsLinkUpsertCacheMut.Lock()
		factorsLinkUpsertCache[key] = cache
		factorsLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FactorsLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FactorsLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FactorsLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factorsLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"factors_links\" WHERE \"factors_link_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from factors_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for factors_links")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factorsLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no factorsLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from factors_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for factors_links")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactorsLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FactorsLink slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(factorsLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"factors_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factorsLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from factorsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for factors_links")
	}

	if len(factorsLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FactorsLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFactorsLink(ctx, exec, o.FactorsLinkID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactorsLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactorsLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"factors_links\".* FROM \"factors_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factorsLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FactorsLinkSlice")
	}

	*o = slice

	return nil
}

// FactorsLinkExists checks if the FactorsLink row exists.
func FactorsLinkExists(ctx context.Context, exec boil.ContextExecutor, factorsLinkID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"factors_links\" where \"factors_link_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, factorsLinkID)
	}

	row := exec.QueryRowContext(ctx, sql, factorsLinkID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if factors_links exists")
	}

	return exists, nil
}
